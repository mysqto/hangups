//
//
//embeds.proto - Unofficial, reverse engineered Protocol Buffers for Google's
//Hangouts chat protocol.
//
//Field and message name should generally match those used by Google, with the
//major exception that "Client" prefixes have been removed.
//

// proto2 is required because we need to be able to serialize default values:

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: embeds.proto

package hangouts

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EMItemType int32

const (
	EMItemType_CommentV2                      EMItemType = 383
	EMItemType_ActionV2                       EMItemType = 415
	EMItemType_PlusMediaCollectionV2          EMItemType = 440
	EMItemType_Hangout                        EMItemType = 254
	EMItemType_DepartmentStore                EMItemType = 182
	EMItemType_EntryPointV2                   EMItemType = 443
	EMItemType_HangoutQuote                   EMItemType = 451
	EMItemType_Enumeration                    EMItemType = 222
	EMItemType_TvEpisode                      EMItemType = 32
	EMItemType_ShoeStore                      EMItemType = 201
	EMItemType_BookFormatType                 EMItemType = 223
	EMItemType_Bakery                         EMItemType = 108
	EMItemType_AccountingService              EMItemType = 103
	EMItemType_PostalAddressV2                EMItemType = 342
	EMItemType_MagazineV2                     EMItemType = 386
	EMItemType_PresentationObject             EMItemType = 216
	EMItemType_Person                         EMItemType = 5
	EMItemType_MovieRentalStore               EMItemType = 195
	EMItemType_SportsEvent                    EMItemType = 63
	EMItemType_GovernmentOffice               EMItemType = 116
	EMItemType_Article                        EMItemType = 11
	EMItemType_FormObject                     EMItemType = 242
	EMItemType_DriveObjectV2                  EMItemType = 364
	EMItemType_CarouselFrame                  EMItemType = 243
	EMItemType_AdministrativeArea             EMItemType = 268
	EMItemType_BuddhistTemple                 EMItemType = 294
	EMItemType_ListenActionV2                 EMItemType = 417
	EMItemType_UpdateActionV2                 EMItemType = 425
	EMItemType_FoodEstablishment              EMItemType = 107
	EMItemType_BankOrCreditUnion              EMItemType = 105
	EMItemType_Unknown                        EMItemType = 257
	EMItemType_Aquarium                       EMItemType = 274
	EMItemType_PlayMusicTrack                 EMItemType = 323
	EMItemType_BlogV2                         EMItemType = 402
	EMItemType_HobbyShop                      EMItemType = 189
	EMItemType_PostalAddress                  EMItemType = 238
	EMItemType_ItemAvailability               EMItemType = 224
	EMItemType_CreateActionV2                 EMItemType = 419
	EMItemType_MusicRecordingV2               EMItemType = 375
	EMItemType_GoogleUserPhotoV2              EMItemType = 448
	EMItemType_YoutubeChannelV2               EMItemType = 412
	EMItemType_PlusMediaObjectV2              EMItemType = 437
	EMItemType_FormObjectV2                   EMItemType = 361
	EMItemType_Restaurant                     EMItemType = 114
	EMItemType_Optician                       EMItemType = 145
	EMItemType_PlanActionV2                   EMItemType = 435
	EMItemType_WebPage                        EMItemType = 35
	EMItemType_Cemetery                       EMItemType = 279
	EMItemType_ConsumeActionV2                EMItemType = 416
	EMItemType_ToyStore                       EMItemType = 204
	EMItemType_RecommendedPeople              EMItemType = 326
	EMItemType_Beach                          EMItemType = 275
	EMItemType_ArtGallery                     EMItemType = 97
	EMItemType_JewelryStore                   EMItemType = 191
	EMItemType_Recipe                         EMItemType = 29
	EMItemType_SquareInvite                   EMItemType = 331
	EMItemType_VideoObject                    EMItemType = 22
	EMItemType_ElectronicsStore               EMItemType = 183
	EMItemType_PlusAudioV2                    EMItemType = 438
	EMItemType_Festival                       EMItemType = 57
	EMItemType_Continent                      EMItemType = 319
	EMItemType_ElementarySchool               EMItemType = 69
	EMItemType_SquareV2                       EMItemType = 355
	EMItemType_PlaceV2                        EMItemType = 340
	EMItemType_Hospital                       EMItemType = 91
	EMItemType_Quantity                       EMItemType = 229
	EMItemType_ThingV2                        EMItemType = 335
	EMItemType_ContactPage                    EMItemType = 41
	EMItemType_Plumber                        EMItemType = 132
	EMItemType_DaySpa                         EMItemType = 120
	EMItemType_AudioObjectV2                  EMItemType = 368
	EMItemType_ItemPage                       EMItemType = 42
	EMItemType_BowlingAlley                   EMItemType = 166
	EMItemType_DiscoverActionV2               EMItemType = 430
	EMItemType_EducationalOrganization        EMItemType = 67
	EMItemType_TvSeriesV2                     EMItemType = 394
	EMItemType_Checkin                        EMItemType = 266
	EMItemType_WriteActionV2                  EMItemType = 433
	EMItemType_MobileApplicationV2            EMItemType = 389
	EMItemType_DeprecatedTourObject           EMItemType = 253
	EMItemType_GatedResidenceCommunity        EMItemType = 211
	EMItemType_ComputerStore                  EMItemType = 180
	EMItemType_ProductReview                  EMItemType = 251
	EMItemType_Product                        EMItemType = 7
	EMItemType_GeneralContractor              EMItemType = 127
	EMItemType_ProfilePage                    EMItemType = 43
	EMItemType_PlusPhotoV2                    EMItemType = 344
	EMItemType_WpSidebar                      EMItemType = 51
	EMItemType_StoryV2                        EMItemType = 380
	EMItemType_TrainStation                   EMItemType = 307
	EMItemType_SaleEvent                      EMItemType = 61
	EMItemType_Corporation                    EMItemType = 66
	EMItemType_PlusSoftwareApplicationV2      EMItemType = 414
	EMItemType_Park                           EMItemType = 290
	EMItemType_ProductReviewV2                EMItemType = 392
	EMItemType_VisualArtsEvent                EMItemType = 65
	EMItemType_PlusPhotoCollectionV2          EMItemType = 407
	EMItemType_MusicPlaylist                  EMItemType = 24
	EMItemType_ImageObjectV2                  EMItemType = 339
	EMItemType_BasicInteractionV2             EMItemType = 365
	EMItemType_HighSchool                     EMItemType = 70
	EMItemType_AudioObject                    EMItemType = 19
	EMItemType_PublicSwimmingPool             EMItemType = 170
	EMItemType_VeterinaryCare                 EMItemType = 148
	EMItemType_TvEpisodeV2                    EMItemType = 400
	EMItemType_PerformingArtsTheater          EMItemType = 292
	EMItemType_RadioStation                   EMItemType = 160
	EMItemType_SpreadsheetObject              EMItemType = 218
	EMItemType_MotorcycleRepair               EMItemType = 86
	EMItemType_LodgingBusiness                EMItemType = 136
	EMItemType_ReactActionV2                  EMItemType = 422
	EMItemType_CafeOrCoffeeShop               EMItemType = 111
	EMItemType_HairSalon                      EMItemType = 121
	EMItemType_AddActionV2                    EMItemType = 426
	EMItemType_WantActionV2                   EMItemType = 424
	EMItemType_Notary                         EMItemType = 157
	EMItemType_DanceEvent                     EMItemType = 55
	EMItemType_Language                       EMItemType = 227
	EMItemType_EntertainmentBusiness          EMItemType = 94
	EMItemType_Organization                   EMItemType = 4
	EMItemType_EmotishareV2                   EMItemType = 382
	EMItemType_Map                            EMItemType = 17
	EMItemType_TaxiStand                      EMItemType = 306
	EMItemType_EventTimeV2                    EMItemType = 406
	EMItemType_CollegeOrUniversity            EMItemType = 68
	EMItemType_PollOptionV2                   EMItemType = 409
	EMItemType_PollV2                         EMItemType = 408
	EMItemType_GoogleChart                    EMItemType = 258
	EMItemType_GasStation                     EMItemType = 84
	EMItemType_WpHeader                       EMItemType = 50
	EMItemType_SoftwareApplicationV2          EMItemType = 444
	EMItemType_MedicalClinic                  EMItemType = 144
	EMItemType_GoogleUserPhotoAlbum           EMItemType = 449
	EMItemType_TattooParlor                   EMItemType = 124
	EMItemType_MovingCompany                  EMItemType = 131
	EMItemType_BookV2                         EMItemType = 377
	EMItemType_MusicAlbum                     EMItemType = 25
	EMItemType_HealthAndBeautyBusiness        EMItemType = 118
	EMItemType_AutoBodyShop                   EMItemType = 78
	EMItemType_WebPageElement                 EMItemType = 45
	EMItemType_OfferV2                        EMItemType = 367
	EMItemType_MediaObjectV2                  EMItemType = 338
	EMItemType_GEvent                         EMItemType = 2
	EMItemType_ReservationV2                  EMItemType = 398
	EMItemType_RiverBodyOfWater               EMItemType = 316
	EMItemType_Casino                         EMItemType = 98
	EMItemType_ArticleV2                      EMItemType = 391
	EMItemType_MusicGroupV2                   EMItemType = 373
	EMItemType_OfferItemCondition             EMItemType = 225
	EMItemType_NailSalon                      EMItemType = 123
	EMItemType_MedicalOrganization            EMItemType = 141
	EMItemType_Painting                       EMItemType = 27
	EMItemType_ConvenienceStore               EMItemType = 181
	EMItemType_SquareInviteV2                 EMItemType = 356
	EMItemType_PlayObjectV2                   EMItemType = 387
	EMItemType_ChildCare                      EMItemType = 87
	EMItemType_MusicVideoObject               EMItemType = 21
	EMItemType_MovieV2                        EMItemType = 370
	EMItemType_Crematorium                    EMItemType = 280
	EMItemType_HangoutConsumer                EMItemType = 256
	EMItemType_MusicGroup                     EMItemType = 260
	EMItemType_Canal                          EMItemType = 311
	EMItemType_FindActionV2                   EMItemType = 427
	EMItemType_Duration                       EMItemType = 231
	EMItemType_StadiumOrArena                 EMItemType = 173
	EMItemType_State                          EMItemType = 271
	EMItemType_MotorcycleDealer               EMItemType = 85
	EMItemType_LandmarksOrHistoricalBuildings EMItemType = 322
	EMItemType_CommentActionV2                EMItemType = 432
	EMItemType_FileObject                     EMItemType = 265
	EMItemType_RatingV2                       EMItemType = 371
	EMItemType_InsuranceAgency                EMItemType = 106
	EMItemType_Distance                       EMItemType = 230
	EMItemType_Church                         EMItemType = 296
	EMItemType_CollectionPage                 EMItemType = 38
	EMItemType_PlusPhotoAlbumV2               EMItemType = 349
	EMItemType_ClothingStore                  EMItemType = 179
	EMItemType_Landform                       EMItemType = 309
	EMItemType_TravelAgency                   EMItemType = 208
	EMItemType_ImageGallery                   EMItemType = 39
	EMItemType_TvSeries                       EMItemType = 34
	EMItemType_SiteNavigationElement          EMItemType = 46
	EMItemType_CatholicChurch                 EMItemType = 295
	EMItemType_AdultEntertainment             EMItemType = 95
	EMItemType_AutoRental                     EMItemType = 81
	EMItemType_AggregateRatingV2              EMItemType = 369
	EMItemType_UserInteraction                EMItemType = 220
	EMItemType_LocalPlusPhotoAlbum            EMItemType = 332
	EMItemType_Mosque                         EMItemType = 298
	EMItemType_ContactPoint                   EMItemType = 237
	EMItemType_ParkingFacility                EMItemType = 291
	EMItemType_FileObjectV2                   EMItemType = 360
	EMItemType_MusicVenue                     EMItemType = 289
	EMItemType_ReviewV2                       EMItemType = 388
	EMItemType_OceanBodyOfWater               EMItemType = 313
	EMItemType_TheaterEvent                   EMItemType = 64
	EMItemType_MusicAlbumV2                   EMItemType = 372
	EMItemType_AutomatedTeller                EMItemType = 104
	EMItemType_PlusPhotosAddedToCollection    EMItemType = 261
	EMItemType_WholesaleStore                 EMItemType = 205
	EMItemType_PresentationObjectV2           EMItemType = 362
	EMItemType_VideoObjectV2                  EMItemType = 354
	EMItemType_Attorney                       EMItemType = 151
	EMItemType_SportsClub                     EMItemType = 172
	EMItemType_StickerV2                      EMItemType = 441
	EMItemType_PlusPhotosAddedToCollectionV2  EMItemType = 405
	EMItemType_PerformingGroup                EMItemType = 259
	EMItemType_AutoRepair                     EMItemType = 82
	EMItemType_NewsArticle                    EMItemType = 13
	EMItemType_GeoCoordinatesV2               EMItemType = 343
	EMItemType_Hostel                         EMItemType = 138
	EMItemType_Rating                         EMItemType = 234
	EMItemType_FurnitureStore                 EMItemType = 185
	EMItemType_ProfessionalService            EMItemType = 149
	EMItemType_RealEstateAgent                EMItemType = 161
	EMItemType_ChalkboardV2                   EMItemType = 447
	EMItemType_RoofingContractor              EMItemType = 133
	EMItemType_ComedyEvent                    EMItemType = 54
	EMItemType_LocalPlusPhotoAlbumV2          EMItemType = 397
	EMItemType_AggregateRating                EMItemType = 235
	EMItemType_PoliceStation                  EMItemType = 92
	EMItemType_BeautySalon                    EMItemType = 119
	EMItemType_Blog                           EMItemType = 14
	EMItemType_Review                         EMItemType = 30
	EMItemType_BikeStore                      EMItemType = 177
	EMItemType_Intangible                     EMItemType = 3
	EMItemType_OutletStore                    EMItemType = 198
	EMItemType_TelevisionStation              EMItemType = 206
	EMItemType_FoodEvent                      EMItemType = 58
	EMItemType_HangoutV2                      EMItemType = 353
	EMItemType_PlusPageV2                     EMItemType = 385
	EMItemType_ExerciseGym                    EMItemType = 167
	EMItemType_Courthouse                     EMItemType = 284
	EMItemType_Movie                          EMItemType = 23
	EMItemType_PlaceReviewV2                  EMItemType = 401
	EMItemType_FireStation                    EMItemType = 90
	EMItemType_Energy                         EMItemType = 232
	EMItemType_HoaPlusEventV2                 EMItemType = 410
	EMItemType_StructuredValue                EMItemType = 236
	EMItemType_Airport                        EMItemType = 273
	EMItemType_Mountain                       EMItemType = 320
	EMItemType_VideoGalleryV2                 EMItemType = 411
	EMItemType_BodyOfWater                    EMItemType = 310
	EMItemType_MensClothingStore              EMItemType = 193
	EMItemType_ShoppingCenter                 EMItemType = 164
	EMItemType_MusicPlaylistV2                EMItemType = 374
	EMItemType_Square                         EMItemType = 246
	EMItemType_MiddleSchool                   EMItemType = 71
	EMItemType_ViewActionV2                   EMItemType = 442
	EMItemType_Thing                          EMItemType = 0
	EMItemType_Residence                      EMItemType = 209
	EMItemType_SportingGoodsStore             EMItemType = 202
	EMItemType_ApartmentComplex               EMItemType = 210
	EMItemType_Magazine                       EMItemType = 328
	EMItemType_GovernmentBuilding             EMItemType = 282
	EMItemType_SearchResultsPage              EMItemType = 44
	EMItemType_HinduTemple                    EMItemType = 297
	EMItemType_DrawingObject                  EMItemType = 262
	EMItemType_OfficeEquipmentStore           EMItemType = 197
	EMItemType_PlusPage                       EMItemType = 327
	EMItemType_Library                        EMItemType = 135
	EMItemType_BusStation                     EMItemType = 276
	EMItemType_Book                           EMItemType = 15
	EMItemType_BedAndBreakfast                EMItemType = 137
	EMItemType_Date                           EMItemType = 445
	EMItemType_SoftwareApplication            EMItemType = 302
	EMItemType_SeaBodyOfWater                 EMItemType = 317
	EMItemType_Reservation                    EMItemType = 267
	EMItemType_City                           EMItemType = 269
	EMItemType_ScholarlyArticle               EMItemType = 219
	EMItemType_BookStore                      EMItemType = 178
	EMItemType_HousePainter                   EMItemType = 129
	EMItemType_CheckinV2                      EMItemType = 357
	EMItemType_AboutPage                      EMItemType = 36
	EMItemType_PlusPhotoAlbum                 EMItemType = 250
	EMItemType_TouristAttraction              EMItemType = 213
	EMItemType_PlusPost                       EMItemType = 329
	EMItemType_MobilePhoneStore               EMItemType = 194
	EMItemType_WpFooter                       EMItemType = 49
	EMItemType_UserPlusOnes                   EMItemType = 215
	EMItemType_GovernmentOrganization         EMItemType = 74
	EMItemType_TravelEvent                    EMItemType = 325
	EMItemType_DefenceEstablishment           EMItemType = 285
	EMItemType_PersonV2                       EMItemType = 350
	EMItemType_Volcano                        EMItemType = 321
	EMItemType_FinancialService               EMItemType = 102
	EMItemType_Table                          EMItemType = 47
	EMItemType_Locksmith                      EMItemType = 130
	EMItemType_HomeGoodsStore                 EMItemType = 190
	EMItemType_HomeAndConstructionBusiness    EMItemType = 125
	EMItemType_Offer                          EMItemType = 228
	EMItemType_CommunicateActionV2            EMItemType = 429
	EMItemType_Dentist                        EMItemType = 142
	EMItemType_NutritionInformation           EMItemType = 241
	EMItemType_ItemList                       EMItemType = 16
	EMItemType_MobileApplication              EMItemType = 303
	EMItemType_Comment                        EMItemType = 264
	EMItemType_TradeActionV2                  EMItemType = 418
	EMItemType_PlayMusicAlbumV2               EMItemType = 393
	EMItemType_WebApplication                 EMItemType = 304
	EMItemType_School                         EMItemType = 73
	EMItemType_BuyActionV2                    EMItemType = 421
	EMItemType_MusicRecording                 EMItemType = 26
	EMItemType_AutoDealer                     EMItemType = 79
	EMItemType_PlusPostV2                     EMItemType = 390
	EMItemType_SportsActivityLocation         EMItemType = 165
	EMItemType_EventV2                        EMItemType = 352
	EMItemType_Zoo                            EMItemType = 308
	EMItemType_AutoWash                       EMItemType = 83
	EMItemType_Preschool                      EMItemType = 72
	EMItemType_OrganizationV2                 EMItemType = 351
	EMItemType_BarOrPub                       EMItemType = 109
	EMItemType_DryCleaningOrLaundry           EMItemType = 88
	EMItemType_GeoCoordinates                 EMItemType = 239
	EMItemType_AutoPartsStore                 EMItemType = 80
	EMItemType_IceCreamShop                   EMItemType = 113
	EMItemType_LocalBusinessV2                EMItemType = 379
	EMItemType_Physician                      EMItemType = 147
	EMItemType_EventVenue                     EMItemType = 281
	EMItemType_DocumentObjectV2               EMItemType = 358
	EMItemType_WpAdBlock                      EMItemType = 48
	EMItemType_PlusEventV2                    EMItemType = 404
	EMItemType_TvSeason                       EMItemType = 33
	EMItemType_TennisComplex                  EMItemType = 174
	EMItemType_GoogleOfferV2                  EMItemType = 378
	EMItemType_CollexionV2                    EMItemType = 413
	EMItemType_PawnShop                       EMItemType = 199
	EMItemType_RecyclingCenter                EMItemType = 162
	EMItemType_Motel                          EMItemType = 140
	EMItemType_Museum                         EMItemType = 288
	EMItemType_AutomotiveBusiness             EMItemType = 77
	EMItemType_Embassy                        EMItemType = 286
	EMItemType_Campground                     EMItemType = 278
	EMItemType_BusStop                        EMItemType = 277
	EMItemType_ComedyClub                     EMItemType = 99
	EMItemType_PlaceOfWorship                 EMItemType = 293
	EMItemType_Emotishare                     EMItemType = 334
	EMItemType_MusicStore                     EMItemType = 196
	EMItemType_PlusReshareV2                  EMItemType = 446
	EMItemType_InteractActionV2               EMItemType = 428
	EMItemType_Photograph                     EMItemType = 28
	EMItemType_PetStore                       EMItemType = 200
	EMItemType_Place                          EMItemType = 6
	EMItemType_InternetCafe                   EMItemType = 134
	EMItemType_BlogPosting                    EMItemType = 12
	EMItemType_TouristInformationCenter       EMItemType = 207
	EMItemType_RVPark                         EMItemType = 301
	EMItemType_CheckoutPage                   EMItemType = 37
	EMItemType_WebPageV2                      EMItemType = 337
	EMItemType_InteractionV2                  EMItemType = 366
	EMItemType_HangoutBroadcast               EMItemType = 255
	EMItemType_BlogPostingV2                  EMItemType = 403
	EMItemType_HardwareStore                  EMItemType = 188
	EMItemType_PostOffice                     EMItemType = 117
	EMItemType_NightClub                      EMItemType = 101
	EMItemType_Pharmacy                       EMItemType = 146
	EMItemType_Playground                     EMItemType = 300
	EMItemType_ExampleObject                  EMItemType = 245
	EMItemType_SpreadsheetObjectV2            EMItemType = 363
	EMItemType_DrawingObjectV2                EMItemType = 359
	EMItemType_AnimalShelter                  EMItemType = 76
	EMItemType_SelfStorage                    EMItemType = 163
	EMItemType_PlayMusicAlbum                 EMItemType = 324
	EMItemType_CheckInActionV2                EMItemType = 431
	EMItemType_HangoutChatMessage             EMItemType = 450
	EMItemType_Florist                        EMItemType = 184
	EMItemType_SkiResort                      EMItemType = 171
	EMItemType_MovieTheater                   EMItemType = 100
	EMItemType_BusinessEvent                  EMItemType = 52
	EMItemType_EducationEvent                 EMItemType = 56
	EMItemType_ReviewActionV2                 EMItemType = 423
	EMItemType_GardenStore                    EMItemType = 186
	EMItemType_EmergencyService               EMItemType = 89
	EMItemType_SocialEvent                    EMItemType = 62
	EMItemType_MediaObject                    EMItemType = 18
	EMItemType_ChildrensEvent                 EMItemType = 53
	EMItemType_PlaceReview                    EMItemType = 263
	EMItemType_LakeBodyOfWater                EMItemType = 312
	EMItemType_Synagogue                      EMItemType = 299
	EMItemType_EmploymentAgengy               EMItemType = 93
	EMItemType_ImageObject                    EMItemType = 20
	EMItemType_PlusPhoto                      EMItemType = 249
	EMItemType_JobPosting                     EMItemType = 226
	EMItemType_ReserveActionV2                EMItemType = 436
	EMItemType_Mass                           EMItemType = 233
	EMItemType_LiteraryEvent                  EMItemType = 59
	EMItemType_DocumentObject                 EMItemType = 217
	EMItemType_AppInvite                      EMItemType = 330
	EMItemType_GolfCourse                     EMItemType = 168
	EMItemType_Pond                           EMItemType = 314
	EMItemType_CreativeWorkV2                 EMItemType = 336
	EMItemType_LegislativeBuilding            EMItemType = 287
	EMItemType_AmusementPark                  EMItemType = 96
	EMItemType_SubwayStation                  EMItemType = 305
	EMItemType_CivicStructure                 EMItemType = 272
	EMItemType_OrganizeActionV2               EMItemType = 434
	EMItemType_Winery                         EMItemType = 115
	EMItemType_FinancialQuote                 EMItemType = 252
	EMItemType_PlayMusicTrackV2               EMItemType = 399
	EMItemType_Brewery                        EMItemType = 110
	EMItemType_Sculpture                      EMItemType = 31
	EMItemType_FinancialQuoteV2               EMItemType = 384
	EMItemType_Store                          EMItemType = 175
	EMItemType_UserCountry                    EMItemType = 270
	EMItemType_HvacBusiness                   EMItemType = 128
	EMItemType_SingleFamilyResidence          EMItemType = 212
	EMItemType_VideoGallery                   EMItemType = 40
	EMItemType_AssessActionV2                 EMItemType = 420
	EMItemType_CityHall                       EMItemType = 283
	EMItemType_GeoShape                       EMItemType = 240
	EMItemType_LiquorStore                    EMItemType = 192
	EMItemType_HealthClub                     EMItemType = 122
	EMItemType_Waterfall                      EMItemType = 318
	EMItemType_MusicEvent                     EMItemType = 60
	EMItemType_TireShop                       EMItemType = 203
	EMItemType_CreativeWork                   EMItemType = 1
	EMItemType_NewsArticleV2                  EMItemType = 439
	EMItemType_LocalBusiness                  EMItemType = 75
	EMItemType_Hotel                          EMItemType = 139
	EMItemType_Reservoir                      EMItemType = 315
	EMItemType_DeprecatedTourObjectV2         EMItemType = 395
	EMItemType_FastFoodRestaurant             EMItemType = 112
	EMItemType_Electrician                    EMItemType = 126
	EMItemType_GroceryStore                   EMItemType = 187
	EMItemType_PlusEvent                      EMItemType = 244
)

// Enum value maps for EMItemType.
var (
	EMItemType_name = map[int32]string{
		383: "CommentV2",
		415: "ActionV2",
		440: "PlusMediaCollectionV2",
		254: "Hangout",
		182: "DepartmentStore",
		443: "EntryPointV2",
		451: "HangoutQuote",
		222: "Enumeration",
		32:  "TvEpisode",
		201: "ShoeStore",
		223: "BookFormatType",
		108: "Bakery",
		103: "AccountingService",
		342: "PostalAddressV2",
		386: "MagazineV2",
		216: "PresentationObject",
		5:   "Person",
		195: "MovieRentalStore",
		63:  "SportsEvent",
		116: "GovernmentOffice",
		11:  "Article",
		242: "FormObject",
		364: "DriveObjectV2",
		243: "CarouselFrame",
		268: "AdministrativeArea",
		294: "BuddhistTemple",
		417: "ListenActionV2",
		425: "UpdateActionV2",
		107: "FoodEstablishment",
		105: "BankOrCreditUnion",
		257: "Unknown",
		274: "Aquarium",
		323: "PlayMusicTrack",
		402: "BlogV2",
		189: "HobbyShop",
		238: "PostalAddress",
		224: "ItemAvailability",
		419: "CreateActionV2",
		375: "MusicRecordingV2",
		448: "GoogleUserPhotoV2",
		412: "YoutubeChannelV2",
		437: "PlusMediaObjectV2",
		361: "FormObjectV2",
		114: "Restaurant",
		145: "Optician",
		435: "PlanActionV2",
		35:  "WebPage",
		279: "Cemetery",
		416: "ConsumeActionV2",
		204: "ToyStore",
		326: "RecommendedPeople",
		275: "Beach",
		97:  "ArtGallery",
		191: "JewelryStore",
		29:  "Recipe",
		331: "SquareInvite",
		22:  "VideoObject",
		183: "ElectronicsStore",
		438: "PlusAudioV2",
		57:  "Festival",
		319: "Continent",
		69:  "ElementarySchool",
		355: "SquareV2",
		340: "PlaceV2",
		91:  "Hospital",
		229: "Quantity",
		335: "ThingV2",
		41:  "ContactPage",
		132: "Plumber",
		120: "DaySpa",
		368: "AudioObjectV2",
		42:  "ItemPage",
		166: "BowlingAlley",
		430: "DiscoverActionV2",
		67:  "EducationalOrganization",
		394: "TvSeriesV2",
		266: "Checkin",
		433: "WriteActionV2",
		389: "MobileApplicationV2",
		253: "DeprecatedTourObject",
		211: "GatedResidenceCommunity",
		180: "ComputerStore",
		251: "ProductReview",
		7:   "Product",
		127: "GeneralContractor",
		43:  "ProfilePage",
		344: "PlusPhotoV2",
		51:  "WpSidebar",
		380: "StoryV2",
		307: "TrainStation",
		61:  "SaleEvent",
		66:  "Corporation",
		414: "PlusSoftwareApplicationV2",
		290: "Park",
		392: "ProductReviewV2",
		65:  "VisualArtsEvent",
		407: "PlusPhotoCollectionV2",
		24:  "MusicPlaylist",
		339: "ImageObjectV2",
		365: "BasicInteractionV2",
		70:  "HighSchool",
		19:  "AudioObject",
		170: "PublicSwimmingPool",
		148: "VeterinaryCare",
		400: "TvEpisodeV2",
		292: "PerformingArtsTheater",
		160: "RadioStation",
		218: "SpreadsheetObject",
		86:  "MotorcycleRepair",
		136: "LodgingBusiness",
		422: "ReactActionV2",
		111: "CafeOrCoffeeShop",
		121: "HairSalon",
		426: "AddActionV2",
		424: "WantActionV2",
		157: "Notary",
		55:  "DanceEvent",
		227: "Language",
		94:  "EntertainmentBusiness",
		4:   "Organization",
		382: "EmotishareV2",
		17:  "Map",
		306: "TaxiStand",
		406: "EventTimeV2",
		68:  "CollegeOrUniversity",
		409: "PollOptionV2",
		408: "PollV2",
		258: "GoogleChart",
		84:  "GasStation",
		50:  "WpHeader",
		444: "SoftwareApplicationV2",
		144: "MedicalClinic",
		449: "GoogleUserPhotoAlbum",
		124: "TattooParlor",
		131: "MovingCompany",
		377: "BookV2",
		25:  "MusicAlbum",
		118: "HealthAndBeautyBusiness",
		78:  "AutoBodyShop",
		45:  "WebPageElement",
		367: "OfferV2",
		338: "MediaObjectV2",
		2:   "GEvent",
		398: "ReservationV2",
		316: "RiverBodyOfWater",
		98:  "Casino",
		391: "ArticleV2",
		373: "MusicGroupV2",
		225: "OfferItemCondition",
		123: "NailSalon",
		141: "MedicalOrganization",
		27:  "Painting",
		181: "ConvenienceStore",
		356: "SquareInviteV2",
		387: "PlayObjectV2",
		87:  "ChildCare",
		21:  "MusicVideoObject",
		370: "MovieV2",
		280: "Crematorium",
		256: "HangoutConsumer",
		260: "MusicGroup",
		311: "Canal",
		427: "FindActionV2",
		231: "Duration",
		173: "StadiumOrArena",
		271: "State",
		85:  "MotorcycleDealer",
		322: "LandmarksOrHistoricalBuildings",
		432: "CommentActionV2",
		265: "FileObject",
		371: "RatingV2",
		106: "InsuranceAgency",
		230: "Distance",
		296: "Church",
		38:  "CollectionPage",
		349: "PlusPhotoAlbumV2",
		179: "ClothingStore",
		309: "Landform",
		208: "TravelAgency",
		39:  "ImageGallery",
		34:  "TvSeries",
		46:  "SiteNavigationElement",
		295: "CatholicChurch",
		95:  "AdultEntertainment",
		81:  "AutoRental",
		369: "AggregateRatingV2",
		220: "UserInteraction",
		332: "LocalPlusPhotoAlbum",
		298: "Mosque",
		237: "ContactPoint",
		291: "ParkingFacility",
		360: "FileObjectV2",
		289: "MusicVenue",
		388: "ReviewV2",
		313: "OceanBodyOfWater",
		64:  "TheaterEvent",
		372: "MusicAlbumV2",
		104: "AutomatedTeller",
		261: "PlusPhotosAddedToCollection",
		205: "WholesaleStore",
		362: "PresentationObjectV2",
		354: "VideoObjectV2",
		151: "Attorney",
		172: "SportsClub",
		441: "StickerV2",
		405: "PlusPhotosAddedToCollectionV2",
		259: "PerformingGroup",
		82:  "AutoRepair",
		13:  "NewsArticle",
		343: "GeoCoordinatesV2",
		138: "Hostel",
		234: "Rating",
		185: "FurnitureStore",
		149: "ProfessionalService",
		161: "RealEstateAgent",
		447: "ChalkboardV2",
		133: "RoofingContractor",
		54:  "ComedyEvent",
		397: "LocalPlusPhotoAlbumV2",
		235: "AggregateRating",
		92:  "PoliceStation",
		119: "BeautySalon",
		14:  "Blog",
		30:  "Review",
		177: "BikeStore",
		3:   "Intangible",
		198: "OutletStore",
		206: "TelevisionStation",
		58:  "FoodEvent",
		353: "HangoutV2",
		385: "PlusPageV2",
		167: "ExerciseGym",
		284: "Courthouse",
		23:  "Movie",
		401: "PlaceReviewV2",
		90:  "FireStation",
		232: "Energy",
		410: "HoaPlusEventV2",
		236: "StructuredValue",
		273: "Airport",
		320: "Mountain",
		411: "VideoGalleryV2",
		310: "BodyOfWater",
		193: "MensClothingStore",
		164: "ShoppingCenter",
		374: "MusicPlaylistV2",
		246: "Square",
		71:  "MiddleSchool",
		442: "ViewActionV2",
		0:   "Thing",
		209: "Residence",
		202: "SportingGoodsStore",
		210: "ApartmentComplex",
		328: "Magazine",
		282: "GovernmentBuilding",
		44:  "SearchResultsPage",
		297: "HinduTemple",
		262: "DrawingObject",
		197: "OfficeEquipmentStore",
		327: "PlusPage",
		135: "Library",
		276: "BusStation",
		15:  "Book",
		137: "BedAndBreakfast",
		445: "Date",
		302: "SoftwareApplication",
		317: "SeaBodyOfWater",
		267: "Reservation",
		269: "City",
		219: "ScholarlyArticle",
		178: "BookStore",
		129: "HousePainter",
		357: "CheckinV2",
		36:  "AboutPage",
		250: "PlusPhotoAlbum",
		213: "TouristAttraction",
		329: "PlusPost",
		194: "MobilePhoneStore",
		49:  "WpFooter",
		215: "UserPlusOnes",
		74:  "GovernmentOrganization",
		325: "TravelEvent",
		285: "DefenceEstablishment",
		350: "PersonV2",
		321: "Volcano",
		102: "FinancialService",
		47:  "Table",
		130: "Locksmith",
		190: "HomeGoodsStore",
		125: "HomeAndConstructionBusiness",
		228: "Offer",
		429: "CommunicateActionV2",
		142: "Dentist",
		241: "NutritionInformation",
		16:  "ItemList",
		303: "MobileApplication",
		264: "Comment",
		418: "TradeActionV2",
		393: "PlayMusicAlbumV2",
		304: "WebApplication",
		73:  "School",
		421: "BuyActionV2",
		26:  "MusicRecording",
		79:  "AutoDealer",
		390: "PlusPostV2",
		165: "SportsActivityLocation",
		352: "EventV2",
		308: "Zoo",
		83:  "AutoWash",
		72:  "Preschool",
		351: "OrganizationV2",
		109: "BarOrPub",
		88:  "DryCleaningOrLaundry",
		239: "GeoCoordinates",
		80:  "AutoPartsStore",
		113: "IceCreamShop",
		379: "LocalBusinessV2",
		147: "Physician",
		281: "EventVenue",
		358: "DocumentObjectV2",
		48:  "WpAdBlock",
		404: "PlusEventV2",
		33:  "TvSeason",
		174: "TennisComplex",
		378: "GoogleOfferV2",
		413: "CollexionV2",
		199: "PawnShop",
		162: "RecyclingCenter",
		140: "Motel",
		288: "Museum",
		77:  "AutomotiveBusiness",
		286: "Embassy",
		278: "Campground",
		277: "BusStop",
		99:  "ComedyClub",
		293: "PlaceOfWorship",
		334: "Emotishare",
		196: "MusicStore",
		446: "PlusReshareV2",
		428: "InteractActionV2",
		28:  "Photograph",
		200: "PetStore",
		6:   "Place",
		134: "InternetCafe",
		12:  "BlogPosting",
		207: "TouristInformationCenter",
		301: "RVPark",
		37:  "CheckoutPage",
		337: "WebPageV2",
		366: "InteractionV2",
		255: "HangoutBroadcast",
		403: "BlogPostingV2",
		188: "HardwareStore",
		117: "PostOffice",
		101: "NightClub",
		146: "Pharmacy",
		300: "Playground",
		245: "ExampleObject",
		363: "SpreadsheetObjectV2",
		359: "DrawingObjectV2",
		76:  "AnimalShelter",
		163: "SelfStorage",
		324: "PlayMusicAlbum",
		431: "CheckInActionV2",
		450: "HangoutChatMessage",
		184: "Florist",
		171: "SkiResort",
		100: "MovieTheater",
		52:  "BusinessEvent",
		56:  "EducationEvent",
		423: "ReviewActionV2",
		186: "GardenStore",
		89:  "EmergencyService",
		62:  "SocialEvent",
		18:  "MediaObject",
		53:  "ChildrensEvent",
		263: "PlaceReview",
		312: "LakeBodyOfWater",
		299: "Synagogue",
		93:  "EmploymentAgengy",
		20:  "ImageObject",
		249: "PlusPhoto",
		226: "JobPosting",
		436: "ReserveActionV2",
		233: "Mass",
		59:  "LiteraryEvent",
		217: "DocumentObject",
		330: "AppInvite",
		168: "GolfCourse",
		314: "Pond",
		336: "CreativeWorkV2",
		287: "LegislativeBuilding",
		96:  "AmusementPark",
		305: "SubwayStation",
		272: "CivicStructure",
		434: "OrganizeActionV2",
		115: "Winery",
		252: "FinancialQuote",
		399: "PlayMusicTrackV2",
		110: "Brewery",
		31:  "Sculpture",
		384: "FinancialQuoteV2",
		175: "Store",
		270: "UserCountry",
		128: "HvacBusiness",
		212: "SingleFamilyResidence",
		40:  "VideoGallery",
		420: "AssessActionV2",
		283: "CityHall",
		240: "GeoShape",
		192: "LiquorStore",
		122: "HealthClub",
		318: "Waterfall",
		60:  "MusicEvent",
		203: "TireShop",
		1:   "CreativeWork",
		439: "NewsArticleV2",
		75:  "LocalBusiness",
		139: "Hotel",
		315: "Reservoir",
		395: "DeprecatedTourObjectV2",
		112: "FastFoodRestaurant",
		126: "Electrician",
		187: "GroceryStore",
		244: "PlusEvent",
	}
	EMItemType_value = map[string]int32{
		"CommentV2":                      383,
		"ActionV2":                       415,
		"PlusMediaCollectionV2":          440,
		"Hangout":                        254,
		"DepartmentStore":                182,
		"EntryPointV2":                   443,
		"HangoutQuote":                   451,
		"Enumeration":                    222,
		"TvEpisode":                      32,
		"ShoeStore":                      201,
		"BookFormatType":                 223,
		"Bakery":                         108,
		"AccountingService":              103,
		"PostalAddressV2":                342,
		"MagazineV2":                     386,
		"PresentationObject":             216,
		"Person":                         5,
		"MovieRentalStore":               195,
		"SportsEvent":                    63,
		"GovernmentOffice":               116,
		"Article":                        11,
		"FormObject":                     242,
		"DriveObjectV2":                  364,
		"CarouselFrame":                  243,
		"AdministrativeArea":             268,
		"BuddhistTemple":                 294,
		"ListenActionV2":                 417,
		"UpdateActionV2":                 425,
		"FoodEstablishment":              107,
		"BankOrCreditUnion":              105,
		"Unknown":                        257,
		"Aquarium":                       274,
		"PlayMusicTrack":                 323,
		"BlogV2":                         402,
		"HobbyShop":                      189,
		"PostalAddress":                  238,
		"ItemAvailability":               224,
		"CreateActionV2":                 419,
		"MusicRecordingV2":               375,
		"GoogleUserPhotoV2":              448,
		"YoutubeChannelV2":               412,
		"PlusMediaObjectV2":              437,
		"FormObjectV2":                   361,
		"Restaurant":                     114,
		"Optician":                       145,
		"PlanActionV2":                   435,
		"WebPage":                        35,
		"Cemetery":                       279,
		"ConsumeActionV2":                416,
		"ToyStore":                       204,
		"RecommendedPeople":              326,
		"Beach":                          275,
		"ArtGallery":                     97,
		"JewelryStore":                   191,
		"Recipe":                         29,
		"SquareInvite":                   331,
		"VideoObject":                    22,
		"ElectronicsStore":               183,
		"PlusAudioV2":                    438,
		"Festival":                       57,
		"Continent":                      319,
		"ElementarySchool":               69,
		"SquareV2":                       355,
		"PlaceV2":                        340,
		"Hospital":                       91,
		"Quantity":                       229,
		"ThingV2":                        335,
		"ContactPage":                    41,
		"Plumber":                        132,
		"DaySpa":                         120,
		"AudioObjectV2":                  368,
		"ItemPage":                       42,
		"BowlingAlley":                   166,
		"DiscoverActionV2":               430,
		"EducationalOrganization":        67,
		"TvSeriesV2":                     394,
		"Checkin":                        266,
		"WriteActionV2":                  433,
		"MobileApplicationV2":            389,
		"DeprecatedTourObject":           253,
		"GatedResidenceCommunity":        211,
		"ComputerStore":                  180,
		"ProductReview":                  251,
		"Product":                        7,
		"GeneralContractor":              127,
		"ProfilePage":                    43,
		"PlusPhotoV2":                    344,
		"WpSidebar":                      51,
		"StoryV2":                        380,
		"TrainStation":                   307,
		"SaleEvent":                      61,
		"Corporation":                    66,
		"PlusSoftwareApplicationV2":      414,
		"Park":                           290,
		"ProductReviewV2":                392,
		"VisualArtsEvent":                65,
		"PlusPhotoCollectionV2":          407,
		"MusicPlaylist":                  24,
		"ImageObjectV2":                  339,
		"BasicInteractionV2":             365,
		"HighSchool":                     70,
		"AudioObject":                    19,
		"PublicSwimmingPool":             170,
		"VeterinaryCare":                 148,
		"TvEpisodeV2":                    400,
		"PerformingArtsTheater":          292,
		"RadioStation":                   160,
		"SpreadsheetObject":              218,
		"MotorcycleRepair":               86,
		"LodgingBusiness":                136,
		"ReactActionV2":                  422,
		"CafeOrCoffeeShop":               111,
		"HairSalon":                      121,
		"AddActionV2":                    426,
		"WantActionV2":                   424,
		"Notary":                         157,
		"DanceEvent":                     55,
		"Language":                       227,
		"EntertainmentBusiness":          94,
		"Organization":                   4,
		"EmotishareV2":                   382,
		"Map":                            17,
		"TaxiStand":                      306,
		"EventTimeV2":                    406,
		"CollegeOrUniversity":            68,
		"PollOptionV2":                   409,
		"PollV2":                         408,
		"GoogleChart":                    258,
		"GasStation":                     84,
		"WpHeader":                       50,
		"SoftwareApplicationV2":          444,
		"MedicalClinic":                  144,
		"GoogleUserPhotoAlbum":           449,
		"TattooParlor":                   124,
		"MovingCompany":                  131,
		"BookV2":                         377,
		"MusicAlbum":                     25,
		"HealthAndBeautyBusiness":        118,
		"AutoBodyShop":                   78,
		"WebPageElement":                 45,
		"OfferV2":                        367,
		"MediaObjectV2":                  338,
		"GEvent":                         2,
		"ReservationV2":                  398,
		"RiverBodyOfWater":               316,
		"Casino":                         98,
		"ArticleV2":                      391,
		"MusicGroupV2":                   373,
		"OfferItemCondition":             225,
		"NailSalon":                      123,
		"MedicalOrganization":            141,
		"Painting":                       27,
		"ConvenienceStore":               181,
		"SquareInviteV2":                 356,
		"PlayObjectV2":                   387,
		"ChildCare":                      87,
		"MusicVideoObject":               21,
		"MovieV2":                        370,
		"Crematorium":                    280,
		"HangoutConsumer":                256,
		"MusicGroup":                     260,
		"Canal":                          311,
		"FindActionV2":                   427,
		"Duration":                       231,
		"StadiumOrArena":                 173,
		"State":                          271,
		"MotorcycleDealer":               85,
		"LandmarksOrHistoricalBuildings": 322,
		"CommentActionV2":                432,
		"FileObject":                     265,
		"RatingV2":                       371,
		"InsuranceAgency":                106,
		"Distance":                       230,
		"Church":                         296,
		"CollectionPage":                 38,
		"PlusPhotoAlbumV2":               349,
		"ClothingStore":                  179,
		"Landform":                       309,
		"TravelAgency":                   208,
		"ImageGallery":                   39,
		"TvSeries":                       34,
		"SiteNavigationElement":          46,
		"CatholicChurch":                 295,
		"AdultEntertainment":             95,
		"AutoRental":                     81,
		"AggregateRatingV2":              369,
		"UserInteraction":                220,
		"LocalPlusPhotoAlbum":            332,
		"Mosque":                         298,
		"ContactPoint":                   237,
		"ParkingFacility":                291,
		"FileObjectV2":                   360,
		"MusicVenue":                     289,
		"ReviewV2":                       388,
		"OceanBodyOfWater":               313,
		"TheaterEvent":                   64,
		"MusicAlbumV2":                   372,
		"AutomatedTeller":                104,
		"PlusPhotosAddedToCollection":    261,
		"WholesaleStore":                 205,
		"PresentationObjectV2":           362,
		"VideoObjectV2":                  354,
		"Attorney":                       151,
		"SportsClub":                     172,
		"StickerV2":                      441,
		"PlusPhotosAddedToCollectionV2":  405,
		"PerformingGroup":                259,
		"AutoRepair":                     82,
		"NewsArticle":                    13,
		"GeoCoordinatesV2":               343,
		"Hostel":                         138,
		"Rating":                         234,
		"FurnitureStore":                 185,
		"ProfessionalService":            149,
		"RealEstateAgent":                161,
		"ChalkboardV2":                   447,
		"RoofingContractor":              133,
		"ComedyEvent":                    54,
		"LocalPlusPhotoAlbumV2":          397,
		"AggregateRating":                235,
		"PoliceStation":                  92,
		"BeautySalon":                    119,
		"Blog":                           14,
		"Review":                         30,
		"BikeStore":                      177,
		"Intangible":                     3,
		"OutletStore":                    198,
		"TelevisionStation":              206,
		"FoodEvent":                      58,
		"HangoutV2":                      353,
		"PlusPageV2":                     385,
		"ExerciseGym":                    167,
		"Courthouse":                     284,
		"Movie":                          23,
		"PlaceReviewV2":                  401,
		"FireStation":                    90,
		"Energy":                         232,
		"HoaPlusEventV2":                 410,
		"StructuredValue":                236,
		"Airport":                        273,
		"Mountain":                       320,
		"VideoGalleryV2":                 411,
		"BodyOfWater":                    310,
		"MensClothingStore":              193,
		"ShoppingCenter":                 164,
		"MusicPlaylistV2":                374,
		"Square":                         246,
		"MiddleSchool":                   71,
		"ViewActionV2":                   442,
		"Thing":                          0,
		"Residence":                      209,
		"SportingGoodsStore":             202,
		"ApartmentComplex":               210,
		"Magazine":                       328,
		"GovernmentBuilding":             282,
		"SearchResultsPage":              44,
		"HinduTemple":                    297,
		"DrawingObject":                  262,
		"OfficeEquipmentStore":           197,
		"PlusPage":                       327,
		"Library":                        135,
		"BusStation":                     276,
		"Book":                           15,
		"BedAndBreakfast":                137,
		"Date":                           445,
		"SoftwareApplication":            302,
		"SeaBodyOfWater":                 317,
		"Reservation":                    267,
		"City":                           269,
		"ScholarlyArticle":               219,
		"BookStore":                      178,
		"HousePainter":                   129,
		"CheckinV2":                      357,
		"AboutPage":                      36,
		"PlusPhotoAlbum":                 250,
		"TouristAttraction":              213,
		"PlusPost":                       329,
		"MobilePhoneStore":               194,
		"WpFooter":                       49,
		"UserPlusOnes":                   215,
		"GovernmentOrganization":         74,
		"TravelEvent":                    325,
		"DefenceEstablishment":           285,
		"PersonV2":                       350,
		"Volcano":                        321,
		"FinancialService":               102,
		"Table":                          47,
		"Locksmith":                      130,
		"HomeGoodsStore":                 190,
		"HomeAndConstructionBusiness":    125,
		"Offer":                          228,
		"CommunicateActionV2":            429,
		"Dentist":                        142,
		"NutritionInformation":           241,
		"ItemList":                       16,
		"MobileApplication":              303,
		"Comment":                        264,
		"TradeActionV2":                  418,
		"PlayMusicAlbumV2":               393,
		"WebApplication":                 304,
		"School":                         73,
		"BuyActionV2":                    421,
		"MusicRecording":                 26,
		"AutoDealer":                     79,
		"PlusPostV2":                     390,
		"SportsActivityLocation":         165,
		"EventV2":                        352,
		"Zoo":                            308,
		"AutoWash":                       83,
		"Preschool":                      72,
		"OrganizationV2":                 351,
		"BarOrPub":                       109,
		"DryCleaningOrLaundry":           88,
		"GeoCoordinates":                 239,
		"AutoPartsStore":                 80,
		"IceCreamShop":                   113,
		"LocalBusinessV2":                379,
		"Physician":                      147,
		"EventVenue":                     281,
		"DocumentObjectV2":               358,
		"WpAdBlock":                      48,
		"PlusEventV2":                    404,
		"TvSeason":                       33,
		"TennisComplex":                  174,
		"GoogleOfferV2":                  378,
		"CollexionV2":                    413,
		"PawnShop":                       199,
		"RecyclingCenter":                162,
		"Motel":                          140,
		"Museum":                         288,
		"AutomotiveBusiness":             77,
		"Embassy":                        286,
		"Campground":                     278,
		"BusStop":                        277,
		"ComedyClub":                     99,
		"PlaceOfWorship":                 293,
		"Emotishare":                     334,
		"MusicStore":                     196,
		"PlusReshareV2":                  446,
		"InteractActionV2":               428,
		"Photograph":                     28,
		"PetStore":                       200,
		"Place":                          6,
		"InternetCafe":                   134,
		"BlogPosting":                    12,
		"TouristInformationCenter":       207,
		"RVPark":                         301,
		"CheckoutPage":                   37,
		"WebPageV2":                      337,
		"InteractionV2":                  366,
		"HangoutBroadcast":               255,
		"BlogPostingV2":                  403,
		"HardwareStore":                  188,
		"PostOffice":                     117,
		"NightClub":                      101,
		"Pharmacy":                       146,
		"Playground":                     300,
		"ExampleObject":                  245,
		"SpreadsheetObjectV2":            363,
		"DrawingObjectV2":                359,
		"AnimalShelter":                  76,
		"SelfStorage":                    163,
		"PlayMusicAlbum":                 324,
		"CheckInActionV2":                431,
		"HangoutChatMessage":             450,
		"Florist":                        184,
		"SkiResort":                      171,
		"MovieTheater":                   100,
		"BusinessEvent":                  52,
		"EducationEvent":                 56,
		"ReviewActionV2":                 423,
		"GardenStore":                    186,
		"EmergencyService":               89,
		"SocialEvent":                    62,
		"MediaObject":                    18,
		"ChildrensEvent":                 53,
		"PlaceReview":                    263,
		"LakeBodyOfWater":                312,
		"Synagogue":                      299,
		"EmploymentAgengy":               93,
		"ImageObject":                    20,
		"PlusPhoto":                      249,
		"JobPosting":                     226,
		"ReserveActionV2":                436,
		"Mass":                           233,
		"LiteraryEvent":                  59,
		"DocumentObject":                 217,
		"AppInvite":                      330,
		"GolfCourse":                     168,
		"Pond":                           314,
		"CreativeWorkV2":                 336,
		"LegislativeBuilding":            287,
		"AmusementPark":                  96,
		"SubwayStation":                  305,
		"CivicStructure":                 272,
		"OrganizeActionV2":               434,
		"Winery":                         115,
		"FinancialQuote":                 252,
		"PlayMusicTrackV2":               399,
		"Brewery":                        110,
		"Sculpture":                      31,
		"FinancialQuoteV2":               384,
		"Store":                          175,
		"UserCountry":                    270,
		"HvacBusiness":                   128,
		"SingleFamilyResidence":          212,
		"VideoGallery":                   40,
		"AssessActionV2":                 420,
		"CityHall":                       283,
		"GeoShape":                       240,
		"LiquorStore":                    192,
		"HealthClub":                     122,
		"Waterfall":                      318,
		"MusicEvent":                     60,
		"TireShop":                       203,
		"CreativeWork":                   1,
		"NewsArticleV2":                  439,
		"LocalBusiness":                  75,
		"Hotel":                          139,
		"Reservoir":                      315,
		"DeprecatedTourObjectV2":         395,
		"FastFoodRestaurant":             112,
		"Electrician":                    126,
		"GroceryStore":                   187,
		"PlusEvent":                      244,
	}
)

func (x EMItemType) Enum() *EMItemType {
	p := new(EMItemType)
	*p = x
	return p
}

func (x EMItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_embeds_proto_enumTypes[0].Descriptor()
}

func (EMItemType) Type() protoreflect.EnumType {
	return &file_embeds_proto_enumTypes[0]
}

func (x EMItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMItemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMItemType(num)
	return nil
}

// Deprecated: Use EMItemType.Descriptor instead.
func (EMItemType) EnumDescriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{0}
}

type EMPlusPhoto_PhotoMediaType int32

const (
	EMPlusPhoto_PhotoMediaType_Photosphere   EMPlusPhoto_PhotoMediaType = 3
	EMPlusPhoto_PhotoMediaType_Video         EMPlusPhoto_PhotoMediaType = 2
	EMPlusPhoto_PhotoMediaType_AnimatedPhoto EMPlusPhoto_PhotoMediaType = 4
	EMPlusPhoto_PhotoMediaType_Picture       EMPlusPhoto_PhotoMediaType = 1
	EMPlusPhoto_PhotoMediaType_UnknownMedia  EMPlusPhoto_PhotoMediaType = 0
)

// Enum value maps for EMPlusPhoto_PhotoMediaType.
var (
	EMPlusPhoto_PhotoMediaType_name = map[int32]string{
		3: "Photosphere",
		2: "Video",
		4: "AnimatedPhoto",
		1: "Picture",
		0: "UnknownMedia",
	}
	EMPlusPhoto_PhotoMediaType_value = map[string]int32{
		"Photosphere":   3,
		"Video":         2,
		"AnimatedPhoto": 4,
		"Picture":       1,
		"UnknownMedia":  0,
	}
)

func (x EMPlusPhoto_PhotoMediaType) Enum() *EMPlusPhoto_PhotoMediaType {
	p := new(EMPlusPhoto_PhotoMediaType)
	*p = x
	return p
}

func (x EMPlusPhoto_PhotoMediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMPlusPhoto_PhotoMediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_embeds_proto_enumTypes[1].Descriptor()
}

func (EMPlusPhoto_PhotoMediaType) Type() protoreflect.EnumType {
	return &file_embeds_proto_enumTypes[1]
}

func (x EMPlusPhoto_PhotoMediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMPlusPhoto_PhotoMediaType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMPlusPhoto_PhotoMediaType(num)
	return nil
}

// Deprecated: Use EMPlusPhoto_PhotoMediaType.Descriptor instead.
func (EMPlusPhoto_PhotoMediaType) EnumDescriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{1}
}

type EMPlace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                *string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DescriptionP        *string            `protobuf:"bytes,2,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	URL                 *string            `protobuf:"bytes,3,opt,name=URL" json:"URL,omitempty"`
	Address             *EMPostalAddress   `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	Geo                 *EMGeoCoordinates  `protobuf:"bytes,5,opt,name=geo" json:"geo,omitempty"`
	ClusterId           *string            `protobuf:"bytes,6,opt,name=clusterId" json:"clusterId,omitempty"`
	OwnerObfuscatedId   *string            `protobuf:"bytes,7,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	MapURL              *string            `protobuf:"bytes,8,opt,name=mapURL" json:"mapURL,omitempty"`
	ImageURL            *string            `protobuf:"bytes,9,opt,name=imageURL" json:"imageURL,omitempty"`
	ReferenceId         *string            `protobuf:"bytes,10,opt,name=referenceId" json:"referenceId,omitempty"`
	RepresentativeImage *EMEmbedClientItem `protobuf:"bytes,11,opt,name=representativeImage" json:"representativeImage,omitempty"`
	AggregateRating     *EMEmbedClientItem `protobuf:"bytes,12,opt,name=aggregateRating" json:"aggregateRating,omitempty"`
	Telephone           *string            `protobuf:"bytes,13,opt,name=telephone" json:"telephone,omitempty"`
	FaxNumber           *string            `protobuf:"bytes,14,opt,name=faxNumber" json:"faxNumber,omitempty"`
	IsClaimedByOwner    *bool              `protobuf:"varint,15,opt,name=isClaimedByOwner" json:"isClaimedByOwner,omitempty"`
	PlaceId             *string            `protobuf:"bytes,16,opt,name=placeId" json:"placeId,omitempty"`
}

func (x *EMPlace) Reset() {
	*x = EMPlace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMPlace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMPlace) ProtoMessage() {}

func (x *EMPlace) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMPlace.ProtoReflect.Descriptor instead.
func (*EMPlace) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{0}
}

func (x *EMPlace) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMPlace) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMPlace) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMPlace) GetAddress() *EMPostalAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *EMPlace) GetGeo() *EMGeoCoordinates {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *EMPlace) GetClusterId() string {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return ""
}

func (x *EMPlace) GetOwnerObfuscatedId() string {
	if x != nil && x.OwnerObfuscatedId != nil {
		return *x.OwnerObfuscatedId
	}
	return ""
}

func (x *EMPlace) GetMapURL() string {
	if x != nil && x.MapURL != nil {
		return *x.MapURL
	}
	return ""
}

func (x *EMPlace) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMPlace) GetReferenceId() string {
	if x != nil && x.ReferenceId != nil {
		return *x.ReferenceId
	}
	return ""
}

func (x *EMPlace) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

func (x *EMPlace) GetAggregateRating() *EMEmbedClientItem {
	if x != nil {
		return x.AggregateRating
	}
	return nil
}

func (x *EMPlace) GetTelephone() string {
	if x != nil && x.Telephone != nil {
		return *x.Telephone
	}
	return ""
}

func (x *EMPlace) GetFaxNumber() string {
	if x != nil && x.FaxNumber != nil {
		return *x.FaxNumber
	}
	return ""
}

func (x *EMPlace) GetIsClaimedByOwner() bool {
	if x != nil && x.IsClaimedByOwner != nil {
		return *x.IsClaimedByOwner
	}
	return false
}

func (x *EMPlace) GetPlaceId() string {
	if x != nil && x.PlaceId != nil {
		return *x.PlaceId
	}
	return ""
}

type EMThing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL                  *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL             *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	ProxiedImage         *EMThumbnail         `protobuf:"bytes,5,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL    *string              `protobuf:"bytes,6,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray          []*EMEmbedClientItem `protobuf:"bytes,7,rep,name=authorArray" json:"authorArray,omitempty"`
	DescriptionTruncated *string              `protobuf:"bytes,8,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	RepresentativeImage  *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=representativeImage" json:"representativeImage,omitempty"`
	RelatedImageArray    []*EMImageObject     `protobuf:"bytes,10,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
}

func (x *EMThing) Reset() {
	*x = EMThing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMThing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMThing) ProtoMessage() {}

func (x *EMThing) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMThing.ProtoReflect.Descriptor instead.
func (*EMThing) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{1}
}

func (x *EMThing) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMThing) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMThing) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMThing) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMThing) GetProxiedImage() *EMThumbnail {
	if x != nil {
		return x.ProxiedImage
	}
	return nil
}

func (x *EMThing) GetProxiedFaviconURL() string {
	if x != nil && x.ProxiedFaviconURL != nil {
		return *x.ProxiedFaviconURL
	}
	return ""
}

func (x *EMThing) GetAuthorArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AuthorArray
	}
	return nil
}

func (x *EMThing) GetDescriptionTruncated() string {
	if x != nil && x.DescriptionTruncated != nil {
		return *x.DescriptionTruncated
	}
	return ""
}

func (x *EMThing) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

func (x *EMThing) GetRelatedImageArray() []*EMImageObject {
	if x != nil {
		return x.RelatedImageArray
	}
	return nil
}

type EMGeoCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude            *float64           `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude           *float64           `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	ImageURL            *string            `protobuf:"bytes,3,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                *string            `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	URL                 *string            `protobuf:"bytes,5,opt,name=URL" json:"URL,omitempty"`
	RepresentativeImage *EMEmbedClientItem `protobuf:"bytes,6,opt,name=representativeImage" json:"representativeImage,omitempty"`
}

func (x *EMGeoCoordinates) Reset() {
	*x = EMGeoCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMGeoCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMGeoCoordinates) ProtoMessage() {}

func (x *EMGeoCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMGeoCoordinates.ProtoReflect.Descriptor instead.
func (*EMGeoCoordinates) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{2}
}

func (x *EMGeoCoordinates) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *EMGeoCoordinates) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *EMGeoCoordinates) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMGeoCoordinates) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMGeoCoordinates) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMGeoCoordinates) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

type EMPostalAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                *string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	AddressCountry      *string            `protobuf:"bytes,2,opt,name=addressCountry" json:"addressCountry,omitempty"`
	AddressLocality     *string            `protobuf:"bytes,3,opt,name=addressLocality" json:"addressLocality,omitempty"`
	AddressRegion       *string            `protobuf:"bytes,4,opt,name=addressRegion" json:"addressRegion,omitempty"`
	PostOfficeBoxNumber *string            `protobuf:"bytes,5,opt,name=postOfficeBoxNumber" json:"postOfficeBoxNumber,omitempty"`
	PostalCode          *string            `protobuf:"bytes,6,opt,name=postalCode" json:"postalCode,omitempty"`
	StreetAddress       *string            `protobuf:"bytes,7,opt,name=streetAddress" json:"streetAddress,omitempty"`
	URL                 *string            `protobuf:"bytes,8,opt,name=URL" json:"URL,omitempty"`
	RepresentativeImage *EMEmbedClientItem `protobuf:"bytes,9,opt,name=representativeImage" json:"representativeImage,omitempty"`
}

func (x *EMPostalAddress) Reset() {
	*x = EMPostalAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMPostalAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMPostalAddress) ProtoMessage() {}

func (x *EMPostalAddress) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMPostalAddress.ProtoReflect.Descriptor instead.
func (*EMPostalAddress) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{3}
}

func (x *EMPostalAddress) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMPostalAddress) GetAddressCountry() string {
	if x != nil && x.AddressCountry != nil {
		return *x.AddressCountry
	}
	return ""
}

func (x *EMPostalAddress) GetAddressLocality() string {
	if x != nil && x.AddressLocality != nil {
		return *x.AddressLocality
	}
	return ""
}

func (x *EMPostalAddress) GetAddressRegion() string {
	if x != nil && x.AddressRegion != nil {
		return *x.AddressRegion
	}
	return ""
}

func (x *EMPostalAddress) GetPostOfficeBoxNumber() string {
	if x != nil && x.PostOfficeBoxNumber != nil {
		return *x.PostOfficeBoxNumber
	}
	return ""
}

func (x *EMPostalAddress) GetPostalCode() string {
	if x != nil && x.PostalCode != nil {
		return *x.PostalCode
	}
	return ""
}

func (x *EMPostalAddress) GetStreetAddress() string {
	if x != nil && x.StreetAddress != nil {
		return *x.StreetAddress
	}
	return ""
}

func (x *EMPostalAddress) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMPostalAddress) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

type EMWebPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL                           *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL                      *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                          *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP                  *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	About                         *EMEmbedClientItem   `protobuf:"bytes,5,opt,name=about" json:"about,omitempty"`
	ProxiedImage                  *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL             *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray                   []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	DescriptionTruncated          *string              `protobuf:"bytes,9,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	RelatedImageArray             []*EMImageObject     `protobuf:"bytes,10,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName                    *string              `protobuf:"bytes,11,opt,name=sourceName" json:"sourceName,omitempty"`
	CanonicalFountainStream       *string              `protobuf:"bytes,12,opt,name=canonicalFountainStream" json:"canonicalFountainStream,omitempty"`
	UnfilteredFountainStreamArray []string             `protobuf:"bytes,13,rep,name=unfilteredFountainStreamArray" json:"unfilteredFountainStreamArray,omitempty"`
	PremodFountainStreamArray     []string             `protobuf:"bytes,14,rep,name=premodFountainStreamArray" json:"premodFountainStreamArray,omitempty"`
	PostmodFountainStreamArray    []string             `protobuf:"bytes,15,rep,name=postmodFountainStreamArray" json:"postmodFountainStreamArray,omitempty"`
	InboxFountainStreamArray      []string             `protobuf:"bytes,16,rep,name=inboxFountainStreamArray" json:"inboxFountainStreamArray,omitempty"`
	RepresentativeImage           *EMEmbedClientItem   `protobuf:"bytes,17,opt,name=representativeImage" json:"representativeImage,omitempty"`
}

func (x *EMWebPage) Reset() {
	*x = EMWebPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMWebPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMWebPage) ProtoMessage() {}

func (x *EMWebPage) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMWebPage.ProtoReflect.Descriptor instead.
func (*EMWebPage) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{4}
}

func (x *EMWebPage) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMWebPage) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMWebPage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMWebPage) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMWebPage) GetAbout() *EMEmbedClientItem {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *EMWebPage) GetProxiedImage() *EMThumbnail {
	if x != nil {
		return x.ProxiedImage
	}
	return nil
}

func (x *EMWebPage) GetProxiedFaviconURL() string {
	if x != nil && x.ProxiedFaviconURL != nil {
		return *x.ProxiedFaviconURL
	}
	return ""
}

func (x *EMWebPage) GetAuthorArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AuthorArray
	}
	return nil
}

func (x *EMWebPage) GetDescriptionTruncated() string {
	if x != nil && x.DescriptionTruncated != nil {
		return *x.DescriptionTruncated
	}
	return ""
}

func (x *EMWebPage) GetRelatedImageArray() []*EMImageObject {
	if x != nil {
		return x.RelatedImageArray
	}
	return nil
}

func (x *EMWebPage) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *EMWebPage) GetCanonicalFountainStream() string {
	if x != nil && x.CanonicalFountainStream != nil {
		return *x.CanonicalFountainStream
	}
	return ""
}

func (x *EMWebPage) GetUnfilteredFountainStreamArray() []string {
	if x != nil {
		return x.UnfilteredFountainStreamArray
	}
	return nil
}

func (x *EMWebPage) GetPremodFountainStreamArray() []string {
	if x != nil {
		return x.PremodFountainStreamArray
	}
	return nil
}

func (x *EMWebPage) GetPostmodFountainStreamArray() []string {
	if x != nil {
		return x.PostmodFountainStreamArray
	}
	return nil
}

func (x *EMWebPage) GetInboxFountainStreamArray() []string {
	if x != nil {
		return x.InboxFountainStreamArray
	}
	return nil
}

func (x *EMWebPage) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

type EMPlusPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thumbnail                 *EMImageObject              `protobuf:"bytes,1,opt,name=thumbnail" json:"thumbnail,omitempty"`
	OwnerObfuscatedId         *string                     `protobuf:"bytes,2,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	AlbumId                   *string                     `protobuf:"bytes,3,opt,name=albumId" json:"albumId,omitempty"`
	PhotoId                   *string                     `protobuf:"bytes,4,opt,name=photoId" json:"photoId,omitempty"`
	IsVideo                   *bool                       `protobuf:"varint,5,opt,name=isVideo" json:"isVideo,omitempty"`
	URL                       *string                     `protobuf:"bytes,6,opt,name=URL" json:"URL,omitempty"`
	OriginalMediaPlayerURL    *string                     `protobuf:"bytes,7,opt,name=originalMediaPlayerURL" json:"originalMediaPlayerURL,omitempty"`
	OriginalMediaContainerURL *string                     `protobuf:"bytes,8,opt,name=originalMediaContainerURL" json:"originalMediaContainerURL,omitempty"`
	OriginalLightboxPhotoId   *string                     `protobuf:"bytes,9,opt,name=originalLightboxPhotoId" json:"originalLightboxPhotoId,omitempty"`
	OriginalContentURL        *string                     `protobuf:"bytes,10,opt,name=originalContentURL" json:"originalContentURL,omitempty"`
	Name                      *string                     `protobuf:"bytes,11,opt,name=name" json:"name,omitempty"`
	OnepickMediaId            *string                     `protobuf:"bytes,12,opt,name=onepickMediaId" json:"onepickMediaId,omitempty"`
	MediaType                 *EMPlusPhoto_PhotoMediaType `protobuf:"varint,13,opt,name=mediaType,enum=hangouts.EMPlusPhoto_PhotoMediaType" json:"mediaType,omitempty"`
	StreamIdArray             []string                    `protobuf:"bytes,14,rep,name=streamIdArray" json:"streamIdArray,omitempty"`
	RepresentativeImage       *EMEmbedClientItem          `protobuf:"bytes,15,opt,name=representativeImage" json:"representativeImage,omitempty"`
	ImageQuality              *string                     `protobuf:"bytes,16,opt,name=imageQuality" json:"imageQuality,omitempty"`
	MaxHeight                 *string                     `protobuf:"bytes,17,opt,name=maxHeight" json:"maxHeight,omitempty"`
	MaxWidth                  *string                     `protobuf:"bytes,18,opt,name=maxWidth" json:"maxWidth,omitempty"`
	RelativeURL               *string                     `protobuf:"bytes,19,opt,name=relativeURL" json:"relativeURL,omitempty"`
	DownloadURL               *string                     `protobuf:"bytes,20,opt,name=downloadURL" json:"downloadURL,omitempty"`
}

func (x *EMPlusPhoto) Reset() {
	*x = EMPlusPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMPlusPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMPlusPhoto) ProtoMessage() {}

func (x *EMPlusPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMPlusPhoto.ProtoReflect.Descriptor instead.
func (*EMPlusPhoto) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{5}
}

func (x *EMPlusPhoto) GetThumbnail() *EMImageObject {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *EMPlusPhoto) GetOwnerObfuscatedId() string {
	if x != nil && x.OwnerObfuscatedId != nil {
		return *x.OwnerObfuscatedId
	}
	return ""
}

func (x *EMPlusPhoto) GetAlbumId() string {
	if x != nil && x.AlbumId != nil {
		return *x.AlbumId
	}
	return ""
}

func (x *EMPlusPhoto) GetPhotoId() string {
	if x != nil && x.PhotoId != nil {
		return *x.PhotoId
	}
	return ""
}

func (x *EMPlusPhoto) GetIsVideo() bool {
	if x != nil && x.IsVideo != nil {
		return *x.IsVideo
	}
	return false
}

func (x *EMPlusPhoto) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMPlusPhoto) GetOriginalMediaPlayerURL() string {
	if x != nil && x.OriginalMediaPlayerURL != nil {
		return *x.OriginalMediaPlayerURL
	}
	return ""
}

func (x *EMPlusPhoto) GetOriginalMediaContainerURL() string {
	if x != nil && x.OriginalMediaContainerURL != nil {
		return *x.OriginalMediaContainerURL
	}
	return ""
}

func (x *EMPlusPhoto) GetOriginalLightboxPhotoId() string {
	if x != nil && x.OriginalLightboxPhotoId != nil {
		return *x.OriginalLightboxPhotoId
	}
	return ""
}

func (x *EMPlusPhoto) GetOriginalContentURL() string {
	if x != nil && x.OriginalContentURL != nil {
		return *x.OriginalContentURL
	}
	return ""
}

func (x *EMPlusPhoto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMPlusPhoto) GetOnepickMediaId() string {
	if x != nil && x.OnepickMediaId != nil {
		return *x.OnepickMediaId
	}
	return ""
}

func (x *EMPlusPhoto) GetMediaType() EMPlusPhoto_PhotoMediaType {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return EMPlusPhoto_PhotoMediaType_Photosphere
}

func (x *EMPlusPhoto) GetStreamIdArray() []string {
	if x != nil {
		return x.StreamIdArray
	}
	return nil
}

func (x *EMPlusPhoto) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

func (x *EMPlusPhoto) GetImageQuality() string {
	if x != nil && x.ImageQuality != nil {
		return *x.ImageQuality
	}
	return ""
}

func (x *EMPlusPhoto) GetMaxHeight() string {
	if x != nil && x.MaxHeight != nil {
		return *x.MaxHeight
	}
	return ""
}

func (x *EMPlusPhoto) GetMaxWidth() string {
	if x != nil && x.MaxWidth != nil {
		return *x.MaxWidth
	}
	return ""
}

func (x *EMPlusPhoto) GetRelativeURL() string {
	if x != nil && x.RelativeURL != nil {
		return *x.RelativeURL
	}
	return ""
}

func (x *EMPlusPhoto) GetDownloadURL() string {
	if x != nil && x.DownloadURL != nil {
		return *x.DownloadURL
	}
	return ""
}

type EMPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                *string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OwnerObfuscatedId   *string            `protobuf:"bytes,2,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	ImageURL            *string            `protobuf:"bytes,3,opt,name=imageURL" json:"imageURL,omitempty"`
	URL                 *string            `protobuf:"bytes,4,opt,name=URL" json:"URL,omitempty"`
	Gender              *string            `protobuf:"bytes,5,opt,name=gender" json:"gender,omitempty"`
	Email               *string            `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	RepresentativeImage *EMEmbedClientItem `protobuf:"bytes,7,opt,name=representativeImage" json:"representativeImage,omitempty"`
}

func (x *EMPerson) Reset() {
	*x = EMPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMPerson) ProtoMessage() {}

func (x *EMPerson) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMPerson.ProtoReflect.Descriptor instead.
func (*EMPerson) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{6}
}

func (x *EMPerson) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMPerson) GetOwnerObfuscatedId() string {
	if x != nil && x.OwnerObfuscatedId != nil {
		return *x.OwnerObfuscatedId
	}
	return ""
}

func (x *EMPerson) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMPerson) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMPerson) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *EMPerson) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *EMPerson) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

type EMImageObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL                 *string            `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	Name                *string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DescriptionP        *string            `protobuf:"bytes,3,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	ImageURL            *string            `protobuf:"bytes,4,opt,name=imageURL" json:"imageURL,omitempty"`
	ThumbnailURL        *string            `protobuf:"bytes,5,opt,name=thumbnailURL" json:"thumbnailURL,omitempty"`
	ProxiedImage        *EMThumbnail       `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ContentLocation     *EMPlace           `protobuf:"bytes,7,opt,name=contentLocation" json:"contentLocation,omitempty"`
	Width               *string            `protobuf:"bytes,8,opt,name=width" json:"width,omitempty"`
	Height              *string            `protobuf:"bytes,9,opt,name=height" json:"height,omitempty"`
	WidthPx             *int32             `protobuf:"varint,10,opt,name=widthPx" json:"widthPx,omitempty"`
	HeightPx            *int32             `protobuf:"varint,11,opt,name=heightPx" json:"heightPx,omitempty"`
	ContentURL          *string            `protobuf:"bytes,12,opt,name=contentURL" json:"contentURL,omitempty"`
	SourceDomain        *string            `protobuf:"bytes,13,opt,name=sourceDomain" json:"sourceDomain,omitempty"`
	About               *EMEmbedClientItem `protobuf:"bytes,14,opt,name=about" json:"about,omitempty"`
	RepresentativeImage *EMEmbedClientItem `protobuf:"bytes,15,opt,name=representativeImage" json:"representativeImage,omitempty"`
}

func (x *EMImageObject) Reset() {
	*x = EMImageObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMImageObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMImageObject) ProtoMessage() {}

func (x *EMImageObject) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMImageObject.ProtoReflect.Descriptor instead.
func (*EMImageObject) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{7}
}

func (x *EMImageObject) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMImageObject) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMImageObject) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMImageObject) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMImageObject) GetThumbnailURL() string {
	if x != nil && x.ThumbnailURL != nil {
		return *x.ThumbnailURL
	}
	return ""
}

func (x *EMImageObject) GetProxiedImage() *EMThumbnail {
	if x != nil {
		return x.ProxiedImage
	}
	return nil
}

func (x *EMImageObject) GetContentLocation() *EMPlace {
	if x != nil {
		return x.ContentLocation
	}
	return nil
}

func (x *EMImageObject) GetWidth() string {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return ""
}

func (x *EMImageObject) GetHeight() string {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return ""
}

func (x *EMImageObject) GetWidthPx() int32 {
	if x != nil && x.WidthPx != nil {
		return *x.WidthPx
	}
	return 0
}

func (x *EMImageObject) GetHeightPx() int32 {
	if x != nil && x.HeightPx != nil {
		return *x.HeightPx
	}
	return 0
}

func (x *EMImageObject) GetContentURL() string {
	if x != nil && x.ContentURL != nil {
		return *x.ContentURL
	}
	return ""
}

func (x *EMImageObject) GetSourceDomain() string {
	if x != nil && x.SourceDomain != nil {
		return *x.SourceDomain
	}
	return ""
}

func (x *EMImageObject) GetAbout() *EMEmbedClientItem {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *EMImageObject) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

type EMPlaceV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL                  *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL             *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage         *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL    *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray          []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	RelatedImageArray    []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName           *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	Address              *EMEmbedClientItem   `protobuf:"bytes,24,opt,name=address" json:"address,omitempty"`
	Geo                  *EMEmbedClientItem   `protobuf:"bytes,25,opt,name=geo" json:"geo,omitempty"`
	ClusterId            *string              `protobuf:"bytes,26,opt,name=clusterId" json:"clusterId,omitempty"`
	OwnerObfuscatedId    *string              `protobuf:"bytes,27,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	MapURL               *string              `protobuf:"bytes,28,opt,name=mapURL" json:"mapURL,omitempty"`
	ReferenceId          *string              `protobuf:"bytes,29,opt,name=referenceId" json:"referenceId,omitempty"`
	FaviconURL           *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	AggregateRating      *EMEmbedClientItem   `protobuf:"bytes,82,opt,name=aggregateRating" json:"aggregateRating,omitempty"`
	IdP                  *string              `protobuf:"bytes,106,opt,name=id_p,json=idP" json:"id_p,omitempty"`
	RepresentativeImage  *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	Telephone            *string              `protobuf:"bytes,227,opt,name=telephone" json:"telephone,omitempty"`
	FaxNumber            *string              `protobuf:"bytes,228,opt,name=faxNumber" json:"faxNumber,omitempty"`
	ExternalId           *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	IsClaimedByOwner     *bool                `protobuf:"varint,267,opt,name=isClaimedByOwner" json:"isClaimedByOwner,omitempty"`
	PlaceId              *string              `protobuf:"bytes,280,opt,name=placeId" json:"placeId,omitempty"`
	AmpURL               *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL       *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
}

func (x *EMPlaceV2) Reset() {
	*x = EMPlaceV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMPlaceV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMPlaceV2) ProtoMessage() {}

func (x *EMPlaceV2) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMPlaceV2.ProtoReflect.Descriptor instead.
func (*EMPlaceV2) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{8}
}

func (x *EMPlaceV2) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMPlaceV2) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMPlaceV2) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMPlaceV2) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMPlaceV2) GetDescriptionTruncated() string {
	if x != nil && x.DescriptionTruncated != nil {
		return *x.DescriptionTruncated
	}
	return ""
}

func (x *EMPlaceV2) GetProxiedImage() *EMThumbnail {
	if x != nil {
		return x.ProxiedImage
	}
	return nil
}

func (x *EMPlaceV2) GetProxiedFaviconURL() string {
	if x != nil && x.ProxiedFaviconURL != nil {
		return *x.ProxiedFaviconURL
	}
	return ""
}

func (x *EMPlaceV2) GetAuthorArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AuthorArray
	}
	return nil
}

func (x *EMPlaceV2) GetAbout() *EMEmbedClientItem {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *EMPlaceV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if x != nil {
		return x.RelatedImageArray
	}
	return nil
}

func (x *EMPlaceV2) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *EMPlaceV2) GetAddress() *EMEmbedClientItem {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *EMPlaceV2) GetGeo() *EMEmbedClientItem {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *EMPlaceV2) GetClusterId() string {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return ""
}

func (x *EMPlaceV2) GetOwnerObfuscatedId() string {
	if x != nil && x.OwnerObfuscatedId != nil {
		return *x.OwnerObfuscatedId
	}
	return ""
}

func (x *EMPlaceV2) GetMapURL() string {
	if x != nil && x.MapURL != nil {
		return *x.MapURL
	}
	return ""
}

func (x *EMPlaceV2) GetReferenceId() string {
	if x != nil && x.ReferenceId != nil {
		return *x.ReferenceId
	}
	return ""
}

func (x *EMPlaceV2) GetFaviconURL() string {
	if x != nil && x.FaviconURL != nil {
		return *x.FaviconURL
	}
	return ""
}

func (x *EMPlaceV2) GetAggregateRating() *EMEmbedClientItem {
	if x != nil {
		return x.AggregateRating
	}
	return nil
}

func (x *EMPlaceV2) GetIdP() string {
	if x != nil && x.IdP != nil {
		return *x.IdP
	}
	return ""
}

func (x *EMPlaceV2) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

func (x *EMPlaceV2) GetTelephone() string {
	if x != nil && x.Telephone != nil {
		return *x.Telephone
	}
	return ""
}

func (x *EMPlaceV2) GetFaxNumber() string {
	if x != nil && x.FaxNumber != nil {
		return *x.FaxNumber
	}
	return ""
}

func (x *EMPlaceV2) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *EMPlaceV2) GetIsClaimedByOwner() bool {
	if x != nil && x.IsClaimedByOwner != nil {
		return *x.IsClaimedByOwner
	}
	return false
}

func (x *EMPlaceV2) GetPlaceId() string {
	if x != nil && x.PlaceId != nil {
		return *x.PlaceId
	}
	return ""
}

func (x *EMPlaceV2) GetAmpURL() string {
	if x != nil && x.AmpURL != nil {
		return *x.AmpURL
	}
	return ""
}

func (x *EMPlaceV2) GetDestinationURL() string {
	if x != nil && x.DestinationURL != nil {
		return *x.DestinationURL
	}
	return ""
}

type EMThumbnail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageURL           *string `protobuf:"bytes,1,opt,name=imageURL" json:"imageURL,omitempty"`
	BoxWidthPx         *int32  `protobuf:"varint,2,opt,name=boxWidthPx" json:"boxWidthPx,omitempty"`
	BoxHeightPx        *int32  `protobuf:"varint,3,opt,name=boxHeightPx" json:"boxHeightPx,omitempty"`
	ExactWidth         *bool   `protobuf:"varint,4,opt,name=exactWidth" json:"exactWidth,omitempty"`
	ExactHeight        *bool   `protobuf:"varint,5,opt,name=exactHeight" json:"exactHeight,omitempty"`
	RecenterVertically *bool   `protobuf:"varint,6,opt,name=recenterVertically" json:"recenterVertically,omitempty"`
	UncroppedImageURL  *string `protobuf:"bytes,7,opt,name=uncroppedImageURL" json:"uncroppedImageURL,omitempty"`
	ImageHeightPx      *int32  `protobuf:"varint,8,opt,name=imageHeightPx" json:"imageHeightPx,omitempty"`
}

func (x *EMThumbnail) Reset() {
	*x = EMThumbnail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMThumbnail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMThumbnail) ProtoMessage() {}

func (x *EMThumbnail) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMThumbnail.ProtoReflect.Descriptor instead.
func (*EMThumbnail) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{9}
}

func (x *EMThumbnail) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMThumbnail) GetBoxWidthPx() int32 {
	if x != nil && x.BoxWidthPx != nil {
		return *x.BoxWidthPx
	}
	return 0
}

func (x *EMThumbnail) GetBoxHeightPx() int32 {
	if x != nil && x.BoxHeightPx != nil {
		return *x.BoxHeightPx
	}
	return 0
}

func (x *EMThumbnail) GetExactWidth() bool {
	if x != nil && x.ExactWidth != nil {
		return *x.ExactWidth
	}
	return false
}

func (x *EMThumbnail) GetExactHeight() bool {
	if x != nil && x.ExactHeight != nil {
		return *x.ExactHeight
	}
	return false
}

func (x *EMThumbnail) GetRecenterVertically() bool {
	if x != nil && x.RecenterVertically != nil {
		return *x.RecenterVertically
	}
	return false
}

func (x *EMThumbnail) GetUncroppedImageURL() string {
	if x != nil && x.UncroppedImageURL != nil {
		return *x.UncroppedImageURL
	}
	return ""
}

func (x *EMThumbnail) GetImageHeightPx() int32 {
	if x != nil && x.ImageHeightPx != nil {
		return *x.ImageHeightPx
	}
	return 0
}

type EMPostalAddressV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL                  *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL             *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage         *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL    *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray          []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	RelatedImageArray    []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName           *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	AddressCountry       *string              `protobuf:"bytes,30,opt,name=addressCountry" json:"addressCountry,omitempty"`
	AddressLocality      *string              `protobuf:"bytes,31,opt,name=addressLocality" json:"addressLocality,omitempty"`
	AddressRegion        *string              `protobuf:"bytes,32,opt,name=addressRegion" json:"addressRegion,omitempty"`
	PostOfficeBoxNumber  *string              `protobuf:"bytes,33,opt,name=postOfficeBoxNumber" json:"postOfficeBoxNumber,omitempty"`
	PostalCode           *string              `protobuf:"bytes,34,opt,name=postalCode" json:"postalCode,omitempty"`
	StreetAddress        *string              `protobuf:"bytes,35,opt,name=streetAddress" json:"streetAddress,omitempty"`
	FaviconURL           *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	RepresentativeImage  *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	ExternalId           *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	AmpURL               *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL       *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
}

func (x *EMPostalAddressV2) Reset() {
	*x = EMPostalAddressV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMPostalAddressV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMPostalAddressV2) ProtoMessage() {}

func (x *EMPostalAddressV2) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMPostalAddressV2.ProtoReflect.Descriptor instead.
func (*EMPostalAddressV2) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{10}
}

func (x *EMPostalAddressV2) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMPostalAddressV2) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMPostalAddressV2) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMPostalAddressV2) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMPostalAddressV2) GetDescriptionTruncated() string {
	if x != nil && x.DescriptionTruncated != nil {
		return *x.DescriptionTruncated
	}
	return ""
}

func (x *EMPostalAddressV2) GetProxiedImage() *EMThumbnail {
	if x != nil {
		return x.ProxiedImage
	}
	return nil
}

func (x *EMPostalAddressV2) GetProxiedFaviconURL() string {
	if x != nil && x.ProxiedFaviconURL != nil {
		return *x.ProxiedFaviconURL
	}
	return ""
}

func (x *EMPostalAddressV2) GetAuthorArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AuthorArray
	}
	return nil
}

func (x *EMPostalAddressV2) GetAbout() *EMEmbedClientItem {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *EMPostalAddressV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if x != nil {
		return x.RelatedImageArray
	}
	return nil
}

func (x *EMPostalAddressV2) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *EMPostalAddressV2) GetAddressCountry() string {
	if x != nil && x.AddressCountry != nil {
		return *x.AddressCountry
	}
	return ""
}

func (x *EMPostalAddressV2) GetAddressLocality() string {
	if x != nil && x.AddressLocality != nil {
		return *x.AddressLocality
	}
	return ""
}

func (x *EMPostalAddressV2) GetAddressRegion() string {
	if x != nil && x.AddressRegion != nil {
		return *x.AddressRegion
	}
	return ""
}

func (x *EMPostalAddressV2) GetPostOfficeBoxNumber() string {
	if x != nil && x.PostOfficeBoxNumber != nil {
		return *x.PostOfficeBoxNumber
	}
	return ""
}

func (x *EMPostalAddressV2) GetPostalCode() string {
	if x != nil && x.PostalCode != nil {
		return *x.PostalCode
	}
	return ""
}

func (x *EMPostalAddressV2) GetStreetAddress() string {
	if x != nil && x.StreetAddress != nil {
		return *x.StreetAddress
	}
	return ""
}

func (x *EMPostalAddressV2) GetFaviconURL() string {
	if x != nil && x.FaviconURL != nil {
		return *x.FaviconURL
	}
	return ""
}

func (x *EMPostalAddressV2) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

func (x *EMPostalAddressV2) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *EMPostalAddressV2) GetAmpURL() string {
	if x != nil && x.AmpURL != nil {
		return *x.AmpURL
	}
	return ""
}

func (x *EMPostalAddressV2) GetDestinationURL() string {
	if x != nil && x.DestinationURL != nil {
		return *x.DestinationURL
	}
	return ""
}

type EMGeoCoordinatesV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL                  *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL             *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage         *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL    *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray          []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	RelatedImageArray    []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName           *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	Latitude             *float64             `protobuf:"fixed64,36,opt,name=latitude" json:"latitude,omitempty"`
	Longitude            *float64             `protobuf:"fixed64,37,opt,name=longitude" json:"longitude,omitempty"`
	FaviconURL           *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	RepresentativeImage  *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	ExternalId           *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	AmpURL               *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL       *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
}

func (x *EMGeoCoordinatesV2) Reset() {
	*x = EMGeoCoordinatesV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMGeoCoordinatesV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMGeoCoordinatesV2) ProtoMessage() {}

func (x *EMGeoCoordinatesV2) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMGeoCoordinatesV2.ProtoReflect.Descriptor instead.
func (*EMGeoCoordinatesV2) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{11}
}

func (x *EMGeoCoordinatesV2) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMGeoCoordinatesV2) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMGeoCoordinatesV2) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMGeoCoordinatesV2) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMGeoCoordinatesV2) GetDescriptionTruncated() string {
	if x != nil && x.DescriptionTruncated != nil {
		return *x.DescriptionTruncated
	}
	return ""
}

func (x *EMGeoCoordinatesV2) GetProxiedImage() *EMThumbnail {
	if x != nil {
		return x.ProxiedImage
	}
	return nil
}

func (x *EMGeoCoordinatesV2) GetProxiedFaviconURL() string {
	if x != nil && x.ProxiedFaviconURL != nil {
		return *x.ProxiedFaviconURL
	}
	return ""
}

func (x *EMGeoCoordinatesV2) GetAuthorArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AuthorArray
	}
	return nil
}

func (x *EMGeoCoordinatesV2) GetAbout() *EMEmbedClientItem {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *EMGeoCoordinatesV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if x != nil {
		return x.RelatedImageArray
	}
	return nil
}

func (x *EMGeoCoordinatesV2) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *EMGeoCoordinatesV2) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *EMGeoCoordinatesV2) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *EMGeoCoordinatesV2) GetFaviconURL() string {
	if x != nil && x.FaviconURL != nil {
		return *x.FaviconURL
	}
	return ""
}

func (x *EMGeoCoordinatesV2) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

func (x *EMGeoCoordinatesV2) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *EMGeoCoordinatesV2) GetAmpURL() string {
	if x != nil && x.AmpURL != nil {
		return *x.AmpURL
	}
	return ""
}

func (x *EMGeoCoordinatesV2) GetDestinationURL() string {
	if x != nil && x.DestinationURL != nil {
		return *x.DestinationURL
	}
	return ""
}

type EMThingV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL                  *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL             *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage         *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL    *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray          []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	RelatedImageArray    []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName           *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	FaviconURL           *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	RepresentativeImage  *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	ExternalId           *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	AmpURL               *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL       *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
}

func (x *EMThingV2) Reset() {
	*x = EMThingV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMThingV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMThingV2) ProtoMessage() {}

func (x *EMThingV2) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMThingV2.ProtoReflect.Descriptor instead.
func (*EMThingV2) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{12}
}

func (x *EMThingV2) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMThingV2) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMThingV2) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMThingV2) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMThingV2) GetDescriptionTruncated() string {
	if x != nil && x.DescriptionTruncated != nil {
		return *x.DescriptionTruncated
	}
	return ""
}

func (x *EMThingV2) GetProxiedImage() *EMThumbnail {
	if x != nil {
		return x.ProxiedImage
	}
	return nil
}

func (x *EMThingV2) GetProxiedFaviconURL() string {
	if x != nil && x.ProxiedFaviconURL != nil {
		return *x.ProxiedFaviconURL
	}
	return ""
}

func (x *EMThingV2) GetAuthorArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AuthorArray
	}
	return nil
}

func (x *EMThingV2) GetAbout() *EMEmbedClientItem {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *EMThingV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if x != nil {
		return x.RelatedImageArray
	}
	return nil
}

func (x *EMThingV2) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *EMThingV2) GetFaviconURL() string {
	if x != nil && x.FaviconURL != nil {
		return *x.FaviconURL
	}
	return ""
}

func (x *EMThingV2) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

func (x *EMThingV2) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *EMThingV2) GetAmpURL() string {
	if x != nil && x.AmpURL != nil {
		return *x.AmpURL
	}
	return ""
}

func (x *EMThingV2) GetDestinationURL() string {
	if x != nil && x.DestinationURL != nil {
		return *x.DestinationURL
	}
	return ""
}

type EMPlusAudioV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL                           *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL                      *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                          *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP                  *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated          *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage                  *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL             *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray                   []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                         *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	Text                          *string              `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	RelatedImageArray             []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName                    *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	CanonicalFountainStream       *string              `protobuf:"bytes,13,opt,name=canonicalFountainStream" json:"canonicalFountainStream,omitempty"`
	UnfilteredFountainStreamArray []string             `protobuf:"bytes,14,rep,name=unfilteredFountainStreamArray" json:"unfilteredFountainStreamArray,omitempty"`
	PremodFountainStreamArray     []string             `protobuf:"bytes,15,rep,name=premodFountainStreamArray" json:"premodFountainStreamArray,omitempty"`
	PostmodFountainStreamArray    []string             `protobuf:"bytes,16,rep,name=postmodFountainStreamArray" json:"postmodFountainStreamArray,omitempty"`
	InboxFountainStreamArray      []string             `protobuf:"bytes,17,rep,name=inboxFountainStreamArray" json:"inboxFountainStreamArray,omitempty"`
	ContentLocation               *EMEmbedClientItem   `protobuf:"bytes,18,opt,name=contentLocation" json:"contentLocation,omitempty"`
	Width                         *string              `protobuf:"bytes,19,opt,name=width" json:"width,omitempty"`
	Height                        *string              `protobuf:"bytes,20,opt,name=height" json:"height,omitempty"`
	WidthPx                       *int32               `protobuf:"varint,21,opt,name=widthPx" json:"widthPx,omitempty"`
	HeightPx                      *int32               `protobuf:"varint,22,opt,name=heightPx" json:"heightPx,omitempty"`
	ContentURL                    *string              `protobuf:"bytes,23,opt,name=contentURL" json:"contentURL,omitempty"`
	OwnerObfuscatedId             *string              `protobuf:"bytes,27,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	AlbumId                       *string              `protobuf:"bytes,38,opt,name=albumId" json:"albumId,omitempty"`
	PhotoId                       *string              `protobuf:"bytes,39,opt,name=photoId" json:"photoId,omitempty"`
	AssociatedMediaArray          []*EMEmbedClientItem `protobuf:"bytes,42,rep,name=associatedMediaArray" json:"associatedMediaArray,omitempty"`
	IsFamilyFriendly              *bool                `protobuf:"varint,65,opt,name=isFamilyFriendly" json:"isFamilyFriendly,omitempty"`
	EmbedURL                      *string              `protobuf:"bytes,66,opt,name=embedURL" json:"embedURL,omitempty"`
	PlayerType                    *string              `protobuf:"bytes,67,opt,name=playerType" json:"playerType,omitempty"`
	Duration                      *string              `protobuf:"bytes,68,opt,name=duration" json:"duration,omitempty"`
	FaviconURL                    *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	AggregateRating               *EMEmbedClientItem   `protobuf:"bytes,82,opt,name=aggregateRating" json:"aggregateRating,omitempty"`
	OffersArray                   []*EMEmbedClientItem `protobuf:"bytes,83,rep,name=offersArray" json:"offersArray,omitempty"`
	Audio                         *EMEmbedClientItem   `protobuf:"bytes,96,opt,name=audio" json:"audio,omitempty"`
	DateCreated                   *string              `protobuf:"bytes,111,opt,name=dateCreated" json:"dateCreated,omitempty"`
	DateModified                  *string              `protobuf:"bytes,112,opt,name=dateModified" json:"dateModified,omitempty"`
	RepresentativeImage           *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	Genre                         *string              `protobuf:"bytes,188,opt,name=genre" json:"genre,omitempty"`
	ContentRating                 *string              `protobuf:"bytes,189,opt,name=contentRating" json:"contentRating,omitempty"`
	InLanguage                    *string              `protobuf:"bytes,190,opt,name=inLanguage" json:"inLanguage,omitempty"`
	DatePublished                 *string              `protobuf:"bytes,191,opt,name=datePublished" json:"datePublished,omitempty"`
	ClientEmbedURL                *string              `protobuf:"bytes,215,opt,name=clientEmbedURL" json:"clientEmbedURL,omitempty"`
	ContentProfileName            *string              `protobuf:"bytes,249,opt,name=contentProfileName" json:"contentProfileName,omitempty"`
	ContentProfileId              *string              `protobuf:"bytes,252,opt,name=contentProfileId" json:"contentProfileId,omitempty"`
	ExternalId                    *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	MediaKey                      *string              `protobuf:"bytes,258,opt,name=mediaKey" json:"mediaKey,omitempty"`
	AmpURL                        *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL                *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	FileFormat                    *string              `protobuf:"bytes,289,opt,name=fileFormat" json:"fileFormat,omitempty"`
}

func (x *EMPlusAudioV2) Reset() {
	*x = EMPlusAudioV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMPlusAudioV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMPlusAudioV2) ProtoMessage() {}

func (x *EMPlusAudioV2) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMPlusAudioV2.ProtoReflect.Descriptor instead.
func (*EMPlusAudioV2) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{13}
}

func (x *EMPlusAudioV2) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMPlusAudioV2) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMPlusAudioV2) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMPlusAudioV2) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMPlusAudioV2) GetDescriptionTruncated() string {
	if x != nil && x.DescriptionTruncated != nil {
		return *x.DescriptionTruncated
	}
	return ""
}

func (x *EMPlusAudioV2) GetProxiedImage() *EMThumbnail {
	if x != nil {
		return x.ProxiedImage
	}
	return nil
}

func (x *EMPlusAudioV2) GetProxiedFaviconURL() string {
	if x != nil && x.ProxiedFaviconURL != nil {
		return *x.ProxiedFaviconURL
	}
	return ""
}

func (x *EMPlusAudioV2) GetAuthorArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AuthorArray
	}
	return nil
}

func (x *EMPlusAudioV2) GetAbout() *EMEmbedClientItem {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *EMPlusAudioV2) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *EMPlusAudioV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if x != nil {
		return x.RelatedImageArray
	}
	return nil
}

func (x *EMPlusAudioV2) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *EMPlusAudioV2) GetCanonicalFountainStream() string {
	if x != nil && x.CanonicalFountainStream != nil {
		return *x.CanonicalFountainStream
	}
	return ""
}

func (x *EMPlusAudioV2) GetUnfilteredFountainStreamArray() []string {
	if x != nil {
		return x.UnfilteredFountainStreamArray
	}
	return nil
}

func (x *EMPlusAudioV2) GetPremodFountainStreamArray() []string {
	if x != nil {
		return x.PremodFountainStreamArray
	}
	return nil
}

func (x *EMPlusAudioV2) GetPostmodFountainStreamArray() []string {
	if x != nil {
		return x.PostmodFountainStreamArray
	}
	return nil
}

func (x *EMPlusAudioV2) GetInboxFountainStreamArray() []string {
	if x != nil {
		return x.InboxFountainStreamArray
	}
	return nil
}

func (x *EMPlusAudioV2) GetContentLocation() *EMEmbedClientItem {
	if x != nil {
		return x.ContentLocation
	}
	return nil
}

func (x *EMPlusAudioV2) GetWidth() string {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return ""
}

func (x *EMPlusAudioV2) GetHeight() string {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return ""
}

func (x *EMPlusAudioV2) GetWidthPx() int32 {
	if x != nil && x.WidthPx != nil {
		return *x.WidthPx
	}
	return 0
}

func (x *EMPlusAudioV2) GetHeightPx() int32 {
	if x != nil && x.HeightPx != nil {
		return *x.HeightPx
	}
	return 0
}

func (x *EMPlusAudioV2) GetContentURL() string {
	if x != nil && x.ContentURL != nil {
		return *x.ContentURL
	}
	return ""
}

func (x *EMPlusAudioV2) GetOwnerObfuscatedId() string {
	if x != nil && x.OwnerObfuscatedId != nil {
		return *x.OwnerObfuscatedId
	}
	return ""
}

func (x *EMPlusAudioV2) GetAlbumId() string {
	if x != nil && x.AlbumId != nil {
		return *x.AlbumId
	}
	return ""
}

func (x *EMPlusAudioV2) GetPhotoId() string {
	if x != nil && x.PhotoId != nil {
		return *x.PhotoId
	}
	return ""
}

func (x *EMPlusAudioV2) GetAssociatedMediaArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AssociatedMediaArray
	}
	return nil
}

func (x *EMPlusAudioV2) GetIsFamilyFriendly() bool {
	if x != nil && x.IsFamilyFriendly != nil {
		return *x.IsFamilyFriendly
	}
	return false
}

func (x *EMPlusAudioV2) GetEmbedURL() string {
	if x != nil && x.EmbedURL != nil {
		return *x.EmbedURL
	}
	return ""
}

func (x *EMPlusAudioV2) GetPlayerType() string {
	if x != nil && x.PlayerType != nil {
		return *x.PlayerType
	}
	return ""
}

func (x *EMPlusAudioV2) GetDuration() string {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return ""
}

func (x *EMPlusAudioV2) GetFaviconURL() string {
	if x != nil && x.FaviconURL != nil {
		return *x.FaviconURL
	}
	return ""
}

func (x *EMPlusAudioV2) GetAggregateRating() *EMEmbedClientItem {
	if x != nil {
		return x.AggregateRating
	}
	return nil
}

func (x *EMPlusAudioV2) GetOffersArray() []*EMEmbedClientItem {
	if x != nil {
		return x.OffersArray
	}
	return nil
}

func (x *EMPlusAudioV2) GetAudio() *EMEmbedClientItem {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *EMPlusAudioV2) GetDateCreated() string {
	if x != nil && x.DateCreated != nil {
		return *x.DateCreated
	}
	return ""
}

func (x *EMPlusAudioV2) GetDateModified() string {
	if x != nil && x.DateModified != nil {
		return *x.DateModified
	}
	return ""
}

func (x *EMPlusAudioV2) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

func (x *EMPlusAudioV2) GetGenre() string {
	if x != nil && x.Genre != nil {
		return *x.Genre
	}
	return ""
}

func (x *EMPlusAudioV2) GetContentRating() string {
	if x != nil && x.ContentRating != nil {
		return *x.ContentRating
	}
	return ""
}

func (x *EMPlusAudioV2) GetInLanguage() string {
	if x != nil && x.InLanguage != nil {
		return *x.InLanguage
	}
	return ""
}

func (x *EMPlusAudioV2) GetDatePublished() string {
	if x != nil && x.DatePublished != nil {
		return *x.DatePublished
	}
	return ""
}

func (x *EMPlusAudioV2) GetClientEmbedURL() string {
	if x != nil && x.ClientEmbedURL != nil {
		return *x.ClientEmbedURL
	}
	return ""
}

func (x *EMPlusAudioV2) GetContentProfileName() string {
	if x != nil && x.ContentProfileName != nil {
		return *x.ContentProfileName
	}
	return ""
}

func (x *EMPlusAudioV2) GetContentProfileId() string {
	if x != nil && x.ContentProfileId != nil {
		return *x.ContentProfileId
	}
	return ""
}

func (x *EMPlusAudioV2) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *EMPlusAudioV2) GetMediaKey() string {
	if x != nil && x.MediaKey != nil {
		return *x.MediaKey
	}
	return ""
}

func (x *EMPlusAudioV2) GetAmpURL() string {
	if x != nil && x.AmpURL != nil {
		return *x.AmpURL
	}
	return ""
}

func (x *EMPlusAudioV2) GetDestinationURL() string {
	if x != nil && x.DestinationURL != nil {
		return *x.DestinationURL
	}
	return ""
}

func (x *EMPlusAudioV2) GetFileFormat() string {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return ""
}

type EMPersonV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL                  *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL             *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage         *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL    *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray          []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	RelatedImageArray    []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName           *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	OwnerObfuscatedId    *string              `protobuf:"bytes,27,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	Gender               *string              `protobuf:"bytes,48,opt,name=gender" json:"gender,omitempty"`
	Email                *string              `protobuf:"bytes,49,opt,name=email" json:"email,omitempty"`
	FaviconURL           *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	RepresentativeImage  *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	ExternalId           *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	AmpURL               *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL       *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
}

func (x *EMPersonV2) Reset() {
	*x = EMPersonV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMPersonV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMPersonV2) ProtoMessage() {}

func (x *EMPersonV2) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMPersonV2.ProtoReflect.Descriptor instead.
func (*EMPersonV2) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{14}
}

func (x *EMPersonV2) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMPersonV2) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMPersonV2) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMPersonV2) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMPersonV2) GetDescriptionTruncated() string {
	if x != nil && x.DescriptionTruncated != nil {
		return *x.DescriptionTruncated
	}
	return ""
}

func (x *EMPersonV2) GetProxiedImage() *EMThumbnail {
	if x != nil {
		return x.ProxiedImage
	}
	return nil
}

func (x *EMPersonV2) GetProxiedFaviconURL() string {
	if x != nil && x.ProxiedFaviconURL != nil {
		return *x.ProxiedFaviconURL
	}
	return ""
}

func (x *EMPersonV2) GetAuthorArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AuthorArray
	}
	return nil
}

func (x *EMPersonV2) GetAbout() *EMEmbedClientItem {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *EMPersonV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if x != nil {
		return x.RelatedImageArray
	}
	return nil
}

func (x *EMPersonV2) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *EMPersonV2) GetOwnerObfuscatedId() string {
	if x != nil && x.OwnerObfuscatedId != nil {
		return *x.OwnerObfuscatedId
	}
	return ""
}

func (x *EMPersonV2) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *EMPersonV2) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *EMPersonV2) GetFaviconURL() string {
	if x != nil && x.FaviconURL != nil {
		return *x.FaviconURL
	}
	return ""
}

func (x *EMPersonV2) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

func (x *EMPersonV2) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *EMPersonV2) GetAmpURL() string {
	if x != nil && x.AmpURL != nil {
		return *x.AmpURL
	}
	return ""
}

func (x *EMPersonV2) GetDestinationURL() string {
	if x != nil && x.DestinationURL != nil {
		return *x.DestinationURL
	}
	return ""
}

type EMImageObjectV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL                           *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL                      *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                          *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP                  *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated          *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage                  *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL             *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray                   []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                         *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	Text                          *string              `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	RelatedImageArray             []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName                    *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	CanonicalFountainStream       *string              `protobuf:"bytes,13,opt,name=canonicalFountainStream" json:"canonicalFountainStream,omitempty"`
	UnfilteredFountainStreamArray []string             `protobuf:"bytes,14,rep,name=unfilteredFountainStreamArray" json:"unfilteredFountainStreamArray,omitempty"`
	PremodFountainStreamArray     []string             `protobuf:"bytes,15,rep,name=premodFountainStreamArray" json:"premodFountainStreamArray,omitempty"`
	PostmodFountainStreamArray    []string             `protobuf:"bytes,16,rep,name=postmodFountainStreamArray" json:"postmodFountainStreamArray,omitempty"`
	InboxFountainStreamArray      []string             `protobuf:"bytes,17,rep,name=inboxFountainStreamArray" json:"inboxFountainStreamArray,omitempty"`
	ContentLocation               *EMEmbedClientItem   `protobuf:"bytes,18,opt,name=contentLocation" json:"contentLocation,omitempty"`
	Width                         *string              `protobuf:"bytes,19,opt,name=width" json:"width,omitempty"`
	Height                        *string              `protobuf:"bytes,20,opt,name=height" json:"height,omitempty"`
	WidthPx                       *int32               `protobuf:"varint,21,opt,name=widthPx" json:"widthPx,omitempty"`
	HeightPx                      *int32               `protobuf:"varint,22,opt,name=heightPx" json:"heightPx,omitempty"`
	ContentURL                    *string              `protobuf:"bytes,23,opt,name=contentURL" json:"contentURL,omitempty"`
	AssociatedMediaArray          []*EMEmbedClientItem `protobuf:"bytes,42,rep,name=associatedMediaArray" json:"associatedMediaArray,omitempty"`
	IsFamilyFriendly              *bool                `protobuf:"varint,65,opt,name=isFamilyFriendly" json:"isFamilyFriendly,omitempty"`
	EmbedURL                      *string              `protobuf:"bytes,66,opt,name=embedURL" json:"embedURL,omitempty"`
	PlayerType                    *string              `protobuf:"bytes,67,opt,name=playerType" json:"playerType,omitempty"`
	Duration                      *string              `protobuf:"bytes,68,opt,name=duration" json:"duration,omitempty"`
	FaviconURL                    *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	AggregateRating               *EMEmbedClientItem   `protobuf:"bytes,82,opt,name=aggregateRating" json:"aggregateRating,omitempty"`
	OffersArray                   []*EMEmbedClientItem `protobuf:"bytes,83,rep,name=offersArray" json:"offersArray,omitempty"`
	Audio                         *EMEmbedClientItem   `protobuf:"bytes,96,opt,name=audio" json:"audio,omitempty"`
	DateCreated                   *string              `protobuf:"bytes,111,opt,name=dateCreated" json:"dateCreated,omitempty"`
	DateModified                  *string              `protobuf:"bytes,112,opt,name=dateModified" json:"dateModified,omitempty"`
	RepresentativeImage           *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	Genre                         *string              `protobuf:"bytes,188,opt,name=genre" json:"genre,omitempty"`
	ContentRating                 *string              `protobuf:"bytes,189,opt,name=contentRating" json:"contentRating,omitempty"`
	InLanguage                    *string              `protobuf:"bytes,190,opt,name=inLanguage" json:"inLanguage,omitempty"`
	DatePublished                 *string              `protobuf:"bytes,191,opt,name=datePublished" json:"datePublished,omitempty"`
	ContentProfileName            *string              `protobuf:"bytes,249,opt,name=contentProfileName" json:"contentProfileName,omitempty"`
	ContentProfileId              *string              `protobuf:"bytes,252,opt,name=contentProfileId" json:"contentProfileId,omitempty"`
	ExternalId                    *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	AmpURL                        *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL                *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	FileFormat                    *string              `protobuf:"bytes,289,opt,name=fileFormat" json:"fileFormat,omitempty"`
}

func (x *EMImageObjectV2) Reset() {
	*x = EMImageObjectV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMImageObjectV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMImageObjectV2) ProtoMessage() {}

func (x *EMImageObjectV2) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMImageObjectV2.ProtoReflect.Descriptor instead.
func (*EMImageObjectV2) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{15}
}

func (x *EMImageObjectV2) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMImageObjectV2) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMImageObjectV2) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMImageObjectV2) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMImageObjectV2) GetDescriptionTruncated() string {
	if x != nil && x.DescriptionTruncated != nil {
		return *x.DescriptionTruncated
	}
	return ""
}

func (x *EMImageObjectV2) GetProxiedImage() *EMThumbnail {
	if x != nil {
		return x.ProxiedImage
	}
	return nil
}

func (x *EMImageObjectV2) GetProxiedFaviconURL() string {
	if x != nil && x.ProxiedFaviconURL != nil {
		return *x.ProxiedFaviconURL
	}
	return ""
}

func (x *EMImageObjectV2) GetAuthorArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AuthorArray
	}
	return nil
}

func (x *EMImageObjectV2) GetAbout() *EMEmbedClientItem {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *EMImageObjectV2) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *EMImageObjectV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if x != nil {
		return x.RelatedImageArray
	}
	return nil
}

func (x *EMImageObjectV2) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *EMImageObjectV2) GetCanonicalFountainStream() string {
	if x != nil && x.CanonicalFountainStream != nil {
		return *x.CanonicalFountainStream
	}
	return ""
}

func (x *EMImageObjectV2) GetUnfilteredFountainStreamArray() []string {
	if x != nil {
		return x.UnfilteredFountainStreamArray
	}
	return nil
}

func (x *EMImageObjectV2) GetPremodFountainStreamArray() []string {
	if x != nil {
		return x.PremodFountainStreamArray
	}
	return nil
}

func (x *EMImageObjectV2) GetPostmodFountainStreamArray() []string {
	if x != nil {
		return x.PostmodFountainStreamArray
	}
	return nil
}

func (x *EMImageObjectV2) GetInboxFountainStreamArray() []string {
	if x != nil {
		return x.InboxFountainStreamArray
	}
	return nil
}

func (x *EMImageObjectV2) GetContentLocation() *EMEmbedClientItem {
	if x != nil {
		return x.ContentLocation
	}
	return nil
}

func (x *EMImageObjectV2) GetWidth() string {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return ""
}

func (x *EMImageObjectV2) GetHeight() string {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return ""
}

func (x *EMImageObjectV2) GetWidthPx() int32 {
	if x != nil && x.WidthPx != nil {
		return *x.WidthPx
	}
	return 0
}

func (x *EMImageObjectV2) GetHeightPx() int32 {
	if x != nil && x.HeightPx != nil {
		return *x.HeightPx
	}
	return 0
}

func (x *EMImageObjectV2) GetContentURL() string {
	if x != nil && x.ContentURL != nil {
		return *x.ContentURL
	}
	return ""
}

func (x *EMImageObjectV2) GetAssociatedMediaArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AssociatedMediaArray
	}
	return nil
}

func (x *EMImageObjectV2) GetIsFamilyFriendly() bool {
	if x != nil && x.IsFamilyFriendly != nil {
		return *x.IsFamilyFriendly
	}
	return false
}

func (x *EMImageObjectV2) GetEmbedURL() string {
	if x != nil && x.EmbedURL != nil {
		return *x.EmbedURL
	}
	return ""
}

func (x *EMImageObjectV2) GetPlayerType() string {
	if x != nil && x.PlayerType != nil {
		return *x.PlayerType
	}
	return ""
}

func (x *EMImageObjectV2) GetDuration() string {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return ""
}

func (x *EMImageObjectV2) GetFaviconURL() string {
	if x != nil && x.FaviconURL != nil {
		return *x.FaviconURL
	}
	return ""
}

func (x *EMImageObjectV2) GetAggregateRating() *EMEmbedClientItem {
	if x != nil {
		return x.AggregateRating
	}
	return nil
}

func (x *EMImageObjectV2) GetOffersArray() []*EMEmbedClientItem {
	if x != nil {
		return x.OffersArray
	}
	return nil
}

func (x *EMImageObjectV2) GetAudio() *EMEmbedClientItem {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *EMImageObjectV2) GetDateCreated() string {
	if x != nil && x.DateCreated != nil {
		return *x.DateCreated
	}
	return ""
}

func (x *EMImageObjectV2) GetDateModified() string {
	if x != nil && x.DateModified != nil {
		return *x.DateModified
	}
	return ""
}

func (x *EMImageObjectV2) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

func (x *EMImageObjectV2) GetGenre() string {
	if x != nil && x.Genre != nil {
		return *x.Genre
	}
	return ""
}

func (x *EMImageObjectV2) GetContentRating() string {
	if x != nil && x.ContentRating != nil {
		return *x.ContentRating
	}
	return ""
}

func (x *EMImageObjectV2) GetInLanguage() string {
	if x != nil && x.InLanguage != nil {
		return *x.InLanguage
	}
	return ""
}

func (x *EMImageObjectV2) GetDatePublished() string {
	if x != nil && x.DatePublished != nil {
		return *x.DatePublished
	}
	return ""
}

func (x *EMImageObjectV2) GetContentProfileName() string {
	if x != nil && x.ContentProfileName != nil {
		return *x.ContentProfileName
	}
	return ""
}

func (x *EMImageObjectV2) GetContentProfileId() string {
	if x != nil && x.ContentProfileId != nil {
		return *x.ContentProfileId
	}
	return ""
}

func (x *EMImageObjectV2) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *EMImageObjectV2) GetAmpURL() string {
	if x != nil && x.AmpURL != nil {
		return *x.AmpURL
	}
	return ""
}

func (x *EMImageObjectV2) GetDestinationURL() string {
	if x != nil && x.DestinationURL != nil {
		return *x.DestinationURL
	}
	return ""
}

func (x *EMImageObjectV2) GetFileFormat() string {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return ""
}

type EMWebPageV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL                           *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL                      *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                          *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP                  *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated          *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage                  *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL             *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray                   []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                         *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	Text                          *string              `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	RelatedImageArray             []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName                    *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	CanonicalFountainStream       *string              `protobuf:"bytes,13,opt,name=canonicalFountainStream" json:"canonicalFountainStream,omitempty"`
	UnfilteredFountainStreamArray []string             `protobuf:"bytes,14,rep,name=unfilteredFountainStreamArray" json:"unfilteredFountainStreamArray,omitempty"`
	PremodFountainStreamArray     []string             `protobuf:"bytes,15,rep,name=premodFountainStreamArray" json:"premodFountainStreamArray,omitempty"`
	PostmodFountainStreamArray    []string             `protobuf:"bytes,16,rep,name=postmodFountainStreamArray" json:"postmodFountainStreamArray,omitempty"`
	InboxFountainStreamArray      []string             `protobuf:"bytes,17,rep,name=inboxFountainStreamArray" json:"inboxFountainStreamArray,omitempty"`
	ContentLocation               *EMEmbedClientItem   `protobuf:"bytes,18,opt,name=contentLocation" json:"contentLocation,omitempty"`
	AssociatedMediaArray          []*EMEmbedClientItem `protobuf:"bytes,42,rep,name=associatedMediaArray" json:"associatedMediaArray,omitempty"`
	IsFamilyFriendly              *bool                `protobuf:"varint,65,opt,name=isFamilyFriendly" json:"isFamilyFriendly,omitempty"`
	FaviconURL                    *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	AggregateRating               *EMEmbedClientItem   `protobuf:"bytes,82,opt,name=aggregateRating" json:"aggregateRating,omitempty"`
	OffersArray                   []*EMEmbedClientItem `protobuf:"bytes,83,rep,name=offersArray" json:"offersArray,omitempty"`
	Audio                         *EMEmbedClientItem   `protobuf:"bytes,96,opt,name=audio" json:"audio,omitempty"`
	DateCreated                   *string              `protobuf:"bytes,111,opt,name=dateCreated" json:"dateCreated,omitempty"`
	DateModified                  *string              `protobuf:"bytes,112,opt,name=dateModified" json:"dateModified,omitempty"`
	RepresentativeImage           *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	Genre                         *string              `protobuf:"bytes,188,opt,name=genre" json:"genre,omitempty"`
	ContentRating                 *string              `protobuf:"bytes,189,opt,name=contentRating" json:"contentRating,omitempty"`
	InLanguage                    *string              `protobuf:"bytes,190,opt,name=inLanguage" json:"inLanguage,omitempty"`
	DatePublished                 *string              `protobuf:"bytes,191,opt,name=datePublished" json:"datePublished,omitempty"`
	ContentProfileName            *string              `protobuf:"bytes,249,opt,name=contentProfileName" json:"contentProfileName,omitempty"`
	ContentProfileId              *string              `protobuf:"bytes,252,opt,name=contentProfileId" json:"contentProfileId,omitempty"`
	ExternalId                    *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	AmpURL                        *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL                *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	FileFormat                    *string              `protobuf:"bytes,289,opt,name=fileFormat" json:"fileFormat,omitempty"`
}

func (x *EMWebPageV2) Reset() {
	*x = EMWebPageV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMWebPageV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMWebPageV2) ProtoMessage() {}

func (x *EMWebPageV2) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMWebPageV2.ProtoReflect.Descriptor instead.
func (*EMWebPageV2) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{16}
}

func (x *EMWebPageV2) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMWebPageV2) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMWebPageV2) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMWebPageV2) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMWebPageV2) GetDescriptionTruncated() string {
	if x != nil && x.DescriptionTruncated != nil {
		return *x.DescriptionTruncated
	}
	return ""
}

func (x *EMWebPageV2) GetProxiedImage() *EMThumbnail {
	if x != nil {
		return x.ProxiedImage
	}
	return nil
}

func (x *EMWebPageV2) GetProxiedFaviconURL() string {
	if x != nil && x.ProxiedFaviconURL != nil {
		return *x.ProxiedFaviconURL
	}
	return ""
}

func (x *EMWebPageV2) GetAuthorArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AuthorArray
	}
	return nil
}

func (x *EMWebPageV2) GetAbout() *EMEmbedClientItem {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *EMWebPageV2) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *EMWebPageV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if x != nil {
		return x.RelatedImageArray
	}
	return nil
}

func (x *EMWebPageV2) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *EMWebPageV2) GetCanonicalFountainStream() string {
	if x != nil && x.CanonicalFountainStream != nil {
		return *x.CanonicalFountainStream
	}
	return ""
}

func (x *EMWebPageV2) GetUnfilteredFountainStreamArray() []string {
	if x != nil {
		return x.UnfilteredFountainStreamArray
	}
	return nil
}

func (x *EMWebPageV2) GetPremodFountainStreamArray() []string {
	if x != nil {
		return x.PremodFountainStreamArray
	}
	return nil
}

func (x *EMWebPageV2) GetPostmodFountainStreamArray() []string {
	if x != nil {
		return x.PostmodFountainStreamArray
	}
	return nil
}

func (x *EMWebPageV2) GetInboxFountainStreamArray() []string {
	if x != nil {
		return x.InboxFountainStreamArray
	}
	return nil
}

func (x *EMWebPageV2) GetContentLocation() *EMEmbedClientItem {
	if x != nil {
		return x.ContentLocation
	}
	return nil
}

func (x *EMWebPageV2) GetAssociatedMediaArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AssociatedMediaArray
	}
	return nil
}

func (x *EMWebPageV2) GetIsFamilyFriendly() bool {
	if x != nil && x.IsFamilyFriendly != nil {
		return *x.IsFamilyFriendly
	}
	return false
}

func (x *EMWebPageV2) GetFaviconURL() string {
	if x != nil && x.FaviconURL != nil {
		return *x.FaviconURL
	}
	return ""
}

func (x *EMWebPageV2) GetAggregateRating() *EMEmbedClientItem {
	if x != nil {
		return x.AggregateRating
	}
	return nil
}

func (x *EMWebPageV2) GetOffersArray() []*EMEmbedClientItem {
	if x != nil {
		return x.OffersArray
	}
	return nil
}

func (x *EMWebPageV2) GetAudio() *EMEmbedClientItem {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *EMWebPageV2) GetDateCreated() string {
	if x != nil && x.DateCreated != nil {
		return *x.DateCreated
	}
	return ""
}

func (x *EMWebPageV2) GetDateModified() string {
	if x != nil && x.DateModified != nil {
		return *x.DateModified
	}
	return ""
}

func (x *EMWebPageV2) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

func (x *EMWebPageV2) GetGenre() string {
	if x != nil && x.Genre != nil {
		return *x.Genre
	}
	return ""
}

func (x *EMWebPageV2) GetContentRating() string {
	if x != nil && x.ContentRating != nil {
		return *x.ContentRating
	}
	return ""
}

func (x *EMWebPageV2) GetInLanguage() string {
	if x != nil && x.InLanguage != nil {
		return *x.InLanguage
	}
	return ""
}

func (x *EMWebPageV2) GetDatePublished() string {
	if x != nil && x.DatePublished != nil {
		return *x.DatePublished
	}
	return ""
}

func (x *EMWebPageV2) GetContentProfileName() string {
	if x != nil && x.ContentProfileName != nil {
		return *x.ContentProfileName
	}
	return ""
}

func (x *EMWebPageV2) GetContentProfileId() string {
	if x != nil && x.ContentProfileId != nil {
		return *x.ContentProfileId
	}
	return ""
}

func (x *EMWebPageV2) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *EMWebPageV2) GetAmpURL() string {
	if x != nil && x.AmpURL != nil {
		return *x.AmpURL
	}
	return ""
}

func (x *EMWebPageV2) GetDestinationURL() string {
	if x != nil && x.DestinationURL != nil {
		return *x.DestinationURL
	}
	return ""
}

func (x *EMWebPageV2) GetFileFormat() string {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return ""
}

type EMPlusPhotoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL                           *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL                      *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                          *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP                  *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated          *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage                  *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL             *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray                   []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                         *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	Text                          *string              `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	RelatedImageArray             []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName                    *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	CanonicalFountainStream       *string              `protobuf:"bytes,13,opt,name=canonicalFountainStream" json:"canonicalFountainStream,omitempty"`
	UnfilteredFountainStreamArray []string             `protobuf:"bytes,14,rep,name=unfilteredFountainStreamArray" json:"unfilteredFountainStreamArray,omitempty"`
	PremodFountainStreamArray     []string             `protobuf:"bytes,15,rep,name=premodFountainStreamArray" json:"premodFountainStreamArray,omitempty"`
	PostmodFountainStreamArray    []string             `protobuf:"bytes,16,rep,name=postmodFountainStreamArray" json:"postmodFountainStreamArray,omitempty"`
	InboxFountainStreamArray      []string             `protobuf:"bytes,17,rep,name=inboxFountainStreamArray" json:"inboxFountainStreamArray,omitempty"`
	ContentLocation               *EMEmbedClientItem   `protobuf:"bytes,18,opt,name=contentLocation" json:"contentLocation,omitempty"`
	Width                         *string              `protobuf:"bytes,19,opt,name=width" json:"width,omitempty"`
	Height                        *string              `protobuf:"bytes,20,opt,name=height" json:"height,omitempty"`
	WidthPx                       *int32               `protobuf:"varint,21,opt,name=widthPx" json:"widthPx,omitempty"`
	HeightPx                      *int32               `protobuf:"varint,22,opt,name=heightPx" json:"heightPx,omitempty"`
	ContentURL                    *string              `protobuf:"bytes,23,opt,name=contentURL" json:"contentURL,omitempty"`
	OwnerObfuscatedId             *string              `protobuf:"bytes,27,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	AlbumId                       *string              `protobuf:"bytes,38,opt,name=albumId" json:"albumId,omitempty"`
	PhotoId                       *string              `protobuf:"bytes,39,opt,name=photoId" json:"photoId,omitempty"`
	OnepickMediaId                *string              `protobuf:"bytes,40,opt,name=onepickMediaId" json:"onepickMediaId,omitempty"`
	AssociatedMediaArray          []*EMEmbedClientItem `protobuf:"bytes,42,rep,name=associatedMediaArray" json:"associatedMediaArray,omitempty"`
	RelativeURL                   *string              `protobuf:"bytes,46,opt,name=relativeURL" json:"relativeURL,omitempty"`
	StreamIdArray                 []string             `protobuf:"bytes,47,rep,name=streamIdArray" json:"streamIdArray,omitempty"`
	IsFamilyFriendly              *bool                `protobuf:"varint,65,opt,name=isFamilyFriendly" json:"isFamilyFriendly,omitempty"`
	EmbedURL                      *string              `protobuf:"bytes,66,opt,name=embedURL" json:"embedURL,omitempty"`
	PlayerType                    *string              `protobuf:"bytes,67,opt,name=playerType" json:"playerType,omitempty"`
	Duration                      *string              `protobuf:"bytes,68,opt,name=duration" json:"duration,omitempty"`
	FaviconURL                    *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	AggregateRating               *EMEmbedClientItem   `protobuf:"bytes,82,opt,name=aggregateRating" json:"aggregateRating,omitempty"`
	OffersArray                   []*EMEmbedClientItem `protobuf:"bytes,83,rep,name=offersArray" json:"offersArray,omitempty"`
	Audio                         *EMEmbedClientItem   `protobuf:"bytes,96,opt,name=audio" json:"audio,omitempty"`
	DateCreated                   *string              `protobuf:"bytes,111,opt,name=dateCreated" json:"dateCreated,omitempty"`
	DateModified                  *string              `protobuf:"bytes,112,opt,name=dateModified" json:"dateModified,omitempty"`
	RepresentativeImage           *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	Genre                         *string              `protobuf:"bytes,188,opt,name=genre" json:"genre,omitempty"`
	ContentRating                 *string              `protobuf:"bytes,189,opt,name=contentRating" json:"contentRating,omitempty"`
	InLanguage                    *string              `protobuf:"bytes,190,opt,name=inLanguage" json:"inLanguage,omitempty"`
	DatePublished                 *string              `protobuf:"bytes,191,opt,name=datePublished" json:"datePublished,omitempty"`
	ImageQuality                  *string              `protobuf:"bytes,195,opt,name=imageQuality" json:"imageQuality,omitempty"`
	MaxHeight                     *string              `protobuf:"bytes,196,opt,name=maxHeight" json:"maxHeight,omitempty"`
	MaxWidth                      *string              `protobuf:"bytes,197,opt,name=maxWidth" json:"maxWidth,omitempty"`
	ContentProfileName            *string              `protobuf:"bytes,249,opt,name=contentProfileName" json:"contentProfileName,omitempty"`
	ContentProfileId              *string              `protobuf:"bytes,252,opt,name=contentProfileId" json:"contentProfileId,omitempty"`
	ExternalId                    *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	MediaKey                      *string              `protobuf:"bytes,258,opt,name=mediaKey" json:"mediaKey,omitempty"`
	AmpURL                        *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	OriginalMediaPlayerURL        *string              `protobuf:"bytes,283,opt,name=originalMediaPlayerURL" json:"originalMediaPlayerURL,omitempty"`
	OriginalMediaContainerURL     *string              `protobuf:"bytes,284,opt,name=originalMediaContainerURL" json:"originalMediaContainerURL,omitempty"`
	OriginalLightboxPhotoId       *string              `protobuf:"bytes,285,opt,name=originalLightboxPhotoId" json:"originalLightboxPhotoId,omitempty"`
	OriginalContentURL            *string              `protobuf:"bytes,286,opt,name=originalContentURL" json:"originalContentURL,omitempty"`
	DestinationURL                *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	FileFormat                    *string              `protobuf:"bytes,289,opt,name=fileFormat" json:"fileFormat,omitempty"`
}

func (x *EMPlusPhotoV2) Reset() {
	*x = EMPlusPhotoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMPlusPhotoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMPlusPhotoV2) ProtoMessage() {}

func (x *EMPlusPhotoV2) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMPlusPhotoV2.ProtoReflect.Descriptor instead.
func (*EMPlusPhotoV2) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{17}
}

func (x *EMPlusPhotoV2) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *EMPlusPhotoV2) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *EMPlusPhotoV2) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EMPlusPhotoV2) GetDescriptionP() string {
	if x != nil && x.DescriptionP != nil {
		return *x.DescriptionP
	}
	return ""
}

func (x *EMPlusPhotoV2) GetDescriptionTruncated() string {
	if x != nil && x.DescriptionTruncated != nil {
		return *x.DescriptionTruncated
	}
	return ""
}

func (x *EMPlusPhotoV2) GetProxiedImage() *EMThumbnail {
	if x != nil {
		return x.ProxiedImage
	}
	return nil
}

func (x *EMPlusPhotoV2) GetProxiedFaviconURL() string {
	if x != nil && x.ProxiedFaviconURL != nil {
		return *x.ProxiedFaviconURL
	}
	return ""
}

func (x *EMPlusPhotoV2) GetAuthorArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AuthorArray
	}
	return nil
}

func (x *EMPlusPhotoV2) GetAbout() *EMEmbedClientItem {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *EMPlusPhotoV2) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *EMPlusPhotoV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if x != nil {
		return x.RelatedImageArray
	}
	return nil
}

func (x *EMPlusPhotoV2) GetSourceName() string {
	if x != nil && x.SourceName != nil {
		return *x.SourceName
	}
	return ""
}

func (x *EMPlusPhotoV2) GetCanonicalFountainStream() string {
	if x != nil && x.CanonicalFountainStream != nil {
		return *x.CanonicalFountainStream
	}
	return ""
}

func (x *EMPlusPhotoV2) GetUnfilteredFountainStreamArray() []string {
	if x != nil {
		return x.UnfilteredFountainStreamArray
	}
	return nil
}

func (x *EMPlusPhotoV2) GetPremodFountainStreamArray() []string {
	if x != nil {
		return x.PremodFountainStreamArray
	}
	return nil
}

func (x *EMPlusPhotoV2) GetPostmodFountainStreamArray() []string {
	if x != nil {
		return x.PostmodFountainStreamArray
	}
	return nil
}

func (x *EMPlusPhotoV2) GetInboxFountainStreamArray() []string {
	if x != nil {
		return x.InboxFountainStreamArray
	}
	return nil
}

func (x *EMPlusPhotoV2) GetContentLocation() *EMEmbedClientItem {
	if x != nil {
		return x.ContentLocation
	}
	return nil
}

func (x *EMPlusPhotoV2) GetWidth() string {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return ""
}

func (x *EMPlusPhotoV2) GetHeight() string {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return ""
}

func (x *EMPlusPhotoV2) GetWidthPx() int32 {
	if x != nil && x.WidthPx != nil {
		return *x.WidthPx
	}
	return 0
}

func (x *EMPlusPhotoV2) GetHeightPx() int32 {
	if x != nil && x.HeightPx != nil {
		return *x.HeightPx
	}
	return 0
}

func (x *EMPlusPhotoV2) GetContentURL() string {
	if x != nil && x.ContentURL != nil {
		return *x.ContentURL
	}
	return ""
}

func (x *EMPlusPhotoV2) GetOwnerObfuscatedId() string {
	if x != nil && x.OwnerObfuscatedId != nil {
		return *x.OwnerObfuscatedId
	}
	return ""
}

func (x *EMPlusPhotoV2) GetAlbumId() string {
	if x != nil && x.AlbumId != nil {
		return *x.AlbumId
	}
	return ""
}

func (x *EMPlusPhotoV2) GetPhotoId() string {
	if x != nil && x.PhotoId != nil {
		return *x.PhotoId
	}
	return ""
}

func (x *EMPlusPhotoV2) GetOnepickMediaId() string {
	if x != nil && x.OnepickMediaId != nil {
		return *x.OnepickMediaId
	}
	return ""
}

func (x *EMPlusPhotoV2) GetAssociatedMediaArray() []*EMEmbedClientItem {
	if x != nil {
		return x.AssociatedMediaArray
	}
	return nil
}

func (x *EMPlusPhotoV2) GetRelativeURL() string {
	if x != nil && x.RelativeURL != nil {
		return *x.RelativeURL
	}
	return ""
}

func (x *EMPlusPhotoV2) GetStreamIdArray() []string {
	if x != nil {
		return x.StreamIdArray
	}
	return nil
}

func (x *EMPlusPhotoV2) GetIsFamilyFriendly() bool {
	if x != nil && x.IsFamilyFriendly != nil {
		return *x.IsFamilyFriendly
	}
	return false
}

func (x *EMPlusPhotoV2) GetEmbedURL() string {
	if x != nil && x.EmbedURL != nil {
		return *x.EmbedURL
	}
	return ""
}

func (x *EMPlusPhotoV2) GetPlayerType() string {
	if x != nil && x.PlayerType != nil {
		return *x.PlayerType
	}
	return ""
}

func (x *EMPlusPhotoV2) GetDuration() string {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return ""
}

func (x *EMPlusPhotoV2) GetFaviconURL() string {
	if x != nil && x.FaviconURL != nil {
		return *x.FaviconURL
	}
	return ""
}

func (x *EMPlusPhotoV2) GetAggregateRating() *EMEmbedClientItem {
	if x != nil {
		return x.AggregateRating
	}
	return nil
}

func (x *EMPlusPhotoV2) GetOffersArray() []*EMEmbedClientItem {
	if x != nil {
		return x.OffersArray
	}
	return nil
}

func (x *EMPlusPhotoV2) GetAudio() *EMEmbedClientItem {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *EMPlusPhotoV2) GetDateCreated() string {
	if x != nil && x.DateCreated != nil {
		return *x.DateCreated
	}
	return ""
}

func (x *EMPlusPhotoV2) GetDateModified() string {
	if x != nil && x.DateModified != nil {
		return *x.DateModified
	}
	return ""
}

func (x *EMPlusPhotoV2) GetRepresentativeImage() *EMEmbedClientItem {
	if x != nil {
		return x.RepresentativeImage
	}
	return nil
}

func (x *EMPlusPhotoV2) GetGenre() string {
	if x != nil && x.Genre != nil {
		return *x.Genre
	}
	return ""
}

func (x *EMPlusPhotoV2) GetContentRating() string {
	if x != nil && x.ContentRating != nil {
		return *x.ContentRating
	}
	return ""
}

func (x *EMPlusPhotoV2) GetInLanguage() string {
	if x != nil && x.InLanguage != nil {
		return *x.InLanguage
	}
	return ""
}

func (x *EMPlusPhotoV2) GetDatePublished() string {
	if x != nil && x.DatePublished != nil {
		return *x.DatePublished
	}
	return ""
}

func (x *EMPlusPhotoV2) GetImageQuality() string {
	if x != nil && x.ImageQuality != nil {
		return *x.ImageQuality
	}
	return ""
}

func (x *EMPlusPhotoV2) GetMaxHeight() string {
	if x != nil && x.MaxHeight != nil {
		return *x.MaxHeight
	}
	return ""
}

func (x *EMPlusPhotoV2) GetMaxWidth() string {
	if x != nil && x.MaxWidth != nil {
		return *x.MaxWidth
	}
	return ""
}

func (x *EMPlusPhotoV2) GetContentProfileName() string {
	if x != nil && x.ContentProfileName != nil {
		return *x.ContentProfileName
	}
	return ""
}

func (x *EMPlusPhotoV2) GetContentProfileId() string {
	if x != nil && x.ContentProfileId != nil {
		return *x.ContentProfileId
	}
	return ""
}

func (x *EMPlusPhotoV2) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *EMPlusPhotoV2) GetMediaKey() string {
	if x != nil && x.MediaKey != nil {
		return *x.MediaKey
	}
	return ""
}

func (x *EMPlusPhotoV2) GetAmpURL() string {
	if x != nil && x.AmpURL != nil {
		return *x.AmpURL
	}
	return ""
}

func (x *EMPlusPhotoV2) GetOriginalMediaPlayerURL() string {
	if x != nil && x.OriginalMediaPlayerURL != nil {
		return *x.OriginalMediaPlayerURL
	}
	return ""
}

func (x *EMPlusPhotoV2) GetOriginalMediaContainerURL() string {
	if x != nil && x.OriginalMediaContainerURL != nil {
		return *x.OriginalMediaContainerURL
	}
	return ""
}

func (x *EMPlusPhotoV2) GetOriginalLightboxPhotoId() string {
	if x != nil && x.OriginalLightboxPhotoId != nil {
		return *x.OriginalLightboxPhotoId
	}
	return ""
}

func (x *EMPlusPhotoV2) GetOriginalContentURL() string {
	if x != nil && x.OriginalContentURL != nil {
		return *x.OriginalContentURL
	}
	return ""
}

func (x *EMPlusPhotoV2) GetDestinationURL() string {
	if x != nil && x.DestinationURL != nil {
		return *x.DestinationURL
	}
	return ""
}

func (x *EMPlusPhotoV2) GetFileFormat() string {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return ""
}

type EMClientEmbedOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeTypeArray []EMItemType `protobuf:"varint,1,rep,name=includeTypeArray,enum=hangouts.EMItemType" json:"includeTypeArray,omitempty"`
}

func (x *EMClientEmbedOptions) Reset() {
	*x = EMClientEmbedOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMClientEmbedOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMClientEmbedOptions) ProtoMessage() {}

func (x *EMClientEmbedOptions) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMClientEmbedOptions.ProtoReflect.Descriptor instead.
func (*EMClientEmbedOptions) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{18}
}

func (x *EMClientEmbedOptions) GetIncludeTypeArray() []EMItemType {
	if x != nil {
		return x.IncludeTypeArray
	}
	return nil
}

type EMEmbedClientItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeArray   []EMItemType `protobuf:"varint,1,rep,name=typeArray,enum=hangouts.EMItemType" json:"typeArray,omitempty"`
	IdP         *string      `protobuf:"bytes,2,opt,name=id_p,json=idP" json:"id_p,omitempty"`
	CanonicalId *string      `protobuf:"bytes,3,opt,name=canonicalId" json:"canonicalId,omitempty"`
	Signature   *string      `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	RenderId    *string      `protobuf:"bytes,8,opt,name=renderId" json:"renderId,omitempty"`
	// Extensions:
	GeoCoordinates *EMGeoCoordinates `protobuf:"bytes,27364648,opt,name=geoCoordinates" json:"geoCoordinates,omitempty"`
	ImageObject    *EMImageObject    `protobuf:"bytes,27535952,opt,name=imageObject" json:"imageObject,omitempty"`
	Place          *EMPlace          `protobuf:"bytes,26807906,opt,name=place" json:"place,omitempty"`
	PostalAddress  *EMPostalAddress  `protobuf:"bytes,27364630,opt,name=postalAddress" json:"postalAddress,omitempty"`
	PlusPhoto      *EMPlusPhoto      `protobuf:"bytes,27639957,opt,name=plusPhoto" json:"plusPhoto,omitempty"`
	// ExtensionsV2:
	PlusPhotoV2      *EMPlusPhotoV2      `protobuf:"bytes,40655821,opt,name=plusPhotoV2" json:"plusPhotoV2,omitempty"`
	PlaceV2          *EMPlaceV2          `protobuf:"bytes,35825640,opt,name=placeV2" json:"placeV2,omitempty"`
	ThingV2          *EMThingV2          `protobuf:"bytes,39748951,opt,name=thingV2" json:"thingV2,omitempty"`
	PlusAudioV2      *EMPlusAudioV2      `protobuf:"bytes,62101782,opt,name=plusAudioV2" json:"plusAudioV2,omitempty"`
	PostalAddressV2  *EMPostalAddressV2  `protobuf:"bytes,36003298,opt,name=postalAddressV2" json:"postalAddressV2,omitempty"`
	GeoCoordinatesV2 *EMGeoCoordinatesV2 `protobuf:"bytes,36736749,opt,name=geoCoordinatesV2" json:"geoCoordinatesV2,omitempty"`
	ImageObjectV2    *EMImageObjectV2    `protobuf:"bytes,40265033,opt,name=imageObjectV2" json:"imageObjectV2,omitempty"`
}

func (x *EMEmbedClientItem) Reset() {
	*x = EMEmbedClientItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_embeds_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMEmbedClientItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMEmbedClientItem) ProtoMessage() {}

func (x *EMEmbedClientItem) ProtoReflect() protoreflect.Message {
	mi := &file_embeds_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMEmbedClientItem.ProtoReflect.Descriptor instead.
func (*EMEmbedClientItem) Descriptor() ([]byte, []int) {
	return file_embeds_proto_rawDescGZIP(), []int{19}
}

func (x *EMEmbedClientItem) GetTypeArray() []EMItemType {
	if x != nil {
		return x.TypeArray
	}
	return nil
}

func (x *EMEmbedClientItem) GetIdP() string {
	if x != nil && x.IdP != nil {
		return *x.IdP
	}
	return ""
}

func (x *EMEmbedClientItem) GetCanonicalId() string {
	if x != nil && x.CanonicalId != nil {
		return *x.CanonicalId
	}
	return ""
}

func (x *EMEmbedClientItem) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *EMEmbedClientItem) GetRenderId() string {
	if x != nil && x.RenderId != nil {
		return *x.RenderId
	}
	return ""
}

func (x *EMEmbedClientItem) GetGeoCoordinates() *EMGeoCoordinates {
	if x != nil {
		return x.GeoCoordinates
	}
	return nil
}

func (x *EMEmbedClientItem) GetImageObject() *EMImageObject {
	if x != nil {
		return x.ImageObject
	}
	return nil
}

func (x *EMEmbedClientItem) GetPlace() *EMPlace {
	if x != nil {
		return x.Place
	}
	return nil
}

func (x *EMEmbedClientItem) GetPostalAddress() *EMPostalAddress {
	if x != nil {
		return x.PostalAddress
	}
	return nil
}

func (x *EMEmbedClientItem) GetPlusPhoto() *EMPlusPhoto {
	if x != nil {
		return x.PlusPhoto
	}
	return nil
}

func (x *EMEmbedClientItem) GetPlusPhotoV2() *EMPlusPhotoV2 {
	if x != nil {
		return x.PlusPhotoV2
	}
	return nil
}

func (x *EMEmbedClientItem) GetPlaceV2() *EMPlaceV2 {
	if x != nil {
		return x.PlaceV2
	}
	return nil
}

func (x *EMEmbedClientItem) GetThingV2() *EMThingV2 {
	if x != nil {
		return x.ThingV2
	}
	return nil
}

func (x *EMEmbedClientItem) GetPlusAudioV2() *EMPlusAudioV2 {
	if x != nil {
		return x.PlusAudioV2
	}
	return nil
}

func (x *EMEmbedClientItem) GetPostalAddressV2() *EMPostalAddressV2 {
	if x != nil {
		return x.PostalAddressV2
	}
	return nil
}

func (x *EMEmbedClientItem) GetGeoCoordinatesV2() *EMGeoCoordinatesV2 {
	if x != nil {
		return x.GeoCoordinatesV2
	}
	return nil
}

func (x *EMEmbedClientItem) GetImageObjectV2() *EMImageObjectV2 {
	if x != nil {
		return x.ImageObjectV2
	}
	return nil
}

var File_embeds_proto protoreflect.FileDescriptor

var file_embeds_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x22, 0xf1, 0x04, 0x0a, 0x07, 0x45, 0x4d, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x12, 0x10, 0x0a,
	0x03, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12,
	0x33, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x50, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x47,
	0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x03, 0x67,
	0x65, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x52, 0x4c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x78,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xe2, 0x03, 0x0a,
	0x07, 0x45, 0x4d, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x12,
	0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x45, 0x4d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61,
	0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x13, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x45, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x11,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x22, 0xdd, 0x01, 0x0a, 0x10, 0x45, 0x4d, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55,
	0x52, 0x4c, 0x12, 0x4d, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x22, 0xf6, 0x02, 0x0a, 0x0f, 0x45, 0x4d, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x42,
	0x6f, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x78, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x4d, 0x0a, 0x13, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xf1, 0x06, 0x0a, 0x09, 0x45,
	0x4d, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x12,
	0x31, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55,
	0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x3d, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x44, 0x0a, 0x1d, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x46,
	0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64,
	0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x46, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x64,
	0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x46, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x46, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x4d, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xc9,
	0x06, 0x0a, 0x0b, 0x45, 0x4d, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x35,
	0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x62,
	0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x52, 0x4c, 0x12, 0x36, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12, 0x3c, 0x0a, 0x19, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12, 0x38, 0x0a, 0x17, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x6f, 0x78, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x6f, 0x78, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x70, 0x69,
	0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x6e, 0x65, 0x70, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d,
	0x50, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x4d, 0x0a, 0x13, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x22, 0xf7, 0x01, 0x0a, 0x08, 0x45,
	0x4d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x62, 0x66,
	0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4d, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x04, 0x0a, 0x0d, 0x45, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x52,
	0x4c, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x45, 0x4d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x45, 0x4d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x50, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x78, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x78, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x22, 0x8b, 0x09, 0x0a, 0x09, 0x45, 0x4d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x56,
	0x32, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69,
	0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45,
	0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45,
	0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x67, 0x65, 0x6f,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f,
	0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x45,
	0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x70, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x50, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x78,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x69, 0x73, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x8b, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x42, 0x79, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x98, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x9a, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x9f, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52,
	0x4c, 0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x45, 0x4d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x6f, 0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x50, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x62, 0x6f, 0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x50, 0x78, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x6f, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x6e, 0x63, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x6e,
	0x63, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x78, 0x22, 0xb7, 0x07, 0x0a, 0x11, 0x45, 0x4d, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x55,
	0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12,
	0x3d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x12, 0x49, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x42, 0x6f, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x78,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x4e, 0x0a, 0x13,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x9a, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x9f, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x22,
	0x82, 0x06, 0x0a, 0x12, 0x45, 0x4d, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x73, 0x56, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x12, 0x32, 0x0a,
	0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x45, 0x4d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52,
	0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64,
	0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x11,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52,
	0x4c, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18,
	0xfe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x9a, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x27, 0x0a, 0x0e, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x9f, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x52, 0x4c, 0x22, 0xbf, 0x05, 0x0a, 0x09, 0x45, 0x4d, 0x54, 0x68, 0x69, 0x6e, 0x67,
	0x56, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45,
	0x4d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45,
	0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52,
	0x4c, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x52, 0x4c, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x9a,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x27, 0x0a,
	0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18,
	0x9f, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x22, 0xdd, 0x10, 0x0a, 0x0d, 0x45, 0x4d, 0x50, 0x6c, 0x75,
	0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x56, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x12,
	0x32, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69,
	0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x3d, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x17, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x44, 0x0a, 0x1d, 0x75, 0x6e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d,
	0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3c, 0x0a,
	0x19, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x19, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x1a, 0x70,
	0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x1a, 0x70, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x50, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55,
	0x52, 0x4c, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x62, 0x66, 0x75, 0x73,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x2a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x76,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x52, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x53, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12,
	0x25, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x55, 0x52, 0x4c,
	0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x12, 0x2f, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xf9, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0xfc, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b,
	0x65, 0x79, 0x18, 0x82, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x9a, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x27, 0x0a, 0x0e,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x9f,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x1f, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0xa1, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x9c, 0x06, 0x0a, 0x0a, 0x45, 0x4d, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x12, 0x32, 0x0a, 0x14,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x45, 0x4d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x46,
	0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f,
	0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55,
	0x52, 0x4c, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x9a, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x27, 0x0a, 0x0e,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x9f,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x22, 0xb7, 0x0f, 0x0a, 0x0f, 0x45, 0x4d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x3d, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x17, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x44, 0x0a, 0x1d, 0x75, 0x6e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x1d, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3c,
	0x0a, 0x19, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x1a,
	0x70, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x1a, 0x70, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3a, 0x0a, 0x18,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x52,
	0x4c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x55, 0x52, 0x4c, 0x12, 0x4f, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x2a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x14,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x76, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61,
	0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x52, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x3d, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x53,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0xb9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65,
	0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x25,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0xbd, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2f, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x06,
	0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x9a, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x9f, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x1f,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0xa1, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0xd7, 0x0d, 0x0a, 0x0b, 0x45, 0x4d, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x56, 0x32, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52,
	0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64,
	0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x52, 0x4c, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x44,
	0x0a, 0x1d, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x46, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x46,
	0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x46,
	0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x46, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x46, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x45,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x2a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45,
	0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55,
	0x52, 0x4c, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x53, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x15, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1f, 0x0a, 0x0a, 0x69, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0xbe, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xf9, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0xfc, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c,
	0x18, 0x9a, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x12,
	0x27, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52,
	0x4c, 0x18, 0x9f, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x1f, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0xa1, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xe9, 0x13, 0x0a, 0x0d, 0x45, 0x4d,
	0x50, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x56, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x55,
	0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x65, 0x64, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12,
	0x3d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x44, 0x0a, 0x1d, 0x75, 0x6e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x1d, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3e,
	0x0a, 0x1a, 0x70, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x1a, 0x70, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3a,
	0x0a, 0x18, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x18, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45,
	0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x55, 0x52, 0x4c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x62,
	0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x70, 0x69,
	0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x6e, 0x65, 0x70, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12,
	0x4f, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x14, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x52, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x55, 0x52, 0x4c,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x55, 0x52, 0x4c,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x45, 0x0a, 0x0f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x53, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x60, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6e, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0xbf, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x18, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x2f, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0xfe,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x82, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x17,
	0x0a, 0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x9a, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x37, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52,
	0x4c, 0x18, 0x9b, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52, 0x4c,
	0x12, 0x3d, 0x0a, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x9c, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12,
	0x39, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x6f, 0x78, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x9d, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x6f, 0x78, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x12, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c,
	0x18, 0x9e, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x27, 0x0a, 0x0e, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x9f, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x52, 0x4c, 0x12, 0x1f, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0xa1, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x58, 0x0a, 0x14, 0x45, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a,
	0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x45, 0x4d, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22,
	0x9e, 0x07, 0x0a, 0x11, 0x45, 0x4d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x50, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x65, 0x6f, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0xa8, 0x9a, 0x86, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45,
	0x4d, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x0e, 0x67, 0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0xd0,
	0xd4, 0x90, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x45, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a,
	0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0xe2, 0x9c, 0xe4, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x96, 0x9a, 0x86, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45,
	0x4d, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a,
	0x09, 0x70, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x95, 0x81, 0x97, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45,
	0x4d, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x70, 0x6c, 0x75, 0x73,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x56, 0x32, 0x18, 0xcd, 0xb7, 0xb1, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x50, 0x6c, 0x75, 0x73, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x56, 0x32, 0x52, 0x0b, 0x70, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x56, 0x32, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x56, 0x32, 0x18, 0xe8,
	0xcf, 0x8a, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x45, 0x4d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x56, 0x32, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x56, 0x32, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x56, 0x32,
	0x18, 0xd7, 0x8a, 0xfa, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x52, 0x07,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x73, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x56, 0x32, 0x18, 0x96, 0xb2, 0xce, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x50, 0x6c, 0x75,
	0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x56, 0x32, 0x52, 0x0b, 0x70, 0x6c, 0x75, 0x73, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x56, 0x32, 0x12, 0x48, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x32, 0x18, 0xe2, 0xbb, 0x95, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x50,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x32, 0x52, 0x0f,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x32, 0x12,
	0x4b, 0x0a, 0x10, 0x67, 0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x56, 0x32, 0x18, 0xed, 0x9d, 0xc2, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x56, 0x32, 0x52, 0x10, 0x67, 0x65, 0x6f, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x56, 0x32, 0x12, 0x42, 0x0a, 0x0d,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x18, 0xc9, 0xca,
	0x99, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x45, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56,
	0x32, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32,
	0x2a, 0xc7, 0x3e, 0x0a, 0x0a, 0x45, 0x4d, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x10, 0xff, 0x02, 0x12,
	0x0d, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0x9f, 0x03, 0x12, 0x1a,
	0x0a, 0x15, 0x50, 0x6c, 0x75, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xb8, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x48, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x10, 0xfe, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xb6, 0x01, 0x12, 0x11,
	0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x32, 0x10, 0xbb,
	0x03, 0x12, 0x11, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x10, 0xc3, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0xde, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x76, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x10, 0x20, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x10, 0xc9, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6b, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xdf, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61,
	0x6b, 0x65, 0x72, 0x79, 0x10, 0x6c, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x67, 0x12, 0x14, 0x0a,
	0x0f, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x32,
	0x10, 0xd6, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x61, 0x67, 0x61, 0x7a, 0x69, 0x6e, 0x65, 0x56,
	0x32, 0x10, 0x82, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0xd8, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xc3, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x3f, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x10, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x10, 0xf2, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x10, 0xec, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x61, 0x72,
	0x6f, 0x75, 0x73, 0x65, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x10, 0xf3, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x10, 0x8c, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x42, 0x75, 0x64, 0x64, 0x68, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x65, 0x10, 0xa6, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xa1, 0x03,
	0x12, 0x13, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x32, 0x10, 0xa9, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x6f, 0x6f, 0x64, 0x45, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x6b, 0x12, 0x15, 0x0a, 0x11,
	0x42, 0x61, 0x6e, 0x6b, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x10, 0x69, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x81,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x41, 0x71, 0x75, 0x61, 0x72, 0x69, 0x75, 0x6d, 0x10, 0x92, 0x02,
	0x12, 0x13, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x10, 0xc3, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x67, 0x56, 0x32, 0x10,
	0x92, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x48, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x68, 0x6f, 0x70, 0x10,
	0xbd, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x10, 0xee, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0xe0, 0x01, 0x12, 0x13, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10,
	0xa3, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x10, 0xf7, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x56, 0x32, 0x10, 0xc0,
	0x03, 0x12, 0x15, 0x0a, 0x10, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x56, 0x32, 0x10, 0x9c, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x6c, 0x75, 0x73,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x10, 0xb5, 0x03,
	0x12, 0x11, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32,
	0x10, 0xe9, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e,
	0x74, 0x10, 0x72, 0x12, 0x0d, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x10,
	0x91, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x32, 0x10, 0xb3, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65,
	0x10, 0x23, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x65, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x79, 0x10, 0x97,
	0x02, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x32, 0x10, 0xa0, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x54, 0x6f, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x10, 0xcc, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x10, 0xc6, 0x02, 0x12, 0x0a,
	0x0a, 0x05, 0x42, 0x65, 0x61, 0x63, 0x68, 0x10, 0x93, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x72,
	0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x10, 0x61, 0x12, 0x11, 0x0a, 0x0c, 0x4a, 0x65,
	0x77, 0x65, 0x6c, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xbf, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0xcb, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x16, 0x12, 0x15, 0x0a,
	0x10, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x10, 0xb7, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x73, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x56, 0x32, 0x10, 0xb6, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76,
	0x61, 0x6c, 0x10, 0x39, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x10, 0xbf, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x72, 0x79, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x10, 0x45, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x56, 0x32, 0x10, 0xe3, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x56, 0x32, 0x10, 0xd4, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x10, 0x5b, 0x12, 0x0d, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x10, 0xe5, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x10,
	0xcf, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x10, 0x29, 0x12, 0x0c, 0x0a, 0x07, 0x50, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x84,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x61, 0x79, 0x53, 0x70, 0x61, 0x10, 0x78, 0x12, 0x12, 0x0a,
	0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x10, 0xf0,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x10, 0x2a, 0x12,
	0x11, 0x0a, 0x0c, 0x42, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x65, 0x79, 0x10,
	0xa6, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xae, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x43, 0x12, 0x0f, 0x0a, 0x0a, 0x54, 0x76, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x56, 0x32, 0x10, 0x8a, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x69, 0x6e, 0x10, 0x8a, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xb1, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32,
	0x10, 0x85, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x6f, 0x75, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0xfd, 0x01, 0x12, 0x1c,
	0x0a, 0x17, 0x47, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x10, 0xd3, 0x01, 0x12, 0x12, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xb4, 0x01,
	0x12, 0x12, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x10, 0xfb, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10,
	0x07, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x7f, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x67, 0x65, 0x10, 0x2b, 0x12, 0x10, 0x0a, 0x0b, 0x50, 0x6c, 0x75,
	0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x56, 0x32, 0x10, 0xd8, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57,
	0x70, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x10, 0x33, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x56, 0x32, 0x10, 0xfc, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xb3, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x61, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x3d, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f,
	0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x42, 0x12, 0x1e, 0x0a, 0x19, 0x50,
	0x6c, 0x75, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0x9e, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x50,
	0x61, 0x72, 0x6b, 0x10, 0xa2, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x32, 0x10, 0x88, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x41, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0x97, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x18,
	0x12, 0x12, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56,
	0x32, 0x10, 0xd3, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xed, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x10, 0x46, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x13, 0x12, 0x17,
	0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x77, 0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6f, 0x6c, 0x10, 0xaa, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x56, 0x65, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x61, 0x72, 0x65, 0x10, 0x94, 0x01, 0x12, 0x10, 0x0a, 0x0b,
	0x54, 0x76, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x56, 0x32, 0x10, 0x90, 0x03, 0x12, 0x1a,
	0x0a, 0x15, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x74, 0x73,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0xa4, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xa0, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x73, 0x68, 0x65, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x10, 0xda, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x10, 0x56, 0x12, 0x14, 0x0a, 0x0f, 0x4c,
	0x6f, 0x64, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x88,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x32, 0x10, 0xa6, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x61, 0x66, 0x65, 0x4f, 0x72, 0x43,
	0x6f, 0x66, 0x66, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x6f, 0x12, 0x0d, 0x0a, 0x09, 0x48,
	0x61, 0x69, 0x72, 0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x10, 0x79, 0x12, 0x10, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xaa, 0x03, 0x12, 0x11, 0x0a, 0x0c,
	0x57, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xa8, 0x03, 0x12,
	0x0b, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x10, 0x9d, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x37, 0x12, 0x0d, 0x0a, 0x08,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x10, 0xe3, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x10, 0x5e, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0c, 0x45, 0x6d, 0x6f, 0x74,
	0x69, 0x73, 0x68, 0x61, 0x72, 0x65, 0x56, 0x32, 0x10, 0xfe, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x61, 0x70, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x09, 0x54, 0x61, 0x78, 0x69, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x10, 0xb2, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x56, 0x32, 0x10, 0x96, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x67,
	0x65, 0x4f, 0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x10, 0x44, 0x12,
	0x11, 0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10,
	0x99, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x32, 0x10, 0x98, 0x03, 0x12,
	0x10, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x10, 0x82,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x54, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x32, 0x12,
	0x1a, 0x0a, 0x15, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xbc, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x10, 0x90, 0x01, 0x12,
	0x19, 0x0a, 0x14, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x10, 0xc1, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x61,
	0x74, 0x74, 0x6f, 0x6f, 0x50, 0x61, 0x72, 0x6c, 0x6f, 0x72, 0x10, 0x7c, 0x12, 0x12, 0x0a, 0x0d,
	0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x10, 0x83, 0x01,
	0x12, 0x0b, 0x0a, 0x06, 0x42, 0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x10, 0xf9, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x10, 0x19, 0x12, 0x1b, 0x0a,
	0x17, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x41, 0x6e, 0x64, 0x42, 0x65, 0x61, 0x75, 0x74, 0x79,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x76, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x75,
	0x74, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x4e, 0x12, 0x12, 0x0a, 0x0e,
	0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x2d,
	0x12, 0x0c, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x56, 0x32, 0x10, 0xef, 0x02, 0x12, 0x12,
	0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x10,
	0xd2, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10,
	0x8e, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x69, 0x76, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x4f,
	0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x10, 0xbc, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x73,
	0x69, 0x6e, 0x6f, 0x10, 0x62, 0x12, 0x0e, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x56, 0x32, 0x10, 0x87, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x56, 0x32, 0x10, 0xf5, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe1,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x61, 0x69, 0x6c, 0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x10, 0x7b,
	0x12, 0x18, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x8d, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x61,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xb5, 0x01, 0x12,
	0x13, 0x0a, 0x0e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x56,
	0x32, 0x10, 0xe4, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x56, 0x32, 0x10, 0x83, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x43, 0x61, 0x72, 0x65, 0x10, 0x57, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x07,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x56, 0x32, 0x10, 0xf2, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x6d, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x75, 0x6d, 0x10, 0x98, 0x02, 0x12, 0x14, 0x0a, 0x0f,
	0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x10,
	0x80, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x10, 0x84, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x43, 0x61, 0x6e, 0x61, 0x6c, 0x10, 0xb7, 0x02, 0x12,
	0x11, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10,
	0xab, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe7,
	0x01, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x64, 0x69, 0x75, 0x6d, 0x4f, 0x72, 0x41, 0x72,
	0x65, 0x6e, 0x61, 0x10, 0xad, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10,
	0x8f, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x10, 0x55, 0x12, 0x23, 0x0a, 0x1e, 0x4c, 0x61, 0x6e, 0x64,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x4f, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x10, 0xc2, 0x02, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32,
	0x10, 0xb0, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x10, 0x89, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x32,
	0x10, 0xf3, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x6a, 0x12, 0x0d, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x10, 0xe6, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x68, 0x75, 0x72, 0x63,
	0x68, 0x10, 0xa8, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x10, 0x26, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x6c, 0x75, 0x73,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x56, 0x32, 0x10, 0xdd, 0x02, 0x12,
	0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x10, 0xb3, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x64, 0x66, 0x6f, 0x72, 0x6d, 0x10,
	0xb5, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x10, 0xd0, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x10, 0x27, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x76, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x10, 0x22, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x2e,
	0x12, 0x13, 0x0a, 0x0e, 0x43, 0x61, 0x74, 0x68, 0x6f, 0x6c, 0x69, 0x63, 0x43, 0x68, 0x75, 0x72,
	0x63, 0x68, 0x10, 0xa7, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x5f, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x10, 0x51, 0x12, 0x16, 0x0a,
	0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x56, 0x32, 0x10, 0xf1, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xdc, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x10, 0xcc, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x4d, 0x6f, 0x73, 0x71, 0x75, 0x65, 0x10,
	0xaa, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x10, 0xed, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0xa3, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x10, 0xe8, 0x02, 0x12, 0x0f,
	0x0a, 0x0a, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x10, 0xa1, 0x02, 0x12,
	0x0d, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x32, 0x10, 0x84, 0x03, 0x12, 0x15,
	0x0a, 0x10, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x10, 0xb9, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x40, 0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x41, 0x6c, 0x62, 0x75, 0x6d, 0x56, 0x32, 0x10, 0xf4, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x10, 0x68, 0x12,
	0x20, 0x0a, 0x1b, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x85,
	0x02, 0x12, 0x13, 0x0a, 0x0e, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x10, 0xcd, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x10, 0xea,
	0x02, 0x12, 0x12, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x56, 0x32, 0x10, 0xe2, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65,
	0x79, 0x10, 0x97, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x6c,
	0x75, 0x62, 0x10, 0xac, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x56, 0x32, 0x10, 0xb9, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0x95, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x83, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x10, 0x52, 0x12,
	0x0f, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x10, 0x0d,
	0x12, 0x15, 0x0a, 0x10, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x56, 0x32, 0x10, 0xd7, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x65,
	0x6c, 0x10, 0x8a, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0xea,
	0x01, 0x12, 0x13, 0x0a, 0x0e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x10, 0xb9, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x95, 0x01,
	0x12, 0x14, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x6c, 0x45, 0x73, 0x74, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x10, 0xa1, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x56, 0x32, 0x10, 0xbf, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x6f, 0x6f,
	0x66, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x85,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x65, 0x64, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x36, 0x12, 0x1a, 0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x73, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x56, 0x32, 0x10, 0x8d, 0x03, 0x12, 0x14,
	0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0xeb, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x5c, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x75, 0x74,
	0x79, 0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x10, 0x77, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x67,
	0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x10, 0x1e, 0x12, 0x0e,
	0x0a, 0x09, 0x42, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xb1, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x61, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xc6, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x54, 0x65, 0x6c, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xce, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6f, 0x6f, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x3a, 0x12, 0x0e, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x56, 0x32, 0x10, 0xe1, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x73, 0x50,
	0x61, 0x67, 0x65, 0x56, 0x32, 0x10, 0x81, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x47, 0x79, 0x6d, 0x10, 0xa7, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x6f,
	0x75, 0x72, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x10, 0x9c, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x10, 0x17, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x32, 0x10, 0x91, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x69,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x5a, 0x12, 0x0b, 0x0a, 0x06, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x10, 0xe8, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x48, 0x6f, 0x61, 0x50,
	0x6c, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x10, 0x9a, 0x03, 0x12, 0x14, 0x0a,
	0x0f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0xec, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x91,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x10, 0xc0, 0x02,
	0x12, 0x13, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x56, 0x32, 0x10, 0x9b, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x10, 0xb6, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x65, 0x6e, 0x73, 0x43,
	0x6c, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xc1, 0x01, 0x12,
	0x13, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x10, 0xa4, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x32, 0x10, 0xf6, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x10, 0xf6, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x10, 0x47, 0x12, 0x11, 0x0a, 0x0c, 0x56, 0x69, 0x65,
	0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xba, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x10, 0xd1, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xca, 0x01,
	0x12, 0x15, 0x0a, 0x10, 0x41, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x10, 0xd2, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x4d, 0x61, 0x67, 0x61, 0x7a,
	0x69, 0x6e, 0x65, 0x10, 0xc8, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x9a, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x50, 0x61, 0x67, 0x65, 0x10, 0x2c, 0x12, 0x10, 0x0a, 0x0b, 0x48, 0x69, 0x6e, 0x64, 0x75, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x65, 0x10, 0xa9, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x72, 0x61, 0x77,
	0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x86, 0x02, 0x12, 0x19, 0x0a, 0x14,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x10, 0xc5, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x50, 0x6c, 0x75, 0x73, 0x50,
	0x61, 0x67, 0x65, 0x10, 0xc7, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x10, 0x87, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x42, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x94, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6b, 0x10, 0x0f, 0x12,
	0x14, 0x0a, 0x0f, 0x42, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x66, 0x61,
	0x73, 0x74, 0x10, 0x89, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x10, 0xbd, 0x03,
	0x12, 0x18, 0x0a, 0x13, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xae, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65,
	0x61, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x10, 0xbd, 0x02, 0x12,
	0x10, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x8b,
	0x02, 0x12, 0x09, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x10, 0x8d, 0x02, 0x12, 0x15, 0x0a, 0x10,
	0x53, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x10, 0xdb, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x10, 0xb2, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x50, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x10, 0x81, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69,
	0x6e, 0x56, 0x32, 0x10, 0xe5, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x10, 0x24, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x10, 0xfa, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x6f,
	0x75, 0x72, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0xd5, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x10, 0xc9,
	0x02, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xc2, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x70, 0x46, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x10, 0x31, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c,
	0x75, 0x73, 0x4f, 0x6e, 0x65, 0x73, 0x10, 0xd7, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x4a, 0x12, 0x10, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0xc5, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x9d, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xde,
	0x02, 0x12, 0x0c, 0x0a, 0x07, 0x56, 0x6f, 0x6c, 0x63, 0x61, 0x6e, 0x6f, 0x10, 0xc1, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x10, 0x66, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x2f,
	0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x6d, 0x69, 0x74, 0x68, 0x10, 0x82, 0x01,
	0x12, 0x13, 0x0a, 0x0e, 0x48, 0x6f, 0x6d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x10, 0xbe, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x10, 0x7d, 0x12, 0x0a, 0x0a, 0x05, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x10,
	0xe4, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xad, 0x03, 0x12, 0x0c, 0x0a, 0x07,
	0x44, 0x65, 0x6e, 0x74, 0x69, 0x73, 0x74, 0x10, 0x8e, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x4e, 0x75,
	0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0xf1, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xaf, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x88, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xa2, 0x03, 0x12, 0x15, 0x0a,
	0x10, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x56,
	0x32, 0x10, 0x89, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xb0, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x10, 0x49, 0x12, 0x10, 0x0a, 0x0b, 0x42, 0x75, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x32, 0x10, 0xa5, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x1a, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x75, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x10, 0x4f, 0x12, 0x0f, 0x0a, 0x0a, 0x50,
	0x6c, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x32, 0x10, 0x86, 0x03, 0x12, 0x1b, 0x0a, 0x16,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xa5, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x10, 0xe0, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x6f, 0x6f, 0x10, 0xb4,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x57, 0x61, 0x73, 0x68, 0x10, 0x53, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x10, 0x48, 0x12, 0x13,
	0x0a, 0x0e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32,
	0x10, 0xdf, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x61, 0x72, 0x4f, 0x72, 0x50, 0x75, 0x62, 0x10,
	0x6d, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x72, 0x79, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x4c, 0x61, 0x75, 0x6e, 0x64, 0x72, 0x79, 0x10, 0x58, 0x12, 0x13, 0x0a, 0x0e, 0x47,
	0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x10, 0xef, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x10, 0x50, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x68, 0x6f, 0x70, 0x10, 0x71, 0x12, 0x14, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x32, 0x10, 0xfb, 0x02, 0x12, 0x0e, 0x0a, 0x09,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x10, 0x93, 0x01, 0x12, 0x0f, 0x0a, 0x0a,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x10, 0x99, 0x02, 0x12, 0x15, 0x0a,
	0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56,
	0x32, 0x10, 0xe6, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x70, 0x41, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x10, 0x30, 0x12, 0x10, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x10, 0x94, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x76, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x65, 0x6e, 0x6e, 0x69, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x10, 0xae, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x56, 0x32, 0x10, 0xfa, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x78, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0x9d, 0x03, 0x12, 0x0d, 0x0a,
	0x08, 0x50, 0x61, 0x77, 0x6e, 0x53, 0x68, 0x6f, 0x70, 0x10, 0xc7, 0x01, 0x12, 0x14, 0x0a, 0x0f,
	0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10,
	0xa2, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x4d, 0x6f, 0x74, 0x65, 0x6c, 0x10, 0x8c, 0x01, 0x12, 0x0b,
	0x0a, 0x06, 0x4d, 0x75, 0x73, 0x65, 0x75, 0x6d, 0x10, 0xa0, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x10, 0x4d, 0x12, 0x0c, 0x0a, 0x07, 0x45, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x79, 0x10, 0x9e,
	0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x61, 0x6d, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x10,
	0x96, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x42, 0x75, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x95, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x65, 0x64, 0x79, 0x43, 0x6c, 0x75, 0x62, 0x10, 0x63,
	0x12, 0x13, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x10, 0xa5, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x10, 0xce, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x10, 0xc4, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x56, 0x32, 0x10, 0xbe, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10,
	0xac, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x10, 0x1c, 0x12, 0x0d, 0x0a, 0x08, 0x50, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xc8,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x61, 0x66, 0x65, 0x10, 0x86, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x0c,
	0x12, 0x1d, 0x0a, 0x18, 0x54, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10, 0xcf, 0x01, 0x12,
	0x0b, 0x0a, 0x06, 0x52, 0x56, 0x50, 0x61, 0x72, 0x6b, 0x10, 0xad, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x67, 0x65, 0x10, 0x25, 0x12, 0x0e,
	0x0a, 0x09, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x56, 0x32, 0x10, 0xd1, 0x02, 0x12, 0x12,
	0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10,
	0xee, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x10, 0xff, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x42, 0x6c, 0x6f,
	0x67, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x10, 0x93, 0x03, 0x12, 0x12, 0x0a,
	0x0d, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xbc,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x10,
	0x75, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x10, 0x65,
	0x12, 0x0d, 0x0a, 0x08, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x10, 0x92, 0x01, 0x12,
	0x0f, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xac, 0x02,
	0x12, 0x12, 0x0a, 0x0d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x10, 0xf5, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x73, 0x68,
	0x65, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x10, 0xeb, 0x02, 0x12, 0x14,
	0x0a, 0x0f, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56,
	0x32, 0x10, 0xe7, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x53, 0x68,
	0x65, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x4c, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x66, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x10, 0xa3, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x6c, 0x61,
	0x79, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x10, 0xc4, 0x02, 0x12, 0x14,
	0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x32, 0x10, 0xaf, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xc2, 0x03, 0x12, 0x0c, 0x0a,
	0x07, 0x46, 0x6c, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x10, 0xb8, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x53,
	0x6b, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x10, 0xab, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0x64, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x34,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x38, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xa7, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x47, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xba, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10,
	0x59, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x3e, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x35, 0x12, 0x10, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x10, 0x87, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x4c, 0x61, 0x6b,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x57, 0x61, 0x74, 0x65, 0x72, 0x10, 0xb8, 0x02, 0x12,
	0x0e, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x61, 0x67, 0x6f, 0x67, 0x75, 0x65, 0x10, 0xab, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x67, 0x79, 0x10, 0x5d, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x09, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x10, 0xf9, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x50, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0xe2, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xb4, 0x03, 0x12, 0x09, 0x0a,
	0x04, 0x4d, 0x61, 0x73, 0x73, 0x10, 0xe9, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x3b, 0x12, 0x13, 0x0a, 0x0e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0xd9, 0x01,
	0x12, 0x0e, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0xca, 0x02,
	0x12, 0x0f, 0x0a, 0x0a, 0x47, 0x6f, 0x6c, 0x66, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x10, 0xa8,
	0x01, 0x12, 0x09, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x64, 0x10, 0xba, 0x02, 0x12, 0x13, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x56, 0x32, 0x10, 0xd0,
	0x02, 0x12, 0x18, 0x0a, 0x13, 0x4c, 0x65, 0x67, 0x69, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x9f, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x10, 0x60, 0x12, 0x12,
	0x0a, 0x0d, 0x53, 0x75, 0x62, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0xb1, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x69, 0x76, 0x69, 0x63, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x10, 0x90, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xb2, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x57, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x10, 0x73, 0x12, 0x13, 0x0a, 0x0e, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x10, 0xfc, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x56, 0x32, 0x10, 0x8f, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x72, 0x65, 0x77, 0x65, 0x72,
	0x79, 0x10, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x75, 0x6c, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x10, 0x1f, 0x12, 0x15, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x56, 0x32, 0x10, 0x80, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x10, 0xaf, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x10, 0x8e, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x48, 0x76, 0x61, 0x63, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x80, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x10, 0xd4, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x10, 0x28, 0x12, 0x13, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x10, 0xa4, 0x03, 0x12, 0x0d, 0x0a,
	0x08, 0x43, 0x69, 0x74, 0x79, 0x48, 0x61, 0x6c, 0x6c, 0x10, 0x9b, 0x02, 0x12, 0x0d, 0x0a, 0x08,
	0x47, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x70, 0x65, 0x10, 0xf0, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c,
	0x69, 0x71, 0x75, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xc0, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6c, 0x75, 0x62, 0x10, 0x7a, 0x12, 0x0e, 0x0a,
	0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x66, 0x61, 0x6c, 0x6c, 0x10, 0xbe, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x3c, 0x12, 0x0d, 0x0a,
	0x08, 0x54, 0x69, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x10, 0xcb, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x56, 0x32, 0x10,
	0xb7, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x10, 0x4b, 0x12, 0x0a, 0x0a, 0x05, 0x48, 0x6f, 0x74, 0x65, 0x6c, 0x10, 0x8b,
	0x01, 0x12, 0x0e, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x69, 0x72, 0x10, 0xbb,
	0x02, 0x12, 0x1b, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x75, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x10, 0x8b, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x46, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75,
	0x72, 0x61, 0x6e, 0x74, 0x10, 0x70, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x61, 0x6e, 0x10, 0x7e, 0x12, 0x11, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x63, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xbb, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x50, 0x6c,
	0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0xf4, 0x01, 0x2a, 0x6a, 0x0a, 0x1a, 0x45, 0x4d,
	0x50, 0x6c, 0x75, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x10, 0x00,
}

var (
	file_embeds_proto_rawDescOnce sync.Once
	file_embeds_proto_rawDescData = file_embeds_proto_rawDesc
)

func file_embeds_proto_rawDescGZIP() []byte {
	file_embeds_proto_rawDescOnce.Do(func() {
		file_embeds_proto_rawDescData = protoimpl.X.CompressGZIP(file_embeds_proto_rawDescData)
	})
	return file_embeds_proto_rawDescData
}

var file_embeds_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_embeds_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_embeds_proto_goTypes = []interface{}{
	(EMItemType)(0),                 // 0: hangouts.EMItemType
	(EMPlusPhoto_PhotoMediaType)(0), // 1: hangouts.EMPlusPhoto_PhotoMediaType
	(*EMPlace)(nil),                 // 2: hangouts.EMPlace
	(*EMThing)(nil),                 // 3: hangouts.EMThing
	(*EMGeoCoordinates)(nil),        // 4: hangouts.EMGeoCoordinates
	(*EMPostalAddress)(nil),         // 5: hangouts.EMPostalAddress
	(*EMWebPage)(nil),               // 6: hangouts.EMWebPage
	(*EMPlusPhoto)(nil),             // 7: hangouts.EMPlusPhoto
	(*EMPerson)(nil),                // 8: hangouts.EMPerson
	(*EMImageObject)(nil),           // 9: hangouts.EMImageObject
	(*EMPlaceV2)(nil),               // 10: hangouts.EMPlaceV2
	(*EMThumbnail)(nil),             // 11: hangouts.EMThumbnail
	(*EMPostalAddressV2)(nil),       // 12: hangouts.EMPostalAddressV2
	(*EMGeoCoordinatesV2)(nil),      // 13: hangouts.EMGeoCoordinatesV2
	(*EMThingV2)(nil),               // 14: hangouts.EMThingV2
	(*EMPlusAudioV2)(nil),           // 15: hangouts.EMPlusAudioV2
	(*EMPersonV2)(nil),              // 16: hangouts.EMPersonV2
	(*EMImageObjectV2)(nil),         // 17: hangouts.EMImageObjectV2
	(*EMWebPageV2)(nil),             // 18: hangouts.EMWebPageV2
	(*EMPlusPhotoV2)(nil),           // 19: hangouts.EMPlusPhotoV2
	(*EMClientEmbedOptions)(nil),    // 20: hangouts.EMClientEmbedOptions
	(*EMEmbedClientItem)(nil),       // 21: hangouts.EMEmbedClientItem
}
var file_embeds_proto_depIdxs = []int32{
	5,   // 0: hangouts.EMPlace.address:type_name -> hangouts.EMPostalAddress
	4,   // 1: hangouts.EMPlace.geo:type_name -> hangouts.EMGeoCoordinates
	21,  // 2: hangouts.EMPlace.representativeImage:type_name -> hangouts.EMEmbedClientItem
	21,  // 3: hangouts.EMPlace.aggregateRating:type_name -> hangouts.EMEmbedClientItem
	11,  // 4: hangouts.EMThing.proxiedImage:type_name -> hangouts.EMThumbnail
	21,  // 5: hangouts.EMThing.authorArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 6: hangouts.EMThing.representativeImage:type_name -> hangouts.EMEmbedClientItem
	9,   // 7: hangouts.EMThing.relatedImageArray:type_name -> hangouts.EMImageObject
	21,  // 8: hangouts.EMGeoCoordinates.representativeImage:type_name -> hangouts.EMEmbedClientItem
	21,  // 9: hangouts.EMPostalAddress.representativeImage:type_name -> hangouts.EMEmbedClientItem
	21,  // 10: hangouts.EMWebPage.about:type_name -> hangouts.EMEmbedClientItem
	11,  // 11: hangouts.EMWebPage.proxiedImage:type_name -> hangouts.EMThumbnail
	21,  // 12: hangouts.EMWebPage.authorArray:type_name -> hangouts.EMEmbedClientItem
	9,   // 13: hangouts.EMWebPage.relatedImageArray:type_name -> hangouts.EMImageObject
	21,  // 14: hangouts.EMWebPage.representativeImage:type_name -> hangouts.EMEmbedClientItem
	9,   // 15: hangouts.EMPlusPhoto.thumbnail:type_name -> hangouts.EMImageObject
	1,   // 16: hangouts.EMPlusPhoto.mediaType:type_name -> hangouts.EMPlusPhoto_PhotoMediaType
	21,  // 17: hangouts.EMPlusPhoto.representativeImage:type_name -> hangouts.EMEmbedClientItem
	21,  // 18: hangouts.EMPerson.representativeImage:type_name -> hangouts.EMEmbedClientItem
	11,  // 19: hangouts.EMImageObject.proxiedImage:type_name -> hangouts.EMThumbnail
	2,   // 20: hangouts.EMImageObject.contentLocation:type_name -> hangouts.EMPlace
	21,  // 21: hangouts.EMImageObject.about:type_name -> hangouts.EMEmbedClientItem
	21,  // 22: hangouts.EMImageObject.representativeImage:type_name -> hangouts.EMEmbedClientItem
	11,  // 23: hangouts.EMPlaceV2.proxiedImage:type_name -> hangouts.EMThumbnail
	21,  // 24: hangouts.EMPlaceV2.authorArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 25: hangouts.EMPlaceV2.about:type_name -> hangouts.EMEmbedClientItem
	21,  // 26: hangouts.EMPlaceV2.relatedImageArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 27: hangouts.EMPlaceV2.address:type_name -> hangouts.EMEmbedClientItem
	21,  // 28: hangouts.EMPlaceV2.geo:type_name -> hangouts.EMEmbedClientItem
	21,  // 29: hangouts.EMPlaceV2.aggregateRating:type_name -> hangouts.EMEmbedClientItem
	21,  // 30: hangouts.EMPlaceV2.representativeImage:type_name -> hangouts.EMEmbedClientItem
	11,  // 31: hangouts.EMPostalAddressV2.proxiedImage:type_name -> hangouts.EMThumbnail
	21,  // 32: hangouts.EMPostalAddressV2.authorArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 33: hangouts.EMPostalAddressV2.about:type_name -> hangouts.EMEmbedClientItem
	21,  // 34: hangouts.EMPostalAddressV2.relatedImageArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 35: hangouts.EMPostalAddressV2.representativeImage:type_name -> hangouts.EMEmbedClientItem
	11,  // 36: hangouts.EMGeoCoordinatesV2.proxiedImage:type_name -> hangouts.EMThumbnail
	21,  // 37: hangouts.EMGeoCoordinatesV2.authorArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 38: hangouts.EMGeoCoordinatesV2.about:type_name -> hangouts.EMEmbedClientItem
	21,  // 39: hangouts.EMGeoCoordinatesV2.relatedImageArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 40: hangouts.EMGeoCoordinatesV2.representativeImage:type_name -> hangouts.EMEmbedClientItem
	11,  // 41: hangouts.EMThingV2.proxiedImage:type_name -> hangouts.EMThumbnail
	21,  // 42: hangouts.EMThingV2.authorArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 43: hangouts.EMThingV2.about:type_name -> hangouts.EMEmbedClientItem
	21,  // 44: hangouts.EMThingV2.relatedImageArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 45: hangouts.EMThingV2.representativeImage:type_name -> hangouts.EMEmbedClientItem
	11,  // 46: hangouts.EMPlusAudioV2.proxiedImage:type_name -> hangouts.EMThumbnail
	21,  // 47: hangouts.EMPlusAudioV2.authorArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 48: hangouts.EMPlusAudioV2.about:type_name -> hangouts.EMEmbedClientItem
	21,  // 49: hangouts.EMPlusAudioV2.relatedImageArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 50: hangouts.EMPlusAudioV2.contentLocation:type_name -> hangouts.EMEmbedClientItem
	21,  // 51: hangouts.EMPlusAudioV2.associatedMediaArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 52: hangouts.EMPlusAudioV2.aggregateRating:type_name -> hangouts.EMEmbedClientItem
	21,  // 53: hangouts.EMPlusAudioV2.offersArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 54: hangouts.EMPlusAudioV2.audio:type_name -> hangouts.EMEmbedClientItem
	21,  // 55: hangouts.EMPlusAudioV2.representativeImage:type_name -> hangouts.EMEmbedClientItem
	11,  // 56: hangouts.EMPersonV2.proxiedImage:type_name -> hangouts.EMThumbnail
	21,  // 57: hangouts.EMPersonV2.authorArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 58: hangouts.EMPersonV2.about:type_name -> hangouts.EMEmbedClientItem
	21,  // 59: hangouts.EMPersonV2.relatedImageArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 60: hangouts.EMPersonV2.representativeImage:type_name -> hangouts.EMEmbedClientItem
	11,  // 61: hangouts.EMImageObjectV2.proxiedImage:type_name -> hangouts.EMThumbnail
	21,  // 62: hangouts.EMImageObjectV2.authorArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 63: hangouts.EMImageObjectV2.about:type_name -> hangouts.EMEmbedClientItem
	21,  // 64: hangouts.EMImageObjectV2.relatedImageArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 65: hangouts.EMImageObjectV2.contentLocation:type_name -> hangouts.EMEmbedClientItem
	21,  // 66: hangouts.EMImageObjectV2.associatedMediaArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 67: hangouts.EMImageObjectV2.aggregateRating:type_name -> hangouts.EMEmbedClientItem
	21,  // 68: hangouts.EMImageObjectV2.offersArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 69: hangouts.EMImageObjectV2.audio:type_name -> hangouts.EMEmbedClientItem
	21,  // 70: hangouts.EMImageObjectV2.representativeImage:type_name -> hangouts.EMEmbedClientItem
	11,  // 71: hangouts.EMWebPageV2.proxiedImage:type_name -> hangouts.EMThumbnail
	21,  // 72: hangouts.EMWebPageV2.authorArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 73: hangouts.EMWebPageV2.about:type_name -> hangouts.EMEmbedClientItem
	21,  // 74: hangouts.EMWebPageV2.relatedImageArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 75: hangouts.EMWebPageV2.contentLocation:type_name -> hangouts.EMEmbedClientItem
	21,  // 76: hangouts.EMWebPageV2.associatedMediaArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 77: hangouts.EMWebPageV2.aggregateRating:type_name -> hangouts.EMEmbedClientItem
	21,  // 78: hangouts.EMWebPageV2.offersArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 79: hangouts.EMWebPageV2.audio:type_name -> hangouts.EMEmbedClientItem
	21,  // 80: hangouts.EMWebPageV2.representativeImage:type_name -> hangouts.EMEmbedClientItem
	11,  // 81: hangouts.EMPlusPhotoV2.proxiedImage:type_name -> hangouts.EMThumbnail
	21,  // 82: hangouts.EMPlusPhotoV2.authorArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 83: hangouts.EMPlusPhotoV2.about:type_name -> hangouts.EMEmbedClientItem
	21,  // 84: hangouts.EMPlusPhotoV2.relatedImageArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 85: hangouts.EMPlusPhotoV2.contentLocation:type_name -> hangouts.EMEmbedClientItem
	21,  // 86: hangouts.EMPlusPhotoV2.associatedMediaArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 87: hangouts.EMPlusPhotoV2.aggregateRating:type_name -> hangouts.EMEmbedClientItem
	21,  // 88: hangouts.EMPlusPhotoV2.offersArray:type_name -> hangouts.EMEmbedClientItem
	21,  // 89: hangouts.EMPlusPhotoV2.audio:type_name -> hangouts.EMEmbedClientItem
	21,  // 90: hangouts.EMPlusPhotoV2.representativeImage:type_name -> hangouts.EMEmbedClientItem
	0,   // 91: hangouts.EMClientEmbedOptions.includeTypeArray:type_name -> hangouts.EMItemType
	0,   // 92: hangouts.EMEmbedClientItem.typeArray:type_name -> hangouts.EMItemType
	4,   // 93: hangouts.EMEmbedClientItem.geoCoordinates:type_name -> hangouts.EMGeoCoordinates
	9,   // 94: hangouts.EMEmbedClientItem.imageObject:type_name -> hangouts.EMImageObject
	2,   // 95: hangouts.EMEmbedClientItem.place:type_name -> hangouts.EMPlace
	5,   // 96: hangouts.EMEmbedClientItem.postalAddress:type_name -> hangouts.EMPostalAddress
	7,   // 97: hangouts.EMEmbedClientItem.plusPhoto:type_name -> hangouts.EMPlusPhoto
	19,  // 98: hangouts.EMEmbedClientItem.plusPhotoV2:type_name -> hangouts.EMPlusPhotoV2
	10,  // 99: hangouts.EMEmbedClientItem.placeV2:type_name -> hangouts.EMPlaceV2
	14,  // 100: hangouts.EMEmbedClientItem.thingV2:type_name -> hangouts.EMThingV2
	15,  // 101: hangouts.EMEmbedClientItem.plusAudioV2:type_name -> hangouts.EMPlusAudioV2
	12,  // 102: hangouts.EMEmbedClientItem.postalAddressV2:type_name -> hangouts.EMPostalAddressV2
	13,  // 103: hangouts.EMEmbedClientItem.geoCoordinatesV2:type_name -> hangouts.EMGeoCoordinatesV2
	17,  // 104: hangouts.EMEmbedClientItem.imageObjectV2:type_name -> hangouts.EMImageObjectV2
	105, // [105:105] is the sub-list for method output_type
	105, // [105:105] is the sub-list for method input_type
	105, // [105:105] is the sub-list for extension type_name
	105, // [105:105] is the sub-list for extension extendee
	0,   // [0:105] is the sub-list for field type_name
}

func init() { file_embeds_proto_init() }
func file_embeds_proto_init() {
	if File_embeds_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_embeds_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMPlace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMThing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMGeoCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMPostalAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMWebPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMPlusPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMImageObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMPlaceV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMThumbnail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMPostalAddressV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMGeoCoordinatesV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMThingV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMPlusAudioV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMPersonV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMImageObjectV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMWebPageV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMPlusPhotoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMClientEmbedOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_embeds_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMEmbedClientItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_embeds_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_embeds_proto_goTypes,
		DependencyIndexes: file_embeds_proto_depIdxs,
		EnumInfos:         file_embeds_proto_enumTypes,
		MessageInfos:      file_embeds_proto_msgTypes,
	}.Build()
	File_embeds_proto = out.File
	file_embeds_proto_rawDesc = nil
	file_embeds_proto_goTypes = nil
	file_embeds_proto_depIdxs = nil
}
