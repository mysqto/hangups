// Code generated by protoc-gen-go. DO NOT EDIT.
// source: embeds.proto

package hangouts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EMItemType int32

const (
	EMItemType_CommentV2                      EMItemType = 383
	EMItemType_ActionV2                       EMItemType = 415
	EMItemType_PlusMediaCollectionV2          EMItemType = 440
	EMItemType_Hangout                        EMItemType = 254
	EMItemType_DepartmentStore                EMItemType = 182
	EMItemType_EntryPointV2                   EMItemType = 443
	EMItemType_HangoutQuote                   EMItemType = 451
	EMItemType_Enumeration                    EMItemType = 222
	EMItemType_TvEpisode                      EMItemType = 32
	EMItemType_ShoeStore                      EMItemType = 201
	EMItemType_BookFormatType                 EMItemType = 223
	EMItemType_Bakery                         EMItemType = 108
	EMItemType_AccountingService              EMItemType = 103
	EMItemType_PostalAddressV2                EMItemType = 342
	EMItemType_MagazineV2                     EMItemType = 386
	EMItemType_PresentationObject             EMItemType = 216
	EMItemType_Person                         EMItemType = 5
	EMItemType_MovieRentalStore               EMItemType = 195
	EMItemType_SportsEvent                    EMItemType = 63
	EMItemType_GovernmentOffice               EMItemType = 116
	EMItemType_Article                        EMItemType = 11
	EMItemType_FormObject                     EMItemType = 242
	EMItemType_DriveObjectV2                  EMItemType = 364
	EMItemType_CarouselFrame                  EMItemType = 243
	EMItemType_AdministrativeArea             EMItemType = 268
	EMItemType_BuddhistTemple                 EMItemType = 294
	EMItemType_ListenActionV2                 EMItemType = 417
	EMItemType_UpdateActionV2                 EMItemType = 425
	EMItemType_FoodEstablishment              EMItemType = 107
	EMItemType_BankOrCreditUnion              EMItemType = 105
	EMItemType_Unknown                        EMItemType = 257
	EMItemType_Aquarium                       EMItemType = 274
	EMItemType_PlayMusicTrack                 EMItemType = 323
	EMItemType_BlogV2                         EMItemType = 402
	EMItemType_HobbyShop                      EMItemType = 189
	EMItemType_PostalAddress                  EMItemType = 238
	EMItemType_ItemAvailability               EMItemType = 224
	EMItemType_CreateActionV2                 EMItemType = 419
	EMItemType_MusicRecordingV2               EMItemType = 375
	EMItemType_GoogleUserPhotoV2              EMItemType = 448
	EMItemType_YoutubeChannelV2               EMItemType = 412
	EMItemType_PlusMediaObjectV2              EMItemType = 437
	EMItemType_FormObjectV2                   EMItemType = 361
	EMItemType_Restaurant                     EMItemType = 114
	EMItemType_Optician                       EMItemType = 145
	EMItemType_PlanActionV2                   EMItemType = 435
	EMItemType_WebPage                        EMItemType = 35
	EMItemType_Cemetery                       EMItemType = 279
	EMItemType_ConsumeActionV2                EMItemType = 416
	EMItemType_ToyStore                       EMItemType = 204
	EMItemType_RecommendedPeople              EMItemType = 326
	EMItemType_Beach                          EMItemType = 275
	EMItemType_ArtGallery                     EMItemType = 97
	EMItemType_JewelryStore                   EMItemType = 191
	EMItemType_Recipe                         EMItemType = 29
	EMItemType_SquareInvite                   EMItemType = 331
	EMItemType_VideoObject                    EMItemType = 22
	EMItemType_ElectronicsStore               EMItemType = 183
	EMItemType_PlusAudioV2                    EMItemType = 438
	EMItemType_Festival                       EMItemType = 57
	EMItemType_Continent                      EMItemType = 319
	EMItemType_ElementarySchool               EMItemType = 69
	EMItemType_SquareV2                       EMItemType = 355
	EMItemType_PlaceV2                        EMItemType = 340
	EMItemType_Hospital                       EMItemType = 91
	EMItemType_Quantity                       EMItemType = 229
	EMItemType_ThingV2                        EMItemType = 335
	EMItemType_ContactPage                    EMItemType = 41
	EMItemType_Plumber                        EMItemType = 132
	EMItemType_DaySpa                         EMItemType = 120
	EMItemType_AudioObjectV2                  EMItemType = 368
	EMItemType_ItemPage                       EMItemType = 42
	EMItemType_BowlingAlley                   EMItemType = 166
	EMItemType_DiscoverActionV2               EMItemType = 430
	EMItemType_EducationalOrganization        EMItemType = 67
	EMItemType_TvSeriesV2                     EMItemType = 394
	EMItemType_Checkin                        EMItemType = 266
	EMItemType_WriteActionV2                  EMItemType = 433
	EMItemType_MobileApplicationV2            EMItemType = 389
	EMItemType_DeprecatedTourObject           EMItemType = 253
	EMItemType_GatedResidenceCommunity        EMItemType = 211
	EMItemType_ComputerStore                  EMItemType = 180
	EMItemType_ProductReview                  EMItemType = 251
	EMItemType_Product                        EMItemType = 7
	EMItemType_GeneralContractor              EMItemType = 127
	EMItemType_ProfilePage                    EMItemType = 43
	EMItemType_PlusPhotoV2                    EMItemType = 344
	EMItemType_WpSidebar                      EMItemType = 51
	EMItemType_StoryV2                        EMItemType = 380
	EMItemType_TrainStation                   EMItemType = 307
	EMItemType_SaleEvent                      EMItemType = 61
	EMItemType_Corporation                    EMItemType = 66
	EMItemType_PlusSoftwareApplicationV2      EMItemType = 414
	EMItemType_Park                           EMItemType = 290
	EMItemType_ProductReviewV2                EMItemType = 392
	EMItemType_VisualArtsEvent                EMItemType = 65
	EMItemType_PlusPhotoCollectionV2          EMItemType = 407
	EMItemType_MusicPlaylist                  EMItemType = 24
	EMItemType_ImageObjectV2                  EMItemType = 339
	EMItemType_BasicInteractionV2             EMItemType = 365
	EMItemType_HighSchool                     EMItemType = 70
	EMItemType_AudioObject                    EMItemType = 19
	EMItemType_PublicSwimmingPool             EMItemType = 170
	EMItemType_VeterinaryCare                 EMItemType = 148
	EMItemType_TvEpisodeV2                    EMItemType = 400
	EMItemType_PerformingArtsTheater          EMItemType = 292
	EMItemType_RadioStation                   EMItemType = 160
	EMItemType_SpreadsheetObject              EMItemType = 218
	EMItemType_MotorcycleRepair               EMItemType = 86
	EMItemType_LodgingBusiness                EMItemType = 136
	EMItemType_ReactActionV2                  EMItemType = 422
	EMItemType_CafeOrCoffeeShop               EMItemType = 111
	EMItemType_HairSalon                      EMItemType = 121
	EMItemType_AddActionV2                    EMItemType = 426
	EMItemType_WantActionV2                   EMItemType = 424
	EMItemType_Notary                         EMItemType = 157
	EMItemType_DanceEvent                     EMItemType = 55
	EMItemType_Language                       EMItemType = 227
	EMItemType_EntertainmentBusiness          EMItemType = 94
	EMItemType_Organization                   EMItemType = 4
	EMItemType_EmotishareV2                   EMItemType = 382
	EMItemType_Map                            EMItemType = 17
	EMItemType_TaxiStand                      EMItemType = 306
	EMItemType_EventTimeV2                    EMItemType = 406
	EMItemType_CollegeOrUniversity            EMItemType = 68
	EMItemType_PollOptionV2                   EMItemType = 409
	EMItemType_PollV2                         EMItemType = 408
	EMItemType_GoogleChart                    EMItemType = 258
	EMItemType_GasStation                     EMItemType = 84
	EMItemType_WpHeader                       EMItemType = 50
	EMItemType_SoftwareApplicationV2          EMItemType = 444
	EMItemType_MedicalClinic                  EMItemType = 144
	EMItemType_GoogleUserPhotoAlbum           EMItemType = 449
	EMItemType_TattooParlor                   EMItemType = 124
	EMItemType_MovingCompany                  EMItemType = 131
	EMItemType_BookV2                         EMItemType = 377
	EMItemType_MusicAlbum                     EMItemType = 25
	EMItemType_HealthAndBeautyBusiness        EMItemType = 118
	EMItemType_AutoBodyShop                   EMItemType = 78
	EMItemType_WebPageElement                 EMItemType = 45
	EMItemType_OfferV2                        EMItemType = 367
	EMItemType_MediaObjectV2                  EMItemType = 338
	EMItemType_GEvent                         EMItemType = 2
	EMItemType_ReservationV2                  EMItemType = 398
	EMItemType_RiverBodyOfWater               EMItemType = 316
	EMItemType_Casino                         EMItemType = 98
	EMItemType_ArticleV2                      EMItemType = 391
	EMItemType_MusicGroupV2                   EMItemType = 373
	EMItemType_OfferItemCondition             EMItemType = 225
	EMItemType_NailSalon                      EMItemType = 123
	EMItemType_MedicalOrganization            EMItemType = 141
	EMItemType_Painting                       EMItemType = 27
	EMItemType_ConvenienceStore               EMItemType = 181
	EMItemType_SquareInviteV2                 EMItemType = 356
	EMItemType_PlayObjectV2                   EMItemType = 387
	EMItemType_ChildCare                      EMItemType = 87
	EMItemType_MusicVideoObject               EMItemType = 21
	EMItemType_MovieV2                        EMItemType = 370
	EMItemType_Crematorium                    EMItemType = 280
	EMItemType_HangoutConsumer                EMItemType = 256
	EMItemType_MusicGroup                     EMItemType = 260
	EMItemType_Canal                          EMItemType = 311
	EMItemType_FindActionV2                   EMItemType = 427
	EMItemType_Duration                       EMItemType = 231
	EMItemType_StadiumOrArena                 EMItemType = 173
	EMItemType_State                          EMItemType = 271
	EMItemType_MotorcycleDealer               EMItemType = 85
	EMItemType_LandmarksOrHistoricalBuildings EMItemType = 322
	EMItemType_CommentActionV2                EMItemType = 432
	EMItemType_FileObject                     EMItemType = 265
	EMItemType_RatingV2                       EMItemType = 371
	EMItemType_InsuranceAgency                EMItemType = 106
	EMItemType_Distance                       EMItemType = 230
	EMItemType_Church                         EMItemType = 296
	EMItemType_CollectionPage                 EMItemType = 38
	EMItemType_PlusPhotoAlbumV2               EMItemType = 349
	EMItemType_ClothingStore                  EMItemType = 179
	EMItemType_Landform                       EMItemType = 309
	EMItemType_TravelAgency                   EMItemType = 208
	EMItemType_ImageGallery                   EMItemType = 39
	EMItemType_TvSeries                       EMItemType = 34
	EMItemType_SiteNavigationElement          EMItemType = 46
	EMItemType_CatholicChurch                 EMItemType = 295
	EMItemType_AdultEntertainment             EMItemType = 95
	EMItemType_AutoRental                     EMItemType = 81
	EMItemType_AggregateRatingV2              EMItemType = 369
	EMItemType_UserInteraction                EMItemType = 220
	EMItemType_LocalPlusPhotoAlbum            EMItemType = 332
	EMItemType_Mosque                         EMItemType = 298
	EMItemType_ContactPoint                   EMItemType = 237
	EMItemType_ParkingFacility                EMItemType = 291
	EMItemType_FileObjectV2                   EMItemType = 360
	EMItemType_MusicVenue                     EMItemType = 289
	EMItemType_ReviewV2                       EMItemType = 388
	EMItemType_OceanBodyOfWater               EMItemType = 313
	EMItemType_TheaterEvent                   EMItemType = 64
	EMItemType_MusicAlbumV2                   EMItemType = 372
	EMItemType_AutomatedTeller                EMItemType = 104
	EMItemType_PlusPhotosAddedToCollection    EMItemType = 261
	EMItemType_WholesaleStore                 EMItemType = 205
	EMItemType_PresentationObjectV2           EMItemType = 362
	EMItemType_VideoObjectV2                  EMItemType = 354
	EMItemType_Attorney                       EMItemType = 151
	EMItemType_SportsClub                     EMItemType = 172
	EMItemType_StickerV2                      EMItemType = 441
	EMItemType_PlusPhotosAddedToCollectionV2  EMItemType = 405
	EMItemType_PerformingGroup                EMItemType = 259
	EMItemType_AutoRepair                     EMItemType = 82
	EMItemType_NewsArticle                    EMItemType = 13
	EMItemType_GeoCoordinatesV2               EMItemType = 343
	EMItemType_Hostel                         EMItemType = 138
	EMItemType_Rating                         EMItemType = 234
	EMItemType_FurnitureStore                 EMItemType = 185
	EMItemType_ProfessionalService            EMItemType = 149
	EMItemType_RealEstateAgent                EMItemType = 161
	EMItemType_ChalkboardV2                   EMItemType = 447
	EMItemType_RoofingContractor              EMItemType = 133
	EMItemType_ComedyEvent                    EMItemType = 54
	EMItemType_LocalPlusPhotoAlbumV2          EMItemType = 397
	EMItemType_AggregateRating                EMItemType = 235
	EMItemType_PoliceStation                  EMItemType = 92
	EMItemType_BeautySalon                    EMItemType = 119
	EMItemType_Blog                           EMItemType = 14
	EMItemType_Review                         EMItemType = 30
	EMItemType_BikeStore                      EMItemType = 177
	EMItemType_Intangible                     EMItemType = 3
	EMItemType_OutletStore                    EMItemType = 198
	EMItemType_TelevisionStation              EMItemType = 206
	EMItemType_FoodEvent                      EMItemType = 58
	EMItemType_HangoutV2                      EMItemType = 353
	EMItemType_PlusPageV2                     EMItemType = 385
	EMItemType_ExerciseGym                    EMItemType = 167
	EMItemType_Courthouse                     EMItemType = 284
	EMItemType_Movie                          EMItemType = 23
	EMItemType_PlaceReviewV2                  EMItemType = 401
	EMItemType_FireStation                    EMItemType = 90
	EMItemType_Energy                         EMItemType = 232
	EMItemType_HoaPlusEventV2                 EMItemType = 410
	EMItemType_StructuredValue                EMItemType = 236
	EMItemType_Airport                        EMItemType = 273
	EMItemType_Mountain                       EMItemType = 320
	EMItemType_VideoGalleryV2                 EMItemType = 411
	EMItemType_BodyOfWater                    EMItemType = 310
	EMItemType_MensClothingStore              EMItemType = 193
	EMItemType_ShoppingCenter                 EMItemType = 164
	EMItemType_MusicPlaylistV2                EMItemType = 374
	EMItemType_Square                         EMItemType = 246
	EMItemType_MiddleSchool                   EMItemType = 71
	EMItemType_ViewActionV2                   EMItemType = 442
	EMItemType_Thing                          EMItemType = 0
	EMItemType_Residence                      EMItemType = 209
	EMItemType_SportingGoodsStore             EMItemType = 202
	EMItemType_ApartmentComplex               EMItemType = 210
	EMItemType_Magazine                       EMItemType = 328
	EMItemType_GovernmentBuilding             EMItemType = 282
	EMItemType_SearchResultsPage              EMItemType = 44
	EMItemType_HinduTemple                    EMItemType = 297
	EMItemType_DrawingObject                  EMItemType = 262
	EMItemType_OfficeEquipmentStore           EMItemType = 197
	EMItemType_PlusPage                       EMItemType = 327
	EMItemType_Library                        EMItemType = 135
	EMItemType_BusStation                     EMItemType = 276
	EMItemType_Book                           EMItemType = 15
	EMItemType_BedAndBreakfast                EMItemType = 137
	EMItemType_Date                           EMItemType = 445
	EMItemType_SoftwareApplication            EMItemType = 302
	EMItemType_SeaBodyOfWater                 EMItemType = 317
	EMItemType_Reservation                    EMItemType = 267
	EMItemType_City                           EMItemType = 269
	EMItemType_ScholarlyArticle               EMItemType = 219
	EMItemType_BookStore                      EMItemType = 178
	EMItemType_HousePainter                   EMItemType = 129
	EMItemType_CheckinV2                      EMItemType = 357
	EMItemType_AboutPage                      EMItemType = 36
	EMItemType_PlusPhotoAlbum                 EMItemType = 250
	EMItemType_TouristAttraction              EMItemType = 213
	EMItemType_PlusPost                       EMItemType = 329
	EMItemType_MobilePhoneStore               EMItemType = 194
	EMItemType_WpFooter                       EMItemType = 49
	EMItemType_UserPlusOnes                   EMItemType = 215
	EMItemType_GovernmentOrganization         EMItemType = 74
	EMItemType_TravelEvent                    EMItemType = 325
	EMItemType_DefenceEstablishment           EMItemType = 285
	EMItemType_PersonV2                       EMItemType = 350
	EMItemType_Volcano                        EMItemType = 321
	EMItemType_FinancialService               EMItemType = 102
	EMItemType_Table                          EMItemType = 47
	EMItemType_Locksmith                      EMItemType = 130
	EMItemType_HomeGoodsStore                 EMItemType = 190
	EMItemType_HomeAndConstructionBusiness    EMItemType = 125
	EMItemType_Offer                          EMItemType = 228
	EMItemType_CommunicateActionV2            EMItemType = 429
	EMItemType_Dentist                        EMItemType = 142
	EMItemType_NutritionInformation           EMItemType = 241
	EMItemType_ItemList                       EMItemType = 16
	EMItemType_MobileApplication              EMItemType = 303
	EMItemType_Comment                        EMItemType = 264
	EMItemType_TradeActionV2                  EMItemType = 418
	EMItemType_PlayMusicAlbumV2               EMItemType = 393
	EMItemType_WebApplication                 EMItemType = 304
	EMItemType_School                         EMItemType = 73
	EMItemType_BuyActionV2                    EMItemType = 421
	EMItemType_MusicRecording                 EMItemType = 26
	EMItemType_AutoDealer                     EMItemType = 79
	EMItemType_PlusPostV2                     EMItemType = 390
	EMItemType_SportsActivityLocation         EMItemType = 165
	EMItemType_EventV2                        EMItemType = 352
	EMItemType_Zoo                            EMItemType = 308
	EMItemType_AutoWash                       EMItemType = 83
	EMItemType_Preschool                      EMItemType = 72
	EMItemType_OrganizationV2                 EMItemType = 351
	EMItemType_BarOrPub                       EMItemType = 109
	EMItemType_DryCleaningOrLaundry           EMItemType = 88
	EMItemType_GeoCoordinates                 EMItemType = 239
	EMItemType_AutoPartsStore                 EMItemType = 80
	EMItemType_IceCreamShop                   EMItemType = 113
	EMItemType_LocalBusinessV2                EMItemType = 379
	EMItemType_Physician                      EMItemType = 147
	EMItemType_EventVenue                     EMItemType = 281
	EMItemType_DocumentObjectV2               EMItemType = 358
	EMItemType_WpAdBlock                      EMItemType = 48
	EMItemType_PlusEventV2                    EMItemType = 404
	EMItemType_TvSeason                       EMItemType = 33
	EMItemType_TennisComplex                  EMItemType = 174
	EMItemType_GoogleOfferV2                  EMItemType = 378
	EMItemType_CollexionV2                    EMItemType = 413
	EMItemType_PawnShop                       EMItemType = 199
	EMItemType_RecyclingCenter                EMItemType = 162
	EMItemType_Motel                          EMItemType = 140
	EMItemType_Museum                         EMItemType = 288
	EMItemType_AutomotiveBusiness             EMItemType = 77
	EMItemType_Embassy                        EMItemType = 286
	EMItemType_Campground                     EMItemType = 278
	EMItemType_BusStop                        EMItemType = 277
	EMItemType_ComedyClub                     EMItemType = 99
	EMItemType_PlaceOfWorship                 EMItemType = 293
	EMItemType_Emotishare                     EMItemType = 334
	EMItemType_MusicStore                     EMItemType = 196
	EMItemType_PlusReshareV2                  EMItemType = 446
	EMItemType_InteractActionV2               EMItemType = 428
	EMItemType_Photograph                     EMItemType = 28
	EMItemType_PetStore                       EMItemType = 200
	EMItemType_Place                          EMItemType = 6
	EMItemType_InternetCafe                   EMItemType = 134
	EMItemType_BlogPosting                    EMItemType = 12
	EMItemType_TouristInformationCenter       EMItemType = 207
	EMItemType_RVPark                         EMItemType = 301
	EMItemType_CheckoutPage                   EMItemType = 37
	EMItemType_WebPageV2                      EMItemType = 337
	EMItemType_InteractionV2                  EMItemType = 366
	EMItemType_HangoutBroadcast               EMItemType = 255
	EMItemType_BlogPostingV2                  EMItemType = 403
	EMItemType_HardwareStore                  EMItemType = 188
	EMItemType_PostOffice                     EMItemType = 117
	EMItemType_NightClub                      EMItemType = 101
	EMItemType_Pharmacy                       EMItemType = 146
	EMItemType_Playground                     EMItemType = 300
	EMItemType_ExampleObject                  EMItemType = 245
	EMItemType_SpreadsheetObjectV2            EMItemType = 363
	EMItemType_DrawingObjectV2                EMItemType = 359
	EMItemType_AnimalShelter                  EMItemType = 76
	EMItemType_SelfStorage                    EMItemType = 163
	EMItemType_PlayMusicAlbum                 EMItemType = 324
	EMItemType_CheckInActionV2                EMItemType = 431
	EMItemType_HangoutChatMessage             EMItemType = 450
	EMItemType_Florist                        EMItemType = 184
	EMItemType_SkiResort                      EMItemType = 171
	EMItemType_MovieTheater                   EMItemType = 100
	EMItemType_BusinessEvent                  EMItemType = 52
	EMItemType_EducationEvent                 EMItemType = 56
	EMItemType_ReviewActionV2                 EMItemType = 423
	EMItemType_GardenStore                    EMItemType = 186
	EMItemType_EmergencyService               EMItemType = 89
	EMItemType_SocialEvent                    EMItemType = 62
	EMItemType_MediaObject                    EMItemType = 18
	EMItemType_ChildrensEvent                 EMItemType = 53
	EMItemType_PlaceReview                    EMItemType = 263
	EMItemType_LakeBodyOfWater                EMItemType = 312
	EMItemType_Synagogue                      EMItemType = 299
	EMItemType_EmploymentAgengy               EMItemType = 93
	EMItemType_ImageObject                    EMItemType = 20
	EMItemType_PlusPhoto                      EMItemType = 249
	EMItemType_JobPosting                     EMItemType = 226
	EMItemType_ReserveActionV2                EMItemType = 436
	EMItemType_Mass                           EMItemType = 233
	EMItemType_LiteraryEvent                  EMItemType = 59
	EMItemType_DocumentObject                 EMItemType = 217
	EMItemType_AppInvite                      EMItemType = 330
	EMItemType_GolfCourse                     EMItemType = 168
	EMItemType_Pond                           EMItemType = 314
	EMItemType_CreativeWorkV2                 EMItemType = 336
	EMItemType_LegislativeBuilding            EMItemType = 287
	EMItemType_AmusementPark                  EMItemType = 96
	EMItemType_SubwayStation                  EMItemType = 305
	EMItemType_CivicStructure                 EMItemType = 272
	EMItemType_OrganizeActionV2               EMItemType = 434
	EMItemType_Winery                         EMItemType = 115
	EMItemType_FinancialQuote                 EMItemType = 252
	EMItemType_PlayMusicTrackV2               EMItemType = 399
	EMItemType_Brewery                        EMItemType = 110
	EMItemType_Sculpture                      EMItemType = 31
	EMItemType_FinancialQuoteV2               EMItemType = 384
	EMItemType_Store                          EMItemType = 175
	EMItemType_UserCountry                    EMItemType = 270
	EMItemType_HvacBusiness                   EMItemType = 128
	EMItemType_SingleFamilyResidence          EMItemType = 212
	EMItemType_VideoGallery                   EMItemType = 40
	EMItemType_AssessActionV2                 EMItemType = 420
	EMItemType_CityHall                       EMItemType = 283
	EMItemType_GeoShape                       EMItemType = 240
	EMItemType_LiquorStore                    EMItemType = 192
	EMItemType_HealthClub                     EMItemType = 122
	EMItemType_Waterfall                      EMItemType = 318
	EMItemType_MusicEvent                     EMItemType = 60
	EMItemType_TireShop                       EMItemType = 203
	EMItemType_CreativeWork                   EMItemType = 1
	EMItemType_NewsArticleV2                  EMItemType = 439
	EMItemType_LocalBusiness                  EMItemType = 75
	EMItemType_Hotel                          EMItemType = 139
	EMItemType_Reservoir                      EMItemType = 315
	EMItemType_DeprecatedTourObjectV2         EMItemType = 395
	EMItemType_FastFoodRestaurant             EMItemType = 112
	EMItemType_Electrician                    EMItemType = 126
	EMItemType_GroceryStore                   EMItemType = 187
	EMItemType_PlusEvent                      EMItemType = 244
)

var EMItemType_name = map[int32]string{
	383: "CommentV2",
	415: "ActionV2",
	440: "PlusMediaCollectionV2",
	254: "Hangout",
	182: "DepartmentStore",
	443: "EntryPointV2",
	451: "HangoutQuote",
	222: "Enumeration",
	32:  "TvEpisode",
	201: "ShoeStore",
	223: "BookFormatType",
	108: "Bakery",
	103: "AccountingService",
	342: "PostalAddressV2",
	386: "MagazineV2",
	216: "PresentationObject",
	5:   "Person",
	195: "MovieRentalStore",
	63:  "SportsEvent",
	116: "GovernmentOffice",
	11:  "Article",
	242: "FormObject",
	364: "DriveObjectV2",
	243: "CarouselFrame",
	268: "AdministrativeArea",
	294: "BuddhistTemple",
	417: "ListenActionV2",
	425: "UpdateActionV2",
	107: "FoodEstablishment",
	105: "BankOrCreditUnion",
	257: "Unknown",
	274: "Aquarium",
	323: "PlayMusicTrack",
	402: "BlogV2",
	189: "HobbyShop",
	238: "PostalAddress",
	224: "ItemAvailability",
	419: "CreateActionV2",
	375: "MusicRecordingV2",
	448: "GoogleUserPhotoV2",
	412: "YoutubeChannelV2",
	437: "PlusMediaObjectV2",
	361: "FormObjectV2",
	114: "Restaurant",
	145: "Optician",
	435: "PlanActionV2",
	35:  "WebPage",
	279: "Cemetery",
	416: "ConsumeActionV2",
	204: "ToyStore",
	326: "RecommendedPeople",
	275: "Beach",
	97:  "ArtGallery",
	191: "JewelryStore",
	29:  "Recipe",
	331: "SquareInvite",
	22:  "VideoObject",
	183: "ElectronicsStore",
	438: "PlusAudioV2",
	57:  "Festival",
	319: "Continent",
	69:  "ElementarySchool",
	355: "SquareV2",
	340: "PlaceV2",
	91:  "Hospital",
	229: "Quantity",
	335: "ThingV2",
	41:  "ContactPage",
	132: "Plumber",
	120: "DaySpa",
	368: "AudioObjectV2",
	42:  "ItemPage",
	166: "BowlingAlley",
	430: "DiscoverActionV2",
	67:  "EducationalOrganization",
	394: "TvSeriesV2",
	266: "Checkin",
	433: "WriteActionV2",
	389: "MobileApplicationV2",
	253: "DeprecatedTourObject",
	211: "GatedResidenceCommunity",
	180: "ComputerStore",
	251: "ProductReview",
	7:   "Product",
	127: "GeneralContractor",
	43:  "ProfilePage",
	344: "PlusPhotoV2",
	51:  "WpSidebar",
	380: "StoryV2",
	307: "TrainStation",
	61:  "SaleEvent",
	66:  "Corporation",
	414: "PlusSoftwareApplicationV2",
	290: "Park",
	392: "ProductReviewV2",
	65:  "VisualArtsEvent",
	407: "PlusPhotoCollectionV2",
	24:  "MusicPlaylist",
	339: "ImageObjectV2",
	365: "BasicInteractionV2",
	70:  "HighSchool",
	19:  "AudioObject",
	170: "PublicSwimmingPool",
	148: "VeterinaryCare",
	400: "TvEpisodeV2",
	292: "PerformingArtsTheater",
	160: "RadioStation",
	218: "SpreadsheetObject",
	86:  "MotorcycleRepair",
	136: "LodgingBusiness",
	422: "ReactActionV2",
	111: "CafeOrCoffeeShop",
	121: "HairSalon",
	426: "AddActionV2",
	424: "WantActionV2",
	157: "Notary",
	55:  "DanceEvent",
	227: "Language",
	94:  "EntertainmentBusiness",
	4:   "Organization",
	382: "EmotishareV2",
	17:  "Map",
	306: "TaxiStand",
	406: "EventTimeV2",
	68:  "CollegeOrUniversity",
	409: "PollOptionV2",
	408: "PollV2",
	258: "GoogleChart",
	84:  "GasStation",
	50:  "WpHeader",
	444: "SoftwareApplicationV2",
	144: "MedicalClinic",
	449: "GoogleUserPhotoAlbum",
	124: "TattooParlor",
	131: "MovingCompany",
	377: "BookV2",
	25:  "MusicAlbum",
	118: "HealthAndBeautyBusiness",
	78:  "AutoBodyShop",
	45:  "WebPageElement",
	367: "OfferV2",
	338: "MediaObjectV2",
	2:   "GEvent",
	398: "ReservationV2",
	316: "RiverBodyOfWater",
	98:  "Casino",
	391: "ArticleV2",
	373: "MusicGroupV2",
	225: "OfferItemCondition",
	123: "NailSalon",
	141: "MedicalOrganization",
	27:  "Painting",
	181: "ConvenienceStore",
	356: "SquareInviteV2",
	387: "PlayObjectV2",
	87:  "ChildCare",
	21:  "MusicVideoObject",
	370: "MovieV2",
	280: "Crematorium",
	256: "HangoutConsumer",
	260: "MusicGroup",
	311: "Canal",
	427: "FindActionV2",
	231: "Duration",
	173: "StadiumOrArena",
	271: "State",
	85:  "MotorcycleDealer",
	322: "LandmarksOrHistoricalBuildings",
	432: "CommentActionV2",
	265: "FileObject",
	371: "RatingV2",
	106: "InsuranceAgency",
	230: "Distance",
	296: "Church",
	38:  "CollectionPage",
	349: "PlusPhotoAlbumV2",
	179: "ClothingStore",
	309: "Landform",
	208: "TravelAgency",
	39:  "ImageGallery",
	34:  "TvSeries",
	46:  "SiteNavigationElement",
	295: "CatholicChurch",
	95:  "AdultEntertainment",
	81:  "AutoRental",
	369: "AggregateRatingV2",
	220: "UserInteraction",
	332: "LocalPlusPhotoAlbum",
	298: "Mosque",
	237: "ContactPoint",
	291: "ParkingFacility",
	360: "FileObjectV2",
	289: "MusicVenue",
	388: "ReviewV2",
	313: "OceanBodyOfWater",
	64:  "TheaterEvent",
	372: "MusicAlbumV2",
	104: "AutomatedTeller",
	261: "PlusPhotosAddedToCollection",
	205: "WholesaleStore",
	362: "PresentationObjectV2",
	354: "VideoObjectV2",
	151: "Attorney",
	172: "SportsClub",
	441: "StickerV2",
	405: "PlusPhotosAddedToCollectionV2",
	259: "PerformingGroup",
	82:  "AutoRepair",
	13:  "NewsArticle",
	343: "GeoCoordinatesV2",
	138: "Hostel",
	234: "Rating",
	185: "FurnitureStore",
	149: "ProfessionalService",
	161: "RealEstateAgent",
	447: "ChalkboardV2",
	133: "RoofingContractor",
	54:  "ComedyEvent",
	397: "LocalPlusPhotoAlbumV2",
	235: "AggregateRating",
	92:  "PoliceStation",
	119: "BeautySalon",
	14:  "Blog",
	30:  "Review",
	177: "BikeStore",
	3:   "Intangible",
	198: "OutletStore",
	206: "TelevisionStation",
	58:  "FoodEvent",
	353: "HangoutV2",
	385: "PlusPageV2",
	167: "ExerciseGym",
	284: "Courthouse",
	23:  "Movie",
	401: "PlaceReviewV2",
	90:  "FireStation",
	232: "Energy",
	410: "HoaPlusEventV2",
	236: "StructuredValue",
	273: "Airport",
	320: "Mountain",
	411: "VideoGalleryV2",
	310: "BodyOfWater",
	193: "MensClothingStore",
	164: "ShoppingCenter",
	374: "MusicPlaylistV2",
	246: "Square",
	71:  "MiddleSchool",
	442: "ViewActionV2",
	0:   "Thing",
	209: "Residence",
	202: "SportingGoodsStore",
	210: "ApartmentComplex",
	328: "Magazine",
	282: "GovernmentBuilding",
	44:  "SearchResultsPage",
	297: "HinduTemple",
	262: "DrawingObject",
	197: "OfficeEquipmentStore",
	327: "PlusPage",
	135: "Library",
	276: "BusStation",
	15:  "Book",
	137: "BedAndBreakfast",
	445: "Date",
	302: "SoftwareApplication",
	317: "SeaBodyOfWater",
	267: "Reservation",
	269: "City",
	219: "ScholarlyArticle",
	178: "BookStore",
	129: "HousePainter",
	357: "CheckinV2",
	36:  "AboutPage",
	250: "PlusPhotoAlbum",
	213: "TouristAttraction",
	329: "PlusPost",
	194: "MobilePhoneStore",
	49:  "WpFooter",
	215: "UserPlusOnes",
	74:  "GovernmentOrganization",
	325: "TravelEvent",
	285: "DefenceEstablishment",
	350: "PersonV2",
	321: "Volcano",
	102: "FinancialService",
	47:  "Table",
	130: "Locksmith",
	190: "HomeGoodsStore",
	125: "HomeAndConstructionBusiness",
	228: "Offer",
	429: "CommunicateActionV2",
	142: "Dentist",
	241: "NutritionInformation",
	16:  "ItemList",
	303: "MobileApplication",
	264: "Comment",
	418: "TradeActionV2",
	393: "PlayMusicAlbumV2",
	304: "WebApplication",
	73:  "School",
	421: "BuyActionV2",
	26:  "MusicRecording",
	79:  "AutoDealer",
	390: "PlusPostV2",
	165: "SportsActivityLocation",
	352: "EventV2",
	308: "Zoo",
	83:  "AutoWash",
	72:  "Preschool",
	351: "OrganizationV2",
	109: "BarOrPub",
	88:  "DryCleaningOrLaundry",
	239: "GeoCoordinates",
	80:  "AutoPartsStore",
	113: "IceCreamShop",
	379: "LocalBusinessV2",
	147: "Physician",
	281: "EventVenue",
	358: "DocumentObjectV2",
	48:  "WpAdBlock",
	404: "PlusEventV2",
	33:  "TvSeason",
	174: "TennisComplex",
	378: "GoogleOfferV2",
	413: "CollexionV2",
	199: "PawnShop",
	162: "RecyclingCenter",
	140: "Motel",
	288: "Museum",
	77:  "AutomotiveBusiness",
	286: "Embassy",
	278: "Campground",
	277: "BusStop",
	99:  "ComedyClub",
	293: "PlaceOfWorship",
	334: "Emotishare",
	196: "MusicStore",
	446: "PlusReshareV2",
	428: "InteractActionV2",
	28:  "Photograph",
	200: "PetStore",
	6:   "Place",
	134: "InternetCafe",
	12:  "BlogPosting",
	207: "TouristInformationCenter",
	301: "RVPark",
	37:  "CheckoutPage",
	337: "WebPageV2",
	366: "InteractionV2",
	255: "HangoutBroadcast",
	403: "BlogPostingV2",
	188: "HardwareStore",
	117: "PostOffice",
	101: "NightClub",
	146: "Pharmacy",
	300: "Playground",
	245: "ExampleObject",
	363: "SpreadsheetObjectV2",
	359: "DrawingObjectV2",
	76:  "AnimalShelter",
	163: "SelfStorage",
	324: "PlayMusicAlbum",
	431: "CheckInActionV2",
	450: "HangoutChatMessage",
	184: "Florist",
	171: "SkiResort",
	100: "MovieTheater",
	52:  "BusinessEvent",
	56:  "EducationEvent",
	423: "ReviewActionV2",
	186: "GardenStore",
	89:  "EmergencyService",
	62:  "SocialEvent",
	18:  "MediaObject",
	53:  "ChildrensEvent",
	263: "PlaceReview",
	312: "LakeBodyOfWater",
	299: "Synagogue",
	93:  "EmploymentAgengy",
	20:  "ImageObject",
	249: "PlusPhoto",
	226: "JobPosting",
	436: "ReserveActionV2",
	233: "Mass",
	59:  "LiteraryEvent",
	217: "DocumentObject",
	330: "AppInvite",
	168: "GolfCourse",
	314: "Pond",
	336: "CreativeWorkV2",
	287: "LegislativeBuilding",
	96:  "AmusementPark",
	305: "SubwayStation",
	272: "CivicStructure",
	434: "OrganizeActionV2",
	115: "Winery",
	252: "FinancialQuote",
	399: "PlayMusicTrackV2",
	110: "Brewery",
	31:  "Sculpture",
	384: "FinancialQuoteV2",
	175: "Store",
	270: "UserCountry",
	128: "HvacBusiness",
	212: "SingleFamilyResidence",
	40:  "VideoGallery",
	420: "AssessActionV2",
	283: "CityHall",
	240: "GeoShape",
	192: "LiquorStore",
	122: "HealthClub",
	318: "Waterfall",
	60:  "MusicEvent",
	203: "TireShop",
	1:   "CreativeWork",
	439: "NewsArticleV2",
	75:  "LocalBusiness",
	139: "Hotel",
	315: "Reservoir",
	395: "DeprecatedTourObjectV2",
	112: "FastFoodRestaurant",
	126: "Electrician",
	187: "GroceryStore",
	244: "PlusEvent",
}

var EMItemType_value = map[string]int32{
	"CommentV2":                      383,
	"ActionV2":                       415,
	"PlusMediaCollectionV2":          440,
	"Hangout":                        254,
	"DepartmentStore":                182,
	"EntryPointV2":                   443,
	"HangoutQuote":                   451,
	"Enumeration":                    222,
	"TvEpisode":                      32,
	"ShoeStore":                      201,
	"BookFormatType":                 223,
	"Bakery":                         108,
	"AccountingService":              103,
	"PostalAddressV2":                342,
	"MagazineV2":                     386,
	"PresentationObject":             216,
	"Person":                         5,
	"MovieRentalStore":               195,
	"SportsEvent":                    63,
	"GovernmentOffice":               116,
	"Article":                        11,
	"FormObject":                     242,
	"DriveObjectV2":                  364,
	"CarouselFrame":                  243,
	"AdministrativeArea":             268,
	"BuddhistTemple":                 294,
	"ListenActionV2":                 417,
	"UpdateActionV2":                 425,
	"FoodEstablishment":              107,
	"BankOrCreditUnion":              105,
	"Unknown":                        257,
	"Aquarium":                       274,
	"PlayMusicTrack":                 323,
	"BlogV2":                         402,
	"HobbyShop":                      189,
	"PostalAddress":                  238,
	"ItemAvailability":               224,
	"CreateActionV2":                 419,
	"MusicRecordingV2":               375,
	"GoogleUserPhotoV2":              448,
	"YoutubeChannelV2":               412,
	"PlusMediaObjectV2":              437,
	"FormObjectV2":                   361,
	"Restaurant":                     114,
	"Optician":                       145,
	"PlanActionV2":                   435,
	"WebPage":                        35,
	"Cemetery":                       279,
	"ConsumeActionV2":                416,
	"ToyStore":                       204,
	"RecommendedPeople":              326,
	"Beach":                          275,
	"ArtGallery":                     97,
	"JewelryStore":                   191,
	"Recipe":                         29,
	"SquareInvite":                   331,
	"VideoObject":                    22,
	"ElectronicsStore":               183,
	"PlusAudioV2":                    438,
	"Festival":                       57,
	"Continent":                      319,
	"ElementarySchool":               69,
	"SquareV2":                       355,
	"PlaceV2":                        340,
	"Hospital":                       91,
	"Quantity":                       229,
	"ThingV2":                        335,
	"ContactPage":                    41,
	"Plumber":                        132,
	"DaySpa":                         120,
	"AudioObjectV2":                  368,
	"ItemPage":                       42,
	"BowlingAlley":                   166,
	"DiscoverActionV2":               430,
	"EducationalOrganization":        67,
	"TvSeriesV2":                     394,
	"Checkin":                        266,
	"WriteActionV2":                  433,
	"MobileApplicationV2":            389,
	"DeprecatedTourObject":           253,
	"GatedResidenceCommunity":        211,
	"ComputerStore":                  180,
	"ProductReview":                  251,
	"Product":                        7,
	"GeneralContractor":              127,
	"ProfilePage":                    43,
	"PlusPhotoV2":                    344,
	"WpSidebar":                      51,
	"StoryV2":                        380,
	"TrainStation":                   307,
	"SaleEvent":                      61,
	"Corporation":                    66,
	"PlusSoftwareApplicationV2":      414,
	"Park":                           290,
	"ProductReviewV2":                392,
	"VisualArtsEvent":                65,
	"PlusPhotoCollectionV2":          407,
	"MusicPlaylist":                  24,
	"ImageObjectV2":                  339,
	"BasicInteractionV2":             365,
	"HighSchool":                     70,
	"AudioObject":                    19,
	"PublicSwimmingPool":             170,
	"VeterinaryCare":                 148,
	"TvEpisodeV2":                    400,
	"PerformingArtsTheater":          292,
	"RadioStation":                   160,
	"SpreadsheetObject":              218,
	"MotorcycleRepair":               86,
	"LodgingBusiness":                136,
	"ReactActionV2":                  422,
	"CafeOrCoffeeShop":               111,
	"HairSalon":                      121,
	"AddActionV2":                    426,
	"WantActionV2":                   424,
	"Notary":                         157,
	"DanceEvent":                     55,
	"Language":                       227,
	"EntertainmentBusiness":          94,
	"Organization":                   4,
	"EmotishareV2":                   382,
	"Map":                            17,
	"TaxiStand":                      306,
	"EventTimeV2":                    406,
	"CollegeOrUniversity":            68,
	"PollOptionV2":                   409,
	"PollV2":                         408,
	"GoogleChart":                    258,
	"GasStation":                     84,
	"WpHeader":                       50,
	"SoftwareApplicationV2":          444,
	"MedicalClinic":                  144,
	"GoogleUserPhotoAlbum":           449,
	"TattooParlor":                   124,
	"MovingCompany":                  131,
	"BookV2":                         377,
	"MusicAlbum":                     25,
	"HealthAndBeautyBusiness":        118,
	"AutoBodyShop":                   78,
	"WebPageElement":                 45,
	"OfferV2":                        367,
	"MediaObjectV2":                  338,
	"GEvent":                         2,
	"ReservationV2":                  398,
	"RiverBodyOfWater":               316,
	"Casino":                         98,
	"ArticleV2":                      391,
	"MusicGroupV2":                   373,
	"OfferItemCondition":             225,
	"NailSalon":                      123,
	"MedicalOrganization":            141,
	"Painting":                       27,
	"ConvenienceStore":               181,
	"SquareInviteV2":                 356,
	"PlayObjectV2":                   387,
	"ChildCare":                      87,
	"MusicVideoObject":               21,
	"MovieV2":                        370,
	"Crematorium":                    280,
	"HangoutConsumer":                256,
	"MusicGroup":                     260,
	"Canal":                          311,
	"FindActionV2":                   427,
	"Duration":                       231,
	"StadiumOrArena":                 173,
	"State":                          271,
	"MotorcycleDealer":               85,
	"LandmarksOrHistoricalBuildings": 322,
	"CommentActionV2":                432,
	"FileObject":                     265,
	"RatingV2":                       371,
	"InsuranceAgency":                106,
	"Distance":                       230,
	"Church":                         296,
	"CollectionPage":                 38,
	"PlusPhotoAlbumV2":               349,
	"ClothingStore":                  179,
	"Landform":                       309,
	"TravelAgency":                   208,
	"ImageGallery":                   39,
	"TvSeries":                       34,
	"SiteNavigationElement":          46,
	"CatholicChurch":                 295,
	"AdultEntertainment":             95,
	"AutoRental":                     81,
	"AggregateRatingV2":              369,
	"UserInteraction":                220,
	"LocalPlusPhotoAlbum":            332,
	"Mosque":                         298,
	"ContactPoint":                   237,
	"ParkingFacility":                291,
	"FileObjectV2":                   360,
	"MusicVenue":                     289,
	"ReviewV2":                       388,
	"OceanBodyOfWater":               313,
	"TheaterEvent":                   64,
	"MusicAlbumV2":                   372,
	"AutomatedTeller":                104,
	"PlusPhotosAddedToCollection":    261,
	"WholesaleStore":                 205,
	"PresentationObjectV2":           362,
	"VideoObjectV2":                  354,
	"Attorney":                       151,
	"SportsClub":                     172,
	"StickerV2":                      441,
	"PlusPhotosAddedToCollectionV2":  405,
	"PerformingGroup":                259,
	"AutoRepair":                     82,
	"NewsArticle":                    13,
	"GeoCoordinatesV2":               343,
	"Hostel":                         138,
	"Rating":                         234,
	"FurnitureStore":                 185,
	"ProfessionalService":            149,
	"RealEstateAgent":                161,
	"ChalkboardV2":                   447,
	"RoofingContractor":              133,
	"ComedyEvent":                    54,
	"LocalPlusPhotoAlbumV2":          397,
	"AggregateRating":                235,
	"PoliceStation":                  92,
	"BeautySalon":                    119,
	"Blog":                           14,
	"Review":                         30,
	"BikeStore":                      177,
	"Intangible":                     3,
	"OutletStore":                    198,
	"TelevisionStation":              206,
	"FoodEvent":                      58,
	"HangoutV2":                      353,
	"PlusPageV2":                     385,
	"ExerciseGym":                    167,
	"Courthouse":                     284,
	"Movie":                          23,
	"PlaceReviewV2":                  401,
	"FireStation":                    90,
	"Energy":                         232,
	"HoaPlusEventV2":                 410,
	"StructuredValue":                236,
	"Airport":                        273,
	"Mountain":                       320,
	"VideoGalleryV2":                 411,
	"BodyOfWater":                    310,
	"MensClothingStore":              193,
	"ShoppingCenter":                 164,
	"MusicPlaylistV2":                374,
	"Square":                         246,
	"MiddleSchool":                   71,
	"ViewActionV2":                   442,
	"Thing":                          0,
	"Residence":                      209,
	"SportingGoodsStore":             202,
	"ApartmentComplex":               210,
	"Magazine":                       328,
	"GovernmentBuilding":             282,
	"SearchResultsPage":              44,
	"HinduTemple":                    297,
	"DrawingObject":                  262,
	"OfficeEquipmentStore":           197,
	"PlusPage":                       327,
	"Library":                        135,
	"BusStation":                     276,
	"Book":                           15,
	"BedAndBreakfast":                137,
	"Date":                           445,
	"SoftwareApplication":            302,
	"SeaBodyOfWater":                 317,
	"Reservation":                    267,
	"City":                           269,
	"ScholarlyArticle":               219,
	"BookStore":                      178,
	"HousePainter":                   129,
	"CheckinV2":                      357,
	"AboutPage":                      36,
	"PlusPhotoAlbum":                 250,
	"TouristAttraction":              213,
	"PlusPost":                       329,
	"MobilePhoneStore":               194,
	"WpFooter":                       49,
	"UserPlusOnes":                   215,
	"GovernmentOrganization":         74,
	"TravelEvent":                    325,
	"DefenceEstablishment":           285,
	"PersonV2":                       350,
	"Volcano":                        321,
	"FinancialService":               102,
	"Table":                          47,
	"Locksmith":                      130,
	"HomeGoodsStore":                 190,
	"HomeAndConstructionBusiness":    125,
	"Offer":                          228,
	"CommunicateActionV2":            429,
	"Dentist":                        142,
	"NutritionInformation":           241,
	"ItemList":                       16,
	"MobileApplication":              303,
	"Comment":                        264,
	"TradeActionV2":                  418,
	"PlayMusicAlbumV2":               393,
	"WebApplication":                 304,
	"School":                         73,
	"BuyActionV2":                    421,
	"MusicRecording":                 26,
	"AutoDealer":                     79,
	"PlusPostV2":                     390,
	"SportsActivityLocation":         165,
	"EventV2":                        352,
	"Zoo":                            308,
	"AutoWash":                       83,
	"Preschool":                      72,
	"OrganizationV2":                 351,
	"BarOrPub":                       109,
	"DryCleaningOrLaundry":           88,
	"GeoCoordinates":                 239,
	"AutoPartsStore":                 80,
	"IceCreamShop":                   113,
	"LocalBusinessV2":                379,
	"Physician":                      147,
	"EventVenue":                     281,
	"DocumentObjectV2":               358,
	"WpAdBlock":                      48,
	"PlusEventV2":                    404,
	"TvSeason":                       33,
	"TennisComplex":                  174,
	"GoogleOfferV2":                  378,
	"CollexionV2":                    413,
	"PawnShop":                       199,
	"RecyclingCenter":                162,
	"Motel":                          140,
	"Museum":                         288,
	"AutomotiveBusiness":             77,
	"Embassy":                        286,
	"Campground":                     278,
	"BusStop":                        277,
	"ComedyClub":                     99,
	"PlaceOfWorship":                 293,
	"Emotishare":                     334,
	"MusicStore":                     196,
	"PlusReshareV2":                  446,
	"InteractActionV2":               428,
	"Photograph":                     28,
	"PetStore":                       200,
	"Place":                          6,
	"InternetCafe":                   134,
	"BlogPosting":                    12,
	"TouristInformationCenter":       207,
	"RVPark":                         301,
	"CheckoutPage":                   37,
	"WebPageV2":                      337,
	"InteractionV2":                  366,
	"HangoutBroadcast":               255,
	"BlogPostingV2":                  403,
	"HardwareStore":                  188,
	"PostOffice":                     117,
	"NightClub":                      101,
	"Pharmacy":                       146,
	"Playground":                     300,
	"ExampleObject":                  245,
	"SpreadsheetObjectV2":            363,
	"DrawingObjectV2":                359,
	"AnimalShelter":                  76,
	"SelfStorage":                    163,
	"PlayMusicAlbum":                 324,
	"CheckInActionV2":                431,
	"HangoutChatMessage":             450,
	"Florist":                        184,
	"SkiResort":                      171,
	"MovieTheater":                   100,
	"BusinessEvent":                  52,
	"EducationEvent":                 56,
	"ReviewActionV2":                 423,
	"GardenStore":                    186,
	"EmergencyService":               89,
	"SocialEvent":                    62,
	"MediaObject":                    18,
	"ChildrensEvent":                 53,
	"PlaceReview":                    263,
	"LakeBodyOfWater":                312,
	"Synagogue":                      299,
	"EmploymentAgengy":               93,
	"ImageObject":                    20,
	"PlusPhoto":                      249,
	"JobPosting":                     226,
	"ReserveActionV2":                436,
	"Mass":                           233,
	"LiteraryEvent":                  59,
	"DocumentObject":                 217,
	"AppInvite":                      330,
	"GolfCourse":                     168,
	"Pond":                           314,
	"CreativeWorkV2":                 336,
	"LegislativeBuilding":            287,
	"AmusementPark":                  96,
	"SubwayStation":                  305,
	"CivicStructure":                 272,
	"OrganizeActionV2":               434,
	"Winery":                         115,
	"FinancialQuote":                 252,
	"PlayMusicTrackV2":               399,
	"Brewery":                        110,
	"Sculpture":                      31,
	"FinancialQuoteV2":               384,
	"Store":                          175,
	"UserCountry":                    270,
	"HvacBusiness":                   128,
	"SingleFamilyResidence":          212,
	"VideoGallery":                   40,
	"AssessActionV2":                 420,
	"CityHall":                       283,
	"GeoShape":                       240,
	"LiquorStore":                    192,
	"HealthClub":                     122,
	"Waterfall":                      318,
	"MusicEvent":                     60,
	"TireShop":                       203,
	"CreativeWork":                   1,
	"NewsArticleV2":                  439,
	"LocalBusiness":                  75,
	"Hotel":                          139,
	"Reservoir":                      315,
	"DeprecatedTourObjectV2":         395,
	"FastFoodRestaurant":             112,
	"Electrician":                    126,
	"GroceryStore":                   187,
	"PlusEvent":                      244,
}

func (x EMItemType) Enum() *EMItemType {
	p := new(EMItemType)
	*p = x
	return p
}

func (x EMItemType) String() string {
	return proto.EnumName(EMItemType_name, int32(x))
}

func (x *EMItemType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EMItemType_value, data, "EMItemType")
	if err != nil {
		return err
	}
	*x = EMItemType(value)
	return nil
}

func (EMItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{0}
}

type EMPlusPhoto_PhotoMediaType int32

const (
	EMPlusPhoto_PhotoMediaType_Photosphere   EMPlusPhoto_PhotoMediaType = 3
	EMPlusPhoto_PhotoMediaType_Video         EMPlusPhoto_PhotoMediaType = 2
	EMPlusPhoto_PhotoMediaType_AnimatedPhoto EMPlusPhoto_PhotoMediaType = 4
	EMPlusPhoto_PhotoMediaType_Picture       EMPlusPhoto_PhotoMediaType = 1
	EMPlusPhoto_PhotoMediaType_UnknownMedia  EMPlusPhoto_PhotoMediaType = 0
)

var EMPlusPhoto_PhotoMediaType_name = map[int32]string{
	3: "Photosphere",
	2: "Video",
	4: "AnimatedPhoto",
	1: "Picture",
	0: "UnknownMedia",
}

var EMPlusPhoto_PhotoMediaType_value = map[string]int32{
	"Photosphere":   3,
	"Video":         2,
	"AnimatedPhoto": 4,
	"Picture":       1,
	"UnknownMedia":  0,
}

func (x EMPlusPhoto_PhotoMediaType) Enum() *EMPlusPhoto_PhotoMediaType {
	p := new(EMPlusPhoto_PhotoMediaType)
	*p = x
	return p
}

func (x EMPlusPhoto_PhotoMediaType) String() string {
	return proto.EnumName(EMPlusPhoto_PhotoMediaType_name, int32(x))
}

func (x *EMPlusPhoto_PhotoMediaType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EMPlusPhoto_PhotoMediaType_value, data, "EMPlusPhoto_PhotoMediaType")
	if err != nil {
		return err
	}
	*x = EMPlusPhoto_PhotoMediaType(value)
	return nil
}

func (EMPlusPhoto_PhotoMediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{1}
}

type EMPlace struct {
	Name                 *string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string            `protobuf:"bytes,2,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	URL                  *string            `protobuf:"bytes,3,opt,name=URL" json:"URL,omitempty"`
	Address              *EMPostalAddress   `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	Geo                  *EMGeoCoordinates  `protobuf:"bytes,5,opt,name=geo" json:"geo,omitempty"`
	ClusterId            *string            `protobuf:"bytes,6,opt,name=clusterId" json:"clusterId,omitempty"`
	OwnerObfuscatedId    *string            `protobuf:"bytes,7,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	MapURL               *string            `protobuf:"bytes,8,opt,name=mapURL" json:"mapURL,omitempty"`
	ImageURL             *string            `protobuf:"bytes,9,opt,name=imageURL" json:"imageURL,omitempty"`
	ReferenceId          *string            `protobuf:"bytes,10,opt,name=referenceId" json:"referenceId,omitempty"`
	RepresentativeImage  *EMEmbedClientItem `protobuf:"bytes,11,opt,name=representativeImage" json:"representativeImage,omitempty"`
	AggregateRating      *EMEmbedClientItem `protobuf:"bytes,12,opt,name=aggregateRating" json:"aggregateRating,omitempty"`
	Telephone            *string            `protobuf:"bytes,13,opt,name=telephone" json:"telephone,omitempty"`
	FaxNumber            *string            `protobuf:"bytes,14,opt,name=faxNumber" json:"faxNumber,omitempty"`
	IsClaimedByOwner     *bool              `protobuf:"varint,15,opt,name=isClaimedByOwner" json:"isClaimedByOwner,omitempty"`
	PlaceId              *string            `protobuf:"bytes,16,opt,name=placeId" json:"placeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EMPlace) Reset()         { *m = EMPlace{} }
func (m *EMPlace) String() string { return proto.CompactTextString(m) }
func (*EMPlace) ProtoMessage()    {}
func (*EMPlace) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{0}
}

func (m *EMPlace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMPlace.Unmarshal(m, b)
}
func (m *EMPlace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMPlace.Marshal(b, m, deterministic)
}
func (m *EMPlace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMPlace.Merge(m, src)
}
func (m *EMPlace) XXX_Size() int {
	return xxx_messageInfo_EMPlace.Size(m)
}
func (m *EMPlace) XXX_DiscardUnknown() {
	xxx_messageInfo_EMPlace.DiscardUnknown(m)
}

var xxx_messageInfo_EMPlace proto.InternalMessageInfo

func (m *EMPlace) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMPlace) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMPlace) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMPlace) GetAddress() *EMPostalAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *EMPlace) GetGeo() *EMGeoCoordinates {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *EMPlace) GetClusterId() string {
	if m != nil && m.ClusterId != nil {
		return *m.ClusterId
	}
	return ""
}

func (m *EMPlace) GetOwnerObfuscatedId() string {
	if m != nil && m.OwnerObfuscatedId != nil {
		return *m.OwnerObfuscatedId
	}
	return ""
}

func (m *EMPlace) GetMapURL() string {
	if m != nil && m.MapURL != nil {
		return *m.MapURL
	}
	return ""
}

func (m *EMPlace) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMPlace) GetReferenceId() string {
	if m != nil && m.ReferenceId != nil {
		return *m.ReferenceId
	}
	return ""
}

func (m *EMPlace) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

func (m *EMPlace) GetAggregateRating() *EMEmbedClientItem {
	if m != nil {
		return m.AggregateRating
	}
	return nil
}

func (m *EMPlace) GetTelephone() string {
	if m != nil && m.Telephone != nil {
		return *m.Telephone
	}
	return ""
}

func (m *EMPlace) GetFaxNumber() string {
	if m != nil && m.FaxNumber != nil {
		return *m.FaxNumber
	}
	return ""
}

func (m *EMPlace) GetIsClaimedByOwner() bool {
	if m != nil && m.IsClaimedByOwner != nil {
		return *m.IsClaimedByOwner
	}
	return false
}

func (m *EMPlace) GetPlaceId() string {
	if m != nil && m.PlaceId != nil {
		return *m.PlaceId
	}
	return ""
}

type EMThing struct {
	URL                  *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL             *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	ProxiedImage         *EMThumbnail         `protobuf:"bytes,5,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL    *string              `protobuf:"bytes,6,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray          []*EMEmbedClientItem `protobuf:"bytes,7,rep,name=authorArray" json:"authorArray,omitempty"`
	DescriptionTruncated *string              `protobuf:"bytes,8,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	RepresentativeImage  *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=representativeImage" json:"representativeImage,omitempty"`
	RelatedImageArray    []*EMImageObject     `protobuf:"bytes,10,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EMThing) Reset()         { *m = EMThing{} }
func (m *EMThing) String() string { return proto.CompactTextString(m) }
func (*EMThing) ProtoMessage()    {}
func (*EMThing) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{1}
}

func (m *EMThing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMThing.Unmarshal(m, b)
}
func (m *EMThing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMThing.Marshal(b, m, deterministic)
}
func (m *EMThing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMThing.Merge(m, src)
}
func (m *EMThing) XXX_Size() int {
	return xxx_messageInfo_EMThing.Size(m)
}
func (m *EMThing) XXX_DiscardUnknown() {
	xxx_messageInfo_EMThing.DiscardUnknown(m)
}

var xxx_messageInfo_EMThing proto.InternalMessageInfo

func (m *EMThing) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMThing) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMThing) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMThing) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMThing) GetProxiedImage() *EMThumbnail {
	if m != nil {
		return m.ProxiedImage
	}
	return nil
}

func (m *EMThing) GetProxiedFaviconURL() string {
	if m != nil && m.ProxiedFaviconURL != nil {
		return *m.ProxiedFaviconURL
	}
	return ""
}

func (m *EMThing) GetAuthorArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AuthorArray
	}
	return nil
}

func (m *EMThing) GetDescriptionTruncated() string {
	if m != nil && m.DescriptionTruncated != nil {
		return *m.DescriptionTruncated
	}
	return ""
}

func (m *EMThing) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

func (m *EMThing) GetRelatedImageArray() []*EMImageObject {
	if m != nil {
		return m.RelatedImageArray
	}
	return nil
}

type EMGeoCoordinates struct {
	Latitude             *float64           `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude            *float64           `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	ImageURL             *string            `protobuf:"bytes,3,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string            `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	URL                  *string            `protobuf:"bytes,5,opt,name=URL" json:"URL,omitempty"`
	RepresentativeImage  *EMEmbedClientItem `protobuf:"bytes,6,opt,name=representativeImage" json:"representativeImage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EMGeoCoordinates) Reset()         { *m = EMGeoCoordinates{} }
func (m *EMGeoCoordinates) String() string { return proto.CompactTextString(m) }
func (*EMGeoCoordinates) ProtoMessage()    {}
func (*EMGeoCoordinates) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{2}
}

func (m *EMGeoCoordinates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMGeoCoordinates.Unmarshal(m, b)
}
func (m *EMGeoCoordinates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMGeoCoordinates.Marshal(b, m, deterministic)
}
func (m *EMGeoCoordinates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMGeoCoordinates.Merge(m, src)
}
func (m *EMGeoCoordinates) XXX_Size() int {
	return xxx_messageInfo_EMGeoCoordinates.Size(m)
}
func (m *EMGeoCoordinates) XXX_DiscardUnknown() {
	xxx_messageInfo_EMGeoCoordinates.DiscardUnknown(m)
}

var xxx_messageInfo_EMGeoCoordinates proto.InternalMessageInfo

func (m *EMGeoCoordinates) GetLatitude() float64 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *EMGeoCoordinates) GetLongitude() float64 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *EMGeoCoordinates) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMGeoCoordinates) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMGeoCoordinates) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMGeoCoordinates) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

type EMPostalAddress struct {
	Name                 *string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	AddressCountry       *string            `protobuf:"bytes,2,opt,name=addressCountry" json:"addressCountry,omitempty"`
	AddressLocality      *string            `protobuf:"bytes,3,opt,name=addressLocality" json:"addressLocality,omitempty"`
	AddressRegion        *string            `protobuf:"bytes,4,opt,name=addressRegion" json:"addressRegion,omitempty"`
	PostOfficeBoxNumber  *string            `protobuf:"bytes,5,opt,name=postOfficeBoxNumber" json:"postOfficeBoxNumber,omitempty"`
	PostalCode           *string            `protobuf:"bytes,6,opt,name=postalCode" json:"postalCode,omitempty"`
	StreetAddress        *string            `protobuf:"bytes,7,opt,name=streetAddress" json:"streetAddress,omitempty"`
	URL                  *string            `protobuf:"bytes,8,opt,name=URL" json:"URL,omitempty"`
	RepresentativeImage  *EMEmbedClientItem `protobuf:"bytes,9,opt,name=representativeImage" json:"representativeImage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EMPostalAddress) Reset()         { *m = EMPostalAddress{} }
func (m *EMPostalAddress) String() string { return proto.CompactTextString(m) }
func (*EMPostalAddress) ProtoMessage()    {}
func (*EMPostalAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{3}
}

func (m *EMPostalAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMPostalAddress.Unmarshal(m, b)
}
func (m *EMPostalAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMPostalAddress.Marshal(b, m, deterministic)
}
func (m *EMPostalAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMPostalAddress.Merge(m, src)
}
func (m *EMPostalAddress) XXX_Size() int {
	return xxx_messageInfo_EMPostalAddress.Size(m)
}
func (m *EMPostalAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_EMPostalAddress.DiscardUnknown(m)
}

var xxx_messageInfo_EMPostalAddress proto.InternalMessageInfo

func (m *EMPostalAddress) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMPostalAddress) GetAddressCountry() string {
	if m != nil && m.AddressCountry != nil {
		return *m.AddressCountry
	}
	return ""
}

func (m *EMPostalAddress) GetAddressLocality() string {
	if m != nil && m.AddressLocality != nil {
		return *m.AddressLocality
	}
	return ""
}

func (m *EMPostalAddress) GetAddressRegion() string {
	if m != nil && m.AddressRegion != nil {
		return *m.AddressRegion
	}
	return ""
}

func (m *EMPostalAddress) GetPostOfficeBoxNumber() string {
	if m != nil && m.PostOfficeBoxNumber != nil {
		return *m.PostOfficeBoxNumber
	}
	return ""
}

func (m *EMPostalAddress) GetPostalCode() string {
	if m != nil && m.PostalCode != nil {
		return *m.PostalCode
	}
	return ""
}

func (m *EMPostalAddress) GetStreetAddress() string {
	if m != nil && m.StreetAddress != nil {
		return *m.StreetAddress
	}
	return ""
}

func (m *EMPostalAddress) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMPostalAddress) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

type EMWebPage struct {
	URL                           *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL                      *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                          *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP                  *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	About                         *EMEmbedClientItem   `protobuf:"bytes,5,opt,name=about" json:"about,omitempty"`
	ProxiedImage                  *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL             *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray                   []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	DescriptionTruncated          *string              `protobuf:"bytes,9,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	RelatedImageArray             []*EMImageObject     `protobuf:"bytes,10,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName                    *string              `protobuf:"bytes,11,opt,name=sourceName" json:"sourceName,omitempty"`
	CanonicalFountainStream       *string              `protobuf:"bytes,12,opt,name=canonicalFountainStream" json:"canonicalFountainStream,omitempty"`
	UnfilteredFountainStreamArray []string             `protobuf:"bytes,13,rep,name=unfilteredFountainStreamArray" json:"unfilteredFountainStreamArray,omitempty"`
	PremodFountainStreamArray     []string             `protobuf:"bytes,14,rep,name=premodFountainStreamArray" json:"premodFountainStreamArray,omitempty"`
	PostmodFountainStreamArray    []string             `protobuf:"bytes,15,rep,name=postmodFountainStreamArray" json:"postmodFountainStreamArray,omitempty"`
	InboxFountainStreamArray      []string             `protobuf:"bytes,16,rep,name=inboxFountainStreamArray" json:"inboxFountainStreamArray,omitempty"`
	RepresentativeImage           *EMEmbedClientItem   `protobuf:"bytes,17,opt,name=representativeImage" json:"representativeImage,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}             `json:"-"`
	XXX_unrecognized              []byte               `json:"-"`
	XXX_sizecache                 int32                `json:"-"`
}

func (m *EMWebPage) Reset()         { *m = EMWebPage{} }
func (m *EMWebPage) String() string { return proto.CompactTextString(m) }
func (*EMWebPage) ProtoMessage()    {}
func (*EMWebPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{4}
}

func (m *EMWebPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMWebPage.Unmarshal(m, b)
}
func (m *EMWebPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMWebPage.Marshal(b, m, deterministic)
}
func (m *EMWebPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMWebPage.Merge(m, src)
}
func (m *EMWebPage) XXX_Size() int {
	return xxx_messageInfo_EMWebPage.Size(m)
}
func (m *EMWebPage) XXX_DiscardUnknown() {
	xxx_messageInfo_EMWebPage.DiscardUnknown(m)
}

var xxx_messageInfo_EMWebPage proto.InternalMessageInfo

func (m *EMWebPage) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMWebPage) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMWebPage) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMWebPage) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMWebPage) GetAbout() *EMEmbedClientItem {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *EMWebPage) GetProxiedImage() *EMThumbnail {
	if m != nil {
		return m.ProxiedImage
	}
	return nil
}

func (m *EMWebPage) GetProxiedFaviconURL() string {
	if m != nil && m.ProxiedFaviconURL != nil {
		return *m.ProxiedFaviconURL
	}
	return ""
}

func (m *EMWebPage) GetAuthorArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AuthorArray
	}
	return nil
}

func (m *EMWebPage) GetDescriptionTruncated() string {
	if m != nil && m.DescriptionTruncated != nil {
		return *m.DescriptionTruncated
	}
	return ""
}

func (m *EMWebPage) GetRelatedImageArray() []*EMImageObject {
	if m != nil {
		return m.RelatedImageArray
	}
	return nil
}

func (m *EMWebPage) GetSourceName() string {
	if m != nil && m.SourceName != nil {
		return *m.SourceName
	}
	return ""
}

func (m *EMWebPage) GetCanonicalFountainStream() string {
	if m != nil && m.CanonicalFountainStream != nil {
		return *m.CanonicalFountainStream
	}
	return ""
}

func (m *EMWebPage) GetUnfilteredFountainStreamArray() []string {
	if m != nil {
		return m.UnfilteredFountainStreamArray
	}
	return nil
}

func (m *EMWebPage) GetPremodFountainStreamArray() []string {
	if m != nil {
		return m.PremodFountainStreamArray
	}
	return nil
}

func (m *EMWebPage) GetPostmodFountainStreamArray() []string {
	if m != nil {
		return m.PostmodFountainStreamArray
	}
	return nil
}

func (m *EMWebPage) GetInboxFountainStreamArray() []string {
	if m != nil {
		return m.InboxFountainStreamArray
	}
	return nil
}

func (m *EMWebPage) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

type EMPlusPhoto struct {
	Thumbnail                 *EMImageObject              `protobuf:"bytes,1,opt,name=thumbnail" json:"thumbnail,omitempty"`
	OwnerObfuscatedId         *string                     `protobuf:"bytes,2,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	AlbumId                   *string                     `protobuf:"bytes,3,opt,name=albumId" json:"albumId,omitempty"`
	PhotoId                   *string                     `protobuf:"bytes,4,opt,name=photoId" json:"photoId,omitempty"`
	IsVideo                   *bool                       `protobuf:"varint,5,opt,name=isVideo" json:"isVideo,omitempty"`
	URL                       *string                     `protobuf:"bytes,6,opt,name=URL" json:"URL,omitempty"`
	OriginalMediaPlayerURL    *string                     `protobuf:"bytes,7,opt,name=originalMediaPlayerURL" json:"originalMediaPlayerURL,omitempty"`
	OriginalMediaContainerURL *string                     `protobuf:"bytes,8,opt,name=originalMediaContainerURL" json:"originalMediaContainerURL,omitempty"`
	OriginalLightboxPhotoId   *string                     `protobuf:"bytes,9,opt,name=originalLightboxPhotoId" json:"originalLightboxPhotoId,omitempty"`
	OriginalContentURL        *string                     `protobuf:"bytes,10,opt,name=originalContentURL" json:"originalContentURL,omitempty"`
	Name                      *string                     `protobuf:"bytes,11,opt,name=name" json:"name,omitempty"`
	OnepickMediaId            *string                     `protobuf:"bytes,12,opt,name=onepickMediaId" json:"onepickMediaId,omitempty"`
	MediaType                 *EMPlusPhoto_PhotoMediaType `protobuf:"varint,13,opt,name=mediaType,enum=hangouts.EMPlusPhoto_PhotoMediaType" json:"mediaType,omitempty"`
	StreamIdArray             []string                    `protobuf:"bytes,14,rep,name=streamIdArray" json:"streamIdArray,omitempty"`
	RepresentativeImage       *EMEmbedClientItem          `protobuf:"bytes,15,opt,name=representativeImage" json:"representativeImage,omitempty"`
	ImageQuality              *string                     `protobuf:"bytes,16,opt,name=imageQuality" json:"imageQuality,omitempty"`
	MaxHeight                 *string                     `protobuf:"bytes,17,opt,name=maxHeight" json:"maxHeight,omitempty"`
	MaxWidth                  *string                     `protobuf:"bytes,18,opt,name=maxWidth" json:"maxWidth,omitempty"`
	RelativeURL               *string                     `protobuf:"bytes,19,opt,name=relativeURL" json:"relativeURL,omitempty"`
	DownloadURL               *string                     `protobuf:"bytes,20,opt,name=downloadURL" json:"downloadURL,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                    `json:"-"`
	XXX_unrecognized          []byte                      `json:"-"`
	XXX_sizecache             int32                       `json:"-"`
}

func (m *EMPlusPhoto) Reset()         { *m = EMPlusPhoto{} }
func (m *EMPlusPhoto) String() string { return proto.CompactTextString(m) }
func (*EMPlusPhoto) ProtoMessage()    {}
func (*EMPlusPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{5}
}

func (m *EMPlusPhoto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMPlusPhoto.Unmarshal(m, b)
}
func (m *EMPlusPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMPlusPhoto.Marshal(b, m, deterministic)
}
func (m *EMPlusPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMPlusPhoto.Merge(m, src)
}
func (m *EMPlusPhoto) XXX_Size() int {
	return xxx_messageInfo_EMPlusPhoto.Size(m)
}
func (m *EMPlusPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_EMPlusPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_EMPlusPhoto proto.InternalMessageInfo

func (m *EMPlusPhoto) GetThumbnail() *EMImageObject {
	if m != nil {
		return m.Thumbnail
	}
	return nil
}

func (m *EMPlusPhoto) GetOwnerObfuscatedId() string {
	if m != nil && m.OwnerObfuscatedId != nil {
		return *m.OwnerObfuscatedId
	}
	return ""
}

func (m *EMPlusPhoto) GetAlbumId() string {
	if m != nil && m.AlbumId != nil {
		return *m.AlbumId
	}
	return ""
}

func (m *EMPlusPhoto) GetPhotoId() string {
	if m != nil && m.PhotoId != nil {
		return *m.PhotoId
	}
	return ""
}

func (m *EMPlusPhoto) GetIsVideo() bool {
	if m != nil && m.IsVideo != nil {
		return *m.IsVideo
	}
	return false
}

func (m *EMPlusPhoto) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMPlusPhoto) GetOriginalMediaPlayerURL() string {
	if m != nil && m.OriginalMediaPlayerURL != nil {
		return *m.OriginalMediaPlayerURL
	}
	return ""
}

func (m *EMPlusPhoto) GetOriginalMediaContainerURL() string {
	if m != nil && m.OriginalMediaContainerURL != nil {
		return *m.OriginalMediaContainerURL
	}
	return ""
}

func (m *EMPlusPhoto) GetOriginalLightboxPhotoId() string {
	if m != nil && m.OriginalLightboxPhotoId != nil {
		return *m.OriginalLightboxPhotoId
	}
	return ""
}

func (m *EMPlusPhoto) GetOriginalContentURL() string {
	if m != nil && m.OriginalContentURL != nil {
		return *m.OriginalContentURL
	}
	return ""
}

func (m *EMPlusPhoto) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMPlusPhoto) GetOnepickMediaId() string {
	if m != nil && m.OnepickMediaId != nil {
		return *m.OnepickMediaId
	}
	return ""
}

func (m *EMPlusPhoto) GetMediaType() EMPlusPhoto_PhotoMediaType {
	if m != nil && m.MediaType != nil {
		return *m.MediaType
	}
	return EMPlusPhoto_PhotoMediaType_Photosphere
}

func (m *EMPlusPhoto) GetStreamIdArray() []string {
	if m != nil {
		return m.StreamIdArray
	}
	return nil
}

func (m *EMPlusPhoto) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

func (m *EMPlusPhoto) GetImageQuality() string {
	if m != nil && m.ImageQuality != nil {
		return *m.ImageQuality
	}
	return ""
}

func (m *EMPlusPhoto) GetMaxHeight() string {
	if m != nil && m.MaxHeight != nil {
		return *m.MaxHeight
	}
	return ""
}

func (m *EMPlusPhoto) GetMaxWidth() string {
	if m != nil && m.MaxWidth != nil {
		return *m.MaxWidth
	}
	return ""
}

func (m *EMPlusPhoto) GetRelativeURL() string {
	if m != nil && m.RelativeURL != nil {
		return *m.RelativeURL
	}
	return ""
}

func (m *EMPlusPhoto) GetDownloadURL() string {
	if m != nil && m.DownloadURL != nil {
		return *m.DownloadURL
	}
	return ""
}

type EMPerson struct {
	Name                 *string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OwnerObfuscatedId    *string            `protobuf:"bytes,2,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	ImageURL             *string            `protobuf:"bytes,3,opt,name=imageURL" json:"imageURL,omitempty"`
	URL                  *string            `protobuf:"bytes,4,opt,name=URL" json:"URL,omitempty"`
	Gender               *string            `protobuf:"bytes,5,opt,name=gender" json:"gender,omitempty"`
	Email                *string            `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	RepresentativeImage  *EMEmbedClientItem `protobuf:"bytes,7,opt,name=representativeImage" json:"representativeImage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EMPerson) Reset()         { *m = EMPerson{} }
func (m *EMPerson) String() string { return proto.CompactTextString(m) }
func (*EMPerson) ProtoMessage()    {}
func (*EMPerson) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{6}
}

func (m *EMPerson) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMPerson.Unmarshal(m, b)
}
func (m *EMPerson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMPerson.Marshal(b, m, deterministic)
}
func (m *EMPerson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMPerson.Merge(m, src)
}
func (m *EMPerson) XXX_Size() int {
	return xxx_messageInfo_EMPerson.Size(m)
}
func (m *EMPerson) XXX_DiscardUnknown() {
	xxx_messageInfo_EMPerson.DiscardUnknown(m)
}

var xxx_messageInfo_EMPerson proto.InternalMessageInfo

func (m *EMPerson) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMPerson) GetOwnerObfuscatedId() string {
	if m != nil && m.OwnerObfuscatedId != nil {
		return *m.OwnerObfuscatedId
	}
	return ""
}

func (m *EMPerson) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMPerson) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMPerson) GetGender() string {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return ""
}

func (m *EMPerson) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *EMPerson) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

type EMImageObject struct {
	URL                  *string            `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	Name                 *string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string            `protobuf:"bytes,3,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	ImageURL             *string            `protobuf:"bytes,4,opt,name=imageURL" json:"imageURL,omitempty"`
	ThumbnailURL         *string            `protobuf:"bytes,5,opt,name=thumbnailURL" json:"thumbnailURL,omitempty"`
	ProxiedImage         *EMThumbnail       `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ContentLocation      *EMPlace           `protobuf:"bytes,7,opt,name=contentLocation" json:"contentLocation,omitempty"`
	Width                *string            `protobuf:"bytes,8,opt,name=width" json:"width,omitempty"`
	Height               *string            `protobuf:"bytes,9,opt,name=height" json:"height,omitempty"`
	WidthPx              *int32             `protobuf:"varint,10,opt,name=widthPx" json:"widthPx,omitempty"`
	HeightPx             *int32             `protobuf:"varint,11,opt,name=heightPx" json:"heightPx,omitempty"`
	ContentURL           *string            `protobuf:"bytes,12,opt,name=contentURL" json:"contentURL,omitempty"`
	SourceDomain         *string            `protobuf:"bytes,13,opt,name=sourceDomain" json:"sourceDomain,omitempty"`
	About                *EMEmbedClientItem `protobuf:"bytes,14,opt,name=about" json:"about,omitempty"`
	RepresentativeImage  *EMEmbedClientItem `protobuf:"bytes,15,opt,name=representativeImage" json:"representativeImage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EMImageObject) Reset()         { *m = EMImageObject{} }
func (m *EMImageObject) String() string { return proto.CompactTextString(m) }
func (*EMImageObject) ProtoMessage()    {}
func (*EMImageObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{7}
}

func (m *EMImageObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMImageObject.Unmarshal(m, b)
}
func (m *EMImageObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMImageObject.Marshal(b, m, deterministic)
}
func (m *EMImageObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMImageObject.Merge(m, src)
}
func (m *EMImageObject) XXX_Size() int {
	return xxx_messageInfo_EMImageObject.Size(m)
}
func (m *EMImageObject) XXX_DiscardUnknown() {
	xxx_messageInfo_EMImageObject.DiscardUnknown(m)
}

var xxx_messageInfo_EMImageObject proto.InternalMessageInfo

func (m *EMImageObject) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMImageObject) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMImageObject) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMImageObject) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMImageObject) GetThumbnailURL() string {
	if m != nil && m.ThumbnailURL != nil {
		return *m.ThumbnailURL
	}
	return ""
}

func (m *EMImageObject) GetProxiedImage() *EMThumbnail {
	if m != nil {
		return m.ProxiedImage
	}
	return nil
}

func (m *EMImageObject) GetContentLocation() *EMPlace {
	if m != nil {
		return m.ContentLocation
	}
	return nil
}

func (m *EMImageObject) GetWidth() string {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return ""
}

func (m *EMImageObject) GetHeight() string {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return ""
}

func (m *EMImageObject) GetWidthPx() int32 {
	if m != nil && m.WidthPx != nil {
		return *m.WidthPx
	}
	return 0
}

func (m *EMImageObject) GetHeightPx() int32 {
	if m != nil && m.HeightPx != nil {
		return *m.HeightPx
	}
	return 0
}

func (m *EMImageObject) GetContentURL() string {
	if m != nil && m.ContentURL != nil {
		return *m.ContentURL
	}
	return ""
}

func (m *EMImageObject) GetSourceDomain() string {
	if m != nil && m.SourceDomain != nil {
		return *m.SourceDomain
	}
	return ""
}

func (m *EMImageObject) GetAbout() *EMEmbedClientItem {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *EMImageObject) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

type EMPlaceV2 struct {
	URL                  *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL             *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage         *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL    *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray          []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	RelatedImageArray    []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName           *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	Address              *EMEmbedClientItem   `protobuf:"bytes,24,opt,name=address" json:"address,omitempty"`
	Geo                  *EMEmbedClientItem   `protobuf:"bytes,25,opt,name=geo" json:"geo,omitempty"`
	ClusterId            *string              `protobuf:"bytes,26,opt,name=clusterId" json:"clusterId,omitempty"`
	OwnerObfuscatedId    *string              `protobuf:"bytes,27,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	MapURL               *string              `protobuf:"bytes,28,opt,name=mapURL" json:"mapURL,omitempty"`
	ReferenceId          *string              `protobuf:"bytes,29,opt,name=referenceId" json:"referenceId,omitempty"`
	FaviconURL           *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	AggregateRating      *EMEmbedClientItem   `protobuf:"bytes,82,opt,name=aggregateRating" json:"aggregateRating,omitempty"`
	IdP                  *string              `protobuf:"bytes,106,opt,name=id_p,json=idP" json:"id_p,omitempty"`
	RepresentativeImage  *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	Telephone            *string              `protobuf:"bytes,227,opt,name=telephone" json:"telephone,omitempty"`
	FaxNumber            *string              `protobuf:"bytes,228,opt,name=faxNumber" json:"faxNumber,omitempty"`
	ExternalId           *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	IsClaimedByOwner     *bool                `protobuf:"varint,267,opt,name=isClaimedByOwner" json:"isClaimedByOwner,omitempty"`
	PlaceId              *string              `protobuf:"bytes,280,opt,name=placeId" json:"placeId,omitempty"`
	AmpURL               *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL       *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EMPlaceV2) Reset()         { *m = EMPlaceV2{} }
func (m *EMPlaceV2) String() string { return proto.CompactTextString(m) }
func (*EMPlaceV2) ProtoMessage()    {}
func (*EMPlaceV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{8}
}

func (m *EMPlaceV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMPlaceV2.Unmarshal(m, b)
}
func (m *EMPlaceV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMPlaceV2.Marshal(b, m, deterministic)
}
func (m *EMPlaceV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMPlaceV2.Merge(m, src)
}
func (m *EMPlaceV2) XXX_Size() int {
	return xxx_messageInfo_EMPlaceV2.Size(m)
}
func (m *EMPlaceV2) XXX_DiscardUnknown() {
	xxx_messageInfo_EMPlaceV2.DiscardUnknown(m)
}

var xxx_messageInfo_EMPlaceV2 proto.InternalMessageInfo

func (m *EMPlaceV2) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMPlaceV2) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMPlaceV2) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMPlaceV2) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMPlaceV2) GetDescriptionTruncated() string {
	if m != nil && m.DescriptionTruncated != nil {
		return *m.DescriptionTruncated
	}
	return ""
}

func (m *EMPlaceV2) GetProxiedImage() *EMThumbnail {
	if m != nil {
		return m.ProxiedImage
	}
	return nil
}

func (m *EMPlaceV2) GetProxiedFaviconURL() string {
	if m != nil && m.ProxiedFaviconURL != nil {
		return *m.ProxiedFaviconURL
	}
	return ""
}

func (m *EMPlaceV2) GetAuthorArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AuthorArray
	}
	return nil
}

func (m *EMPlaceV2) GetAbout() *EMEmbedClientItem {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *EMPlaceV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if m != nil {
		return m.RelatedImageArray
	}
	return nil
}

func (m *EMPlaceV2) GetSourceName() string {
	if m != nil && m.SourceName != nil {
		return *m.SourceName
	}
	return ""
}

func (m *EMPlaceV2) GetAddress() *EMEmbedClientItem {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *EMPlaceV2) GetGeo() *EMEmbedClientItem {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *EMPlaceV2) GetClusterId() string {
	if m != nil && m.ClusterId != nil {
		return *m.ClusterId
	}
	return ""
}

func (m *EMPlaceV2) GetOwnerObfuscatedId() string {
	if m != nil && m.OwnerObfuscatedId != nil {
		return *m.OwnerObfuscatedId
	}
	return ""
}

func (m *EMPlaceV2) GetMapURL() string {
	if m != nil && m.MapURL != nil {
		return *m.MapURL
	}
	return ""
}

func (m *EMPlaceV2) GetReferenceId() string {
	if m != nil && m.ReferenceId != nil {
		return *m.ReferenceId
	}
	return ""
}

func (m *EMPlaceV2) GetFaviconURL() string {
	if m != nil && m.FaviconURL != nil {
		return *m.FaviconURL
	}
	return ""
}

func (m *EMPlaceV2) GetAggregateRating() *EMEmbedClientItem {
	if m != nil {
		return m.AggregateRating
	}
	return nil
}

func (m *EMPlaceV2) GetIdP() string {
	if m != nil && m.IdP != nil {
		return *m.IdP
	}
	return ""
}

func (m *EMPlaceV2) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

func (m *EMPlaceV2) GetTelephone() string {
	if m != nil && m.Telephone != nil {
		return *m.Telephone
	}
	return ""
}

func (m *EMPlaceV2) GetFaxNumber() string {
	if m != nil && m.FaxNumber != nil {
		return *m.FaxNumber
	}
	return ""
}

func (m *EMPlaceV2) GetExternalId() string {
	if m != nil && m.ExternalId != nil {
		return *m.ExternalId
	}
	return ""
}

func (m *EMPlaceV2) GetIsClaimedByOwner() bool {
	if m != nil && m.IsClaimedByOwner != nil {
		return *m.IsClaimedByOwner
	}
	return false
}

func (m *EMPlaceV2) GetPlaceId() string {
	if m != nil && m.PlaceId != nil {
		return *m.PlaceId
	}
	return ""
}

func (m *EMPlaceV2) GetAmpURL() string {
	if m != nil && m.AmpURL != nil {
		return *m.AmpURL
	}
	return ""
}

func (m *EMPlaceV2) GetDestinationURL() string {
	if m != nil && m.DestinationURL != nil {
		return *m.DestinationURL
	}
	return ""
}

type EMThumbnail struct {
	ImageURL             *string  `protobuf:"bytes,1,opt,name=imageURL" json:"imageURL,omitempty"`
	BoxWidthPx           *int32   `protobuf:"varint,2,opt,name=boxWidthPx" json:"boxWidthPx,omitempty"`
	BoxHeightPx          *int32   `protobuf:"varint,3,opt,name=boxHeightPx" json:"boxHeightPx,omitempty"`
	ExactWidth           *bool    `protobuf:"varint,4,opt,name=exactWidth" json:"exactWidth,omitempty"`
	ExactHeight          *bool    `protobuf:"varint,5,opt,name=exactHeight" json:"exactHeight,omitempty"`
	RecenterVertically   *bool    `protobuf:"varint,6,opt,name=recenterVertically" json:"recenterVertically,omitempty"`
	UncroppedImageURL    *string  `protobuf:"bytes,7,opt,name=uncroppedImageURL" json:"uncroppedImageURL,omitempty"`
	ImageHeightPx        *int32   `protobuf:"varint,8,opt,name=imageHeightPx" json:"imageHeightPx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EMThumbnail) Reset()         { *m = EMThumbnail{} }
func (m *EMThumbnail) String() string { return proto.CompactTextString(m) }
func (*EMThumbnail) ProtoMessage()    {}
func (*EMThumbnail) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{9}
}

func (m *EMThumbnail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMThumbnail.Unmarshal(m, b)
}
func (m *EMThumbnail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMThumbnail.Marshal(b, m, deterministic)
}
func (m *EMThumbnail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMThumbnail.Merge(m, src)
}
func (m *EMThumbnail) XXX_Size() int {
	return xxx_messageInfo_EMThumbnail.Size(m)
}
func (m *EMThumbnail) XXX_DiscardUnknown() {
	xxx_messageInfo_EMThumbnail.DiscardUnknown(m)
}

var xxx_messageInfo_EMThumbnail proto.InternalMessageInfo

func (m *EMThumbnail) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMThumbnail) GetBoxWidthPx() int32 {
	if m != nil && m.BoxWidthPx != nil {
		return *m.BoxWidthPx
	}
	return 0
}

func (m *EMThumbnail) GetBoxHeightPx() int32 {
	if m != nil && m.BoxHeightPx != nil {
		return *m.BoxHeightPx
	}
	return 0
}

func (m *EMThumbnail) GetExactWidth() bool {
	if m != nil && m.ExactWidth != nil {
		return *m.ExactWidth
	}
	return false
}

func (m *EMThumbnail) GetExactHeight() bool {
	if m != nil && m.ExactHeight != nil {
		return *m.ExactHeight
	}
	return false
}

func (m *EMThumbnail) GetRecenterVertically() bool {
	if m != nil && m.RecenterVertically != nil {
		return *m.RecenterVertically
	}
	return false
}

func (m *EMThumbnail) GetUncroppedImageURL() string {
	if m != nil && m.UncroppedImageURL != nil {
		return *m.UncroppedImageURL
	}
	return ""
}

func (m *EMThumbnail) GetImageHeightPx() int32 {
	if m != nil && m.ImageHeightPx != nil {
		return *m.ImageHeightPx
	}
	return 0
}

type EMPostalAddressV2 struct {
	URL                  *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL             *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage         *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL    *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray          []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	RelatedImageArray    []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName           *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	AddressCountry       *string              `protobuf:"bytes,30,opt,name=addressCountry" json:"addressCountry,omitempty"`
	AddressLocality      *string              `protobuf:"bytes,31,opt,name=addressLocality" json:"addressLocality,omitempty"`
	AddressRegion        *string              `protobuf:"bytes,32,opt,name=addressRegion" json:"addressRegion,omitempty"`
	PostOfficeBoxNumber  *string              `protobuf:"bytes,33,opt,name=postOfficeBoxNumber" json:"postOfficeBoxNumber,omitempty"`
	PostalCode           *string              `protobuf:"bytes,34,opt,name=postalCode" json:"postalCode,omitempty"`
	StreetAddress        *string              `protobuf:"bytes,35,opt,name=streetAddress" json:"streetAddress,omitempty"`
	FaviconURL           *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	RepresentativeImage  *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	ExternalId           *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	AmpURL               *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL       *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EMPostalAddressV2) Reset()         { *m = EMPostalAddressV2{} }
func (m *EMPostalAddressV2) String() string { return proto.CompactTextString(m) }
func (*EMPostalAddressV2) ProtoMessage()    {}
func (*EMPostalAddressV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{10}
}

func (m *EMPostalAddressV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMPostalAddressV2.Unmarshal(m, b)
}
func (m *EMPostalAddressV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMPostalAddressV2.Marshal(b, m, deterministic)
}
func (m *EMPostalAddressV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMPostalAddressV2.Merge(m, src)
}
func (m *EMPostalAddressV2) XXX_Size() int {
	return xxx_messageInfo_EMPostalAddressV2.Size(m)
}
func (m *EMPostalAddressV2) XXX_DiscardUnknown() {
	xxx_messageInfo_EMPostalAddressV2.DiscardUnknown(m)
}

var xxx_messageInfo_EMPostalAddressV2 proto.InternalMessageInfo

func (m *EMPostalAddressV2) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMPostalAddressV2) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMPostalAddressV2) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMPostalAddressV2) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMPostalAddressV2) GetDescriptionTruncated() string {
	if m != nil && m.DescriptionTruncated != nil {
		return *m.DescriptionTruncated
	}
	return ""
}

func (m *EMPostalAddressV2) GetProxiedImage() *EMThumbnail {
	if m != nil {
		return m.ProxiedImage
	}
	return nil
}

func (m *EMPostalAddressV2) GetProxiedFaviconURL() string {
	if m != nil && m.ProxiedFaviconURL != nil {
		return *m.ProxiedFaviconURL
	}
	return ""
}

func (m *EMPostalAddressV2) GetAuthorArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AuthorArray
	}
	return nil
}

func (m *EMPostalAddressV2) GetAbout() *EMEmbedClientItem {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *EMPostalAddressV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if m != nil {
		return m.RelatedImageArray
	}
	return nil
}

func (m *EMPostalAddressV2) GetSourceName() string {
	if m != nil && m.SourceName != nil {
		return *m.SourceName
	}
	return ""
}

func (m *EMPostalAddressV2) GetAddressCountry() string {
	if m != nil && m.AddressCountry != nil {
		return *m.AddressCountry
	}
	return ""
}

func (m *EMPostalAddressV2) GetAddressLocality() string {
	if m != nil && m.AddressLocality != nil {
		return *m.AddressLocality
	}
	return ""
}

func (m *EMPostalAddressV2) GetAddressRegion() string {
	if m != nil && m.AddressRegion != nil {
		return *m.AddressRegion
	}
	return ""
}

func (m *EMPostalAddressV2) GetPostOfficeBoxNumber() string {
	if m != nil && m.PostOfficeBoxNumber != nil {
		return *m.PostOfficeBoxNumber
	}
	return ""
}

func (m *EMPostalAddressV2) GetPostalCode() string {
	if m != nil && m.PostalCode != nil {
		return *m.PostalCode
	}
	return ""
}

func (m *EMPostalAddressV2) GetStreetAddress() string {
	if m != nil && m.StreetAddress != nil {
		return *m.StreetAddress
	}
	return ""
}

func (m *EMPostalAddressV2) GetFaviconURL() string {
	if m != nil && m.FaviconURL != nil {
		return *m.FaviconURL
	}
	return ""
}

func (m *EMPostalAddressV2) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

func (m *EMPostalAddressV2) GetExternalId() string {
	if m != nil && m.ExternalId != nil {
		return *m.ExternalId
	}
	return ""
}

func (m *EMPostalAddressV2) GetAmpURL() string {
	if m != nil && m.AmpURL != nil {
		return *m.AmpURL
	}
	return ""
}

func (m *EMPostalAddressV2) GetDestinationURL() string {
	if m != nil && m.DestinationURL != nil {
		return *m.DestinationURL
	}
	return ""
}

type EMGeoCoordinatesV2 struct {
	URL                  *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL             *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage         *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL    *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray          []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	RelatedImageArray    []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName           *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	Latitude             *float64             `protobuf:"fixed64,36,opt,name=latitude" json:"latitude,omitempty"`
	Longitude            *float64             `protobuf:"fixed64,37,opt,name=longitude" json:"longitude,omitempty"`
	FaviconURL           *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	RepresentativeImage  *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	ExternalId           *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	AmpURL               *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL       *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EMGeoCoordinatesV2) Reset()         { *m = EMGeoCoordinatesV2{} }
func (m *EMGeoCoordinatesV2) String() string { return proto.CompactTextString(m) }
func (*EMGeoCoordinatesV2) ProtoMessage()    {}
func (*EMGeoCoordinatesV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{11}
}

func (m *EMGeoCoordinatesV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMGeoCoordinatesV2.Unmarshal(m, b)
}
func (m *EMGeoCoordinatesV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMGeoCoordinatesV2.Marshal(b, m, deterministic)
}
func (m *EMGeoCoordinatesV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMGeoCoordinatesV2.Merge(m, src)
}
func (m *EMGeoCoordinatesV2) XXX_Size() int {
	return xxx_messageInfo_EMGeoCoordinatesV2.Size(m)
}
func (m *EMGeoCoordinatesV2) XXX_DiscardUnknown() {
	xxx_messageInfo_EMGeoCoordinatesV2.DiscardUnknown(m)
}

var xxx_messageInfo_EMGeoCoordinatesV2 proto.InternalMessageInfo

func (m *EMGeoCoordinatesV2) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMGeoCoordinatesV2) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMGeoCoordinatesV2) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMGeoCoordinatesV2) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMGeoCoordinatesV2) GetDescriptionTruncated() string {
	if m != nil && m.DescriptionTruncated != nil {
		return *m.DescriptionTruncated
	}
	return ""
}

func (m *EMGeoCoordinatesV2) GetProxiedImage() *EMThumbnail {
	if m != nil {
		return m.ProxiedImage
	}
	return nil
}

func (m *EMGeoCoordinatesV2) GetProxiedFaviconURL() string {
	if m != nil && m.ProxiedFaviconURL != nil {
		return *m.ProxiedFaviconURL
	}
	return ""
}

func (m *EMGeoCoordinatesV2) GetAuthorArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AuthorArray
	}
	return nil
}

func (m *EMGeoCoordinatesV2) GetAbout() *EMEmbedClientItem {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *EMGeoCoordinatesV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if m != nil {
		return m.RelatedImageArray
	}
	return nil
}

func (m *EMGeoCoordinatesV2) GetSourceName() string {
	if m != nil && m.SourceName != nil {
		return *m.SourceName
	}
	return ""
}

func (m *EMGeoCoordinatesV2) GetLatitude() float64 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *EMGeoCoordinatesV2) GetLongitude() float64 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *EMGeoCoordinatesV2) GetFaviconURL() string {
	if m != nil && m.FaviconURL != nil {
		return *m.FaviconURL
	}
	return ""
}

func (m *EMGeoCoordinatesV2) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

func (m *EMGeoCoordinatesV2) GetExternalId() string {
	if m != nil && m.ExternalId != nil {
		return *m.ExternalId
	}
	return ""
}

func (m *EMGeoCoordinatesV2) GetAmpURL() string {
	if m != nil && m.AmpURL != nil {
		return *m.AmpURL
	}
	return ""
}

func (m *EMGeoCoordinatesV2) GetDestinationURL() string {
	if m != nil && m.DestinationURL != nil {
		return *m.DestinationURL
	}
	return ""
}

type EMThingV2 struct {
	URL                  *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL             *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage         *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL    *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray          []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	RelatedImageArray    []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName           *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	FaviconURL           *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	RepresentativeImage  *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	ExternalId           *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	AmpURL               *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL       *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EMThingV2) Reset()         { *m = EMThingV2{} }
func (m *EMThingV2) String() string { return proto.CompactTextString(m) }
func (*EMThingV2) ProtoMessage()    {}
func (*EMThingV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{12}
}

func (m *EMThingV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMThingV2.Unmarshal(m, b)
}
func (m *EMThingV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMThingV2.Marshal(b, m, deterministic)
}
func (m *EMThingV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMThingV2.Merge(m, src)
}
func (m *EMThingV2) XXX_Size() int {
	return xxx_messageInfo_EMThingV2.Size(m)
}
func (m *EMThingV2) XXX_DiscardUnknown() {
	xxx_messageInfo_EMThingV2.DiscardUnknown(m)
}

var xxx_messageInfo_EMThingV2 proto.InternalMessageInfo

func (m *EMThingV2) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMThingV2) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMThingV2) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMThingV2) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMThingV2) GetDescriptionTruncated() string {
	if m != nil && m.DescriptionTruncated != nil {
		return *m.DescriptionTruncated
	}
	return ""
}

func (m *EMThingV2) GetProxiedImage() *EMThumbnail {
	if m != nil {
		return m.ProxiedImage
	}
	return nil
}

func (m *EMThingV2) GetProxiedFaviconURL() string {
	if m != nil && m.ProxiedFaviconURL != nil {
		return *m.ProxiedFaviconURL
	}
	return ""
}

func (m *EMThingV2) GetAuthorArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AuthorArray
	}
	return nil
}

func (m *EMThingV2) GetAbout() *EMEmbedClientItem {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *EMThingV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if m != nil {
		return m.RelatedImageArray
	}
	return nil
}

func (m *EMThingV2) GetSourceName() string {
	if m != nil && m.SourceName != nil {
		return *m.SourceName
	}
	return ""
}

func (m *EMThingV2) GetFaviconURL() string {
	if m != nil && m.FaviconURL != nil {
		return *m.FaviconURL
	}
	return ""
}

func (m *EMThingV2) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

func (m *EMThingV2) GetExternalId() string {
	if m != nil && m.ExternalId != nil {
		return *m.ExternalId
	}
	return ""
}

func (m *EMThingV2) GetAmpURL() string {
	if m != nil && m.AmpURL != nil {
		return *m.AmpURL
	}
	return ""
}

func (m *EMThingV2) GetDestinationURL() string {
	if m != nil && m.DestinationURL != nil {
		return *m.DestinationURL
	}
	return ""
}

type EMPlusAudioV2 struct {
	URL                           *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL                      *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                          *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP                  *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated          *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage                  *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL             *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray                   []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                         *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	Text                          *string              `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	RelatedImageArray             []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName                    *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	CanonicalFountainStream       *string              `protobuf:"bytes,13,opt,name=canonicalFountainStream" json:"canonicalFountainStream,omitempty"`
	UnfilteredFountainStreamArray []string             `protobuf:"bytes,14,rep,name=unfilteredFountainStreamArray" json:"unfilteredFountainStreamArray,omitempty"`
	PremodFountainStreamArray     []string             `protobuf:"bytes,15,rep,name=premodFountainStreamArray" json:"premodFountainStreamArray,omitempty"`
	PostmodFountainStreamArray    []string             `protobuf:"bytes,16,rep,name=postmodFountainStreamArray" json:"postmodFountainStreamArray,omitempty"`
	InboxFountainStreamArray      []string             `protobuf:"bytes,17,rep,name=inboxFountainStreamArray" json:"inboxFountainStreamArray,omitempty"`
	ContentLocation               *EMEmbedClientItem   `protobuf:"bytes,18,opt,name=contentLocation" json:"contentLocation,omitempty"`
	Width                         *string              `protobuf:"bytes,19,opt,name=width" json:"width,omitempty"`
	Height                        *string              `protobuf:"bytes,20,opt,name=height" json:"height,omitempty"`
	WidthPx                       *int32               `protobuf:"varint,21,opt,name=widthPx" json:"widthPx,omitempty"`
	HeightPx                      *int32               `protobuf:"varint,22,opt,name=heightPx" json:"heightPx,omitempty"`
	ContentURL                    *string              `protobuf:"bytes,23,opt,name=contentURL" json:"contentURL,omitempty"`
	OwnerObfuscatedId             *string              `protobuf:"bytes,27,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	AlbumId                       *string              `protobuf:"bytes,38,opt,name=albumId" json:"albumId,omitempty"`
	PhotoId                       *string              `protobuf:"bytes,39,opt,name=photoId" json:"photoId,omitempty"`
	AssociatedMediaArray          []*EMEmbedClientItem `protobuf:"bytes,42,rep,name=associatedMediaArray" json:"associatedMediaArray,omitempty"`
	IsFamilyFriendly              *bool                `protobuf:"varint,65,opt,name=isFamilyFriendly" json:"isFamilyFriendly,omitempty"`
	EmbedURL                      *string              `protobuf:"bytes,66,opt,name=embedURL" json:"embedURL,omitempty"`
	PlayerType                    *string              `protobuf:"bytes,67,opt,name=playerType" json:"playerType,omitempty"`
	Duration                      *string              `protobuf:"bytes,68,opt,name=duration" json:"duration,omitempty"`
	FaviconURL                    *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	AggregateRating               *EMEmbedClientItem   `protobuf:"bytes,82,opt,name=aggregateRating" json:"aggregateRating,omitempty"`
	OffersArray                   []*EMEmbedClientItem `protobuf:"bytes,83,rep,name=offersArray" json:"offersArray,omitempty"`
	Audio                         *EMEmbedClientItem   `protobuf:"bytes,96,opt,name=audio" json:"audio,omitempty"`
	DateCreated                   *string              `protobuf:"bytes,111,opt,name=dateCreated" json:"dateCreated,omitempty"`
	DateModified                  *string              `protobuf:"bytes,112,opt,name=dateModified" json:"dateModified,omitempty"`
	RepresentativeImage           *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	Genre                         *string              `protobuf:"bytes,188,opt,name=genre" json:"genre,omitempty"`
	ContentRating                 *string              `protobuf:"bytes,189,opt,name=contentRating" json:"contentRating,omitempty"`
	InLanguage                    *string              `protobuf:"bytes,190,opt,name=inLanguage" json:"inLanguage,omitempty"`
	DatePublished                 *string              `protobuf:"bytes,191,opt,name=datePublished" json:"datePublished,omitempty"`
	ClientEmbedURL                *string              `protobuf:"bytes,215,opt,name=clientEmbedURL" json:"clientEmbedURL,omitempty"`
	ContentProfileName            *string              `protobuf:"bytes,249,opt,name=contentProfileName" json:"contentProfileName,omitempty"`
	ContentProfileId              *string              `protobuf:"bytes,252,opt,name=contentProfileId" json:"contentProfileId,omitempty"`
	ExternalId                    *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	MediaKey                      *string              `protobuf:"bytes,258,opt,name=mediaKey" json:"mediaKey,omitempty"`
	AmpURL                        *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL                *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	FileFormat                    *string              `protobuf:"bytes,289,opt,name=fileFormat" json:"fileFormat,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}             `json:"-"`
	XXX_unrecognized              []byte               `json:"-"`
	XXX_sizecache                 int32                `json:"-"`
}

func (m *EMPlusAudioV2) Reset()         { *m = EMPlusAudioV2{} }
func (m *EMPlusAudioV2) String() string { return proto.CompactTextString(m) }
func (*EMPlusAudioV2) ProtoMessage()    {}
func (*EMPlusAudioV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{13}
}

func (m *EMPlusAudioV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMPlusAudioV2.Unmarshal(m, b)
}
func (m *EMPlusAudioV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMPlusAudioV2.Marshal(b, m, deterministic)
}
func (m *EMPlusAudioV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMPlusAudioV2.Merge(m, src)
}
func (m *EMPlusAudioV2) XXX_Size() int {
	return xxx_messageInfo_EMPlusAudioV2.Size(m)
}
func (m *EMPlusAudioV2) XXX_DiscardUnknown() {
	xxx_messageInfo_EMPlusAudioV2.DiscardUnknown(m)
}

var xxx_messageInfo_EMPlusAudioV2 proto.InternalMessageInfo

func (m *EMPlusAudioV2) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMPlusAudioV2) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMPlusAudioV2) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMPlusAudioV2) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMPlusAudioV2) GetDescriptionTruncated() string {
	if m != nil && m.DescriptionTruncated != nil {
		return *m.DescriptionTruncated
	}
	return ""
}

func (m *EMPlusAudioV2) GetProxiedImage() *EMThumbnail {
	if m != nil {
		return m.ProxiedImage
	}
	return nil
}

func (m *EMPlusAudioV2) GetProxiedFaviconURL() string {
	if m != nil && m.ProxiedFaviconURL != nil {
		return *m.ProxiedFaviconURL
	}
	return ""
}

func (m *EMPlusAudioV2) GetAuthorArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AuthorArray
	}
	return nil
}

func (m *EMPlusAudioV2) GetAbout() *EMEmbedClientItem {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *EMPlusAudioV2) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *EMPlusAudioV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if m != nil {
		return m.RelatedImageArray
	}
	return nil
}

func (m *EMPlusAudioV2) GetSourceName() string {
	if m != nil && m.SourceName != nil {
		return *m.SourceName
	}
	return ""
}

func (m *EMPlusAudioV2) GetCanonicalFountainStream() string {
	if m != nil && m.CanonicalFountainStream != nil {
		return *m.CanonicalFountainStream
	}
	return ""
}

func (m *EMPlusAudioV2) GetUnfilteredFountainStreamArray() []string {
	if m != nil {
		return m.UnfilteredFountainStreamArray
	}
	return nil
}

func (m *EMPlusAudioV2) GetPremodFountainStreamArray() []string {
	if m != nil {
		return m.PremodFountainStreamArray
	}
	return nil
}

func (m *EMPlusAudioV2) GetPostmodFountainStreamArray() []string {
	if m != nil {
		return m.PostmodFountainStreamArray
	}
	return nil
}

func (m *EMPlusAudioV2) GetInboxFountainStreamArray() []string {
	if m != nil {
		return m.InboxFountainStreamArray
	}
	return nil
}

func (m *EMPlusAudioV2) GetContentLocation() *EMEmbedClientItem {
	if m != nil {
		return m.ContentLocation
	}
	return nil
}

func (m *EMPlusAudioV2) GetWidth() string {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return ""
}

func (m *EMPlusAudioV2) GetHeight() string {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return ""
}

func (m *EMPlusAudioV2) GetWidthPx() int32 {
	if m != nil && m.WidthPx != nil {
		return *m.WidthPx
	}
	return 0
}

func (m *EMPlusAudioV2) GetHeightPx() int32 {
	if m != nil && m.HeightPx != nil {
		return *m.HeightPx
	}
	return 0
}

func (m *EMPlusAudioV2) GetContentURL() string {
	if m != nil && m.ContentURL != nil {
		return *m.ContentURL
	}
	return ""
}

func (m *EMPlusAudioV2) GetOwnerObfuscatedId() string {
	if m != nil && m.OwnerObfuscatedId != nil {
		return *m.OwnerObfuscatedId
	}
	return ""
}

func (m *EMPlusAudioV2) GetAlbumId() string {
	if m != nil && m.AlbumId != nil {
		return *m.AlbumId
	}
	return ""
}

func (m *EMPlusAudioV2) GetPhotoId() string {
	if m != nil && m.PhotoId != nil {
		return *m.PhotoId
	}
	return ""
}

func (m *EMPlusAudioV2) GetAssociatedMediaArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AssociatedMediaArray
	}
	return nil
}

func (m *EMPlusAudioV2) GetIsFamilyFriendly() bool {
	if m != nil && m.IsFamilyFriendly != nil {
		return *m.IsFamilyFriendly
	}
	return false
}

func (m *EMPlusAudioV2) GetEmbedURL() string {
	if m != nil && m.EmbedURL != nil {
		return *m.EmbedURL
	}
	return ""
}

func (m *EMPlusAudioV2) GetPlayerType() string {
	if m != nil && m.PlayerType != nil {
		return *m.PlayerType
	}
	return ""
}

func (m *EMPlusAudioV2) GetDuration() string {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return ""
}

func (m *EMPlusAudioV2) GetFaviconURL() string {
	if m != nil && m.FaviconURL != nil {
		return *m.FaviconURL
	}
	return ""
}

func (m *EMPlusAudioV2) GetAggregateRating() *EMEmbedClientItem {
	if m != nil {
		return m.AggregateRating
	}
	return nil
}

func (m *EMPlusAudioV2) GetOffersArray() []*EMEmbedClientItem {
	if m != nil {
		return m.OffersArray
	}
	return nil
}

func (m *EMPlusAudioV2) GetAudio() *EMEmbedClientItem {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *EMPlusAudioV2) GetDateCreated() string {
	if m != nil && m.DateCreated != nil {
		return *m.DateCreated
	}
	return ""
}

func (m *EMPlusAudioV2) GetDateModified() string {
	if m != nil && m.DateModified != nil {
		return *m.DateModified
	}
	return ""
}

func (m *EMPlusAudioV2) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

func (m *EMPlusAudioV2) GetGenre() string {
	if m != nil && m.Genre != nil {
		return *m.Genre
	}
	return ""
}

func (m *EMPlusAudioV2) GetContentRating() string {
	if m != nil && m.ContentRating != nil {
		return *m.ContentRating
	}
	return ""
}

func (m *EMPlusAudioV2) GetInLanguage() string {
	if m != nil && m.InLanguage != nil {
		return *m.InLanguage
	}
	return ""
}

func (m *EMPlusAudioV2) GetDatePublished() string {
	if m != nil && m.DatePublished != nil {
		return *m.DatePublished
	}
	return ""
}

func (m *EMPlusAudioV2) GetClientEmbedURL() string {
	if m != nil && m.ClientEmbedURL != nil {
		return *m.ClientEmbedURL
	}
	return ""
}

func (m *EMPlusAudioV2) GetContentProfileName() string {
	if m != nil && m.ContentProfileName != nil {
		return *m.ContentProfileName
	}
	return ""
}

func (m *EMPlusAudioV2) GetContentProfileId() string {
	if m != nil && m.ContentProfileId != nil {
		return *m.ContentProfileId
	}
	return ""
}

func (m *EMPlusAudioV2) GetExternalId() string {
	if m != nil && m.ExternalId != nil {
		return *m.ExternalId
	}
	return ""
}

func (m *EMPlusAudioV2) GetMediaKey() string {
	if m != nil && m.MediaKey != nil {
		return *m.MediaKey
	}
	return ""
}

func (m *EMPlusAudioV2) GetAmpURL() string {
	if m != nil && m.AmpURL != nil {
		return *m.AmpURL
	}
	return ""
}

func (m *EMPlusAudioV2) GetDestinationURL() string {
	if m != nil && m.DestinationURL != nil {
		return *m.DestinationURL
	}
	return ""
}

func (m *EMPlusAudioV2) GetFileFormat() string {
	if m != nil && m.FileFormat != nil {
		return *m.FileFormat
	}
	return ""
}

type EMPersonV2 struct {
	URL                  *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL             *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                 *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP         *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage         *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL    *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray          []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	RelatedImageArray    []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName           *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	OwnerObfuscatedId    *string              `protobuf:"bytes,27,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	Gender               *string              `protobuf:"bytes,48,opt,name=gender" json:"gender,omitempty"`
	Email                *string              `protobuf:"bytes,49,opt,name=email" json:"email,omitempty"`
	FaviconURL           *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	RepresentativeImage  *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	ExternalId           *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	AmpURL               *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL       *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EMPersonV2) Reset()         { *m = EMPersonV2{} }
func (m *EMPersonV2) String() string { return proto.CompactTextString(m) }
func (*EMPersonV2) ProtoMessage()    {}
func (*EMPersonV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{14}
}

func (m *EMPersonV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMPersonV2.Unmarshal(m, b)
}
func (m *EMPersonV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMPersonV2.Marshal(b, m, deterministic)
}
func (m *EMPersonV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMPersonV2.Merge(m, src)
}
func (m *EMPersonV2) XXX_Size() int {
	return xxx_messageInfo_EMPersonV2.Size(m)
}
func (m *EMPersonV2) XXX_DiscardUnknown() {
	xxx_messageInfo_EMPersonV2.DiscardUnknown(m)
}

var xxx_messageInfo_EMPersonV2 proto.InternalMessageInfo

func (m *EMPersonV2) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMPersonV2) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMPersonV2) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMPersonV2) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMPersonV2) GetDescriptionTruncated() string {
	if m != nil && m.DescriptionTruncated != nil {
		return *m.DescriptionTruncated
	}
	return ""
}

func (m *EMPersonV2) GetProxiedImage() *EMThumbnail {
	if m != nil {
		return m.ProxiedImage
	}
	return nil
}

func (m *EMPersonV2) GetProxiedFaviconURL() string {
	if m != nil && m.ProxiedFaviconURL != nil {
		return *m.ProxiedFaviconURL
	}
	return ""
}

func (m *EMPersonV2) GetAuthorArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AuthorArray
	}
	return nil
}

func (m *EMPersonV2) GetAbout() *EMEmbedClientItem {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *EMPersonV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if m != nil {
		return m.RelatedImageArray
	}
	return nil
}

func (m *EMPersonV2) GetSourceName() string {
	if m != nil && m.SourceName != nil {
		return *m.SourceName
	}
	return ""
}

func (m *EMPersonV2) GetOwnerObfuscatedId() string {
	if m != nil && m.OwnerObfuscatedId != nil {
		return *m.OwnerObfuscatedId
	}
	return ""
}

func (m *EMPersonV2) GetGender() string {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return ""
}

func (m *EMPersonV2) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *EMPersonV2) GetFaviconURL() string {
	if m != nil && m.FaviconURL != nil {
		return *m.FaviconURL
	}
	return ""
}

func (m *EMPersonV2) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

func (m *EMPersonV2) GetExternalId() string {
	if m != nil && m.ExternalId != nil {
		return *m.ExternalId
	}
	return ""
}

func (m *EMPersonV2) GetAmpURL() string {
	if m != nil && m.AmpURL != nil {
		return *m.AmpURL
	}
	return ""
}

func (m *EMPersonV2) GetDestinationURL() string {
	if m != nil && m.DestinationURL != nil {
		return *m.DestinationURL
	}
	return ""
}

type EMImageObjectV2 struct {
	URL                           *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL                      *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                          *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP                  *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated          *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage                  *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL             *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray                   []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                         *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	Text                          *string              `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	RelatedImageArray             []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName                    *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	CanonicalFountainStream       *string              `protobuf:"bytes,13,opt,name=canonicalFountainStream" json:"canonicalFountainStream,omitempty"`
	UnfilteredFountainStreamArray []string             `protobuf:"bytes,14,rep,name=unfilteredFountainStreamArray" json:"unfilteredFountainStreamArray,omitempty"`
	PremodFountainStreamArray     []string             `protobuf:"bytes,15,rep,name=premodFountainStreamArray" json:"premodFountainStreamArray,omitempty"`
	PostmodFountainStreamArray    []string             `protobuf:"bytes,16,rep,name=postmodFountainStreamArray" json:"postmodFountainStreamArray,omitempty"`
	InboxFountainStreamArray      []string             `protobuf:"bytes,17,rep,name=inboxFountainStreamArray" json:"inboxFountainStreamArray,omitempty"`
	ContentLocation               *EMEmbedClientItem   `protobuf:"bytes,18,opt,name=contentLocation" json:"contentLocation,omitempty"`
	Width                         *string              `protobuf:"bytes,19,opt,name=width" json:"width,omitempty"`
	Height                        *string              `protobuf:"bytes,20,opt,name=height" json:"height,omitempty"`
	WidthPx                       *int32               `protobuf:"varint,21,opt,name=widthPx" json:"widthPx,omitempty"`
	HeightPx                      *int32               `protobuf:"varint,22,opt,name=heightPx" json:"heightPx,omitempty"`
	ContentURL                    *string              `protobuf:"bytes,23,opt,name=contentURL" json:"contentURL,omitempty"`
	AssociatedMediaArray          []*EMEmbedClientItem `protobuf:"bytes,42,rep,name=associatedMediaArray" json:"associatedMediaArray,omitempty"`
	IsFamilyFriendly              *bool                `protobuf:"varint,65,opt,name=isFamilyFriendly" json:"isFamilyFriendly,omitempty"`
	EmbedURL                      *string              `protobuf:"bytes,66,opt,name=embedURL" json:"embedURL,omitempty"`
	PlayerType                    *string              `protobuf:"bytes,67,opt,name=playerType" json:"playerType,omitempty"`
	Duration                      *string              `protobuf:"bytes,68,opt,name=duration" json:"duration,omitempty"`
	FaviconURL                    *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	AggregateRating               *EMEmbedClientItem   `protobuf:"bytes,82,opt,name=aggregateRating" json:"aggregateRating,omitempty"`
	OffersArray                   []*EMEmbedClientItem `protobuf:"bytes,83,rep,name=offersArray" json:"offersArray,omitempty"`
	Audio                         *EMEmbedClientItem   `protobuf:"bytes,96,opt,name=audio" json:"audio,omitempty"`
	DateCreated                   *string              `protobuf:"bytes,111,opt,name=dateCreated" json:"dateCreated,omitempty"`
	DateModified                  *string              `protobuf:"bytes,112,opt,name=dateModified" json:"dateModified,omitempty"`
	RepresentativeImage           *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	Genre                         *string              `protobuf:"bytes,188,opt,name=genre" json:"genre,omitempty"`
	ContentRating                 *string              `protobuf:"bytes,189,opt,name=contentRating" json:"contentRating,omitempty"`
	InLanguage                    *string              `protobuf:"bytes,190,opt,name=inLanguage" json:"inLanguage,omitempty"`
	DatePublished                 *string              `protobuf:"bytes,191,opt,name=datePublished" json:"datePublished,omitempty"`
	ContentProfileName            *string              `protobuf:"bytes,249,opt,name=contentProfileName" json:"contentProfileName,omitempty"`
	ContentProfileId              *string              `protobuf:"bytes,252,opt,name=contentProfileId" json:"contentProfileId,omitempty"`
	ExternalId                    *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	AmpURL                        *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL                *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	FileFormat                    *string              `protobuf:"bytes,289,opt,name=fileFormat" json:"fileFormat,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}             `json:"-"`
	XXX_unrecognized              []byte               `json:"-"`
	XXX_sizecache                 int32                `json:"-"`
}

func (m *EMImageObjectV2) Reset()         { *m = EMImageObjectV2{} }
func (m *EMImageObjectV2) String() string { return proto.CompactTextString(m) }
func (*EMImageObjectV2) ProtoMessage()    {}
func (*EMImageObjectV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{15}
}

func (m *EMImageObjectV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMImageObjectV2.Unmarshal(m, b)
}
func (m *EMImageObjectV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMImageObjectV2.Marshal(b, m, deterministic)
}
func (m *EMImageObjectV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMImageObjectV2.Merge(m, src)
}
func (m *EMImageObjectV2) XXX_Size() int {
	return xxx_messageInfo_EMImageObjectV2.Size(m)
}
func (m *EMImageObjectV2) XXX_DiscardUnknown() {
	xxx_messageInfo_EMImageObjectV2.DiscardUnknown(m)
}

var xxx_messageInfo_EMImageObjectV2 proto.InternalMessageInfo

func (m *EMImageObjectV2) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMImageObjectV2) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMImageObjectV2) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMImageObjectV2) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMImageObjectV2) GetDescriptionTruncated() string {
	if m != nil && m.DescriptionTruncated != nil {
		return *m.DescriptionTruncated
	}
	return ""
}

func (m *EMImageObjectV2) GetProxiedImage() *EMThumbnail {
	if m != nil {
		return m.ProxiedImage
	}
	return nil
}

func (m *EMImageObjectV2) GetProxiedFaviconURL() string {
	if m != nil && m.ProxiedFaviconURL != nil {
		return *m.ProxiedFaviconURL
	}
	return ""
}

func (m *EMImageObjectV2) GetAuthorArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AuthorArray
	}
	return nil
}

func (m *EMImageObjectV2) GetAbout() *EMEmbedClientItem {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *EMImageObjectV2) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *EMImageObjectV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if m != nil {
		return m.RelatedImageArray
	}
	return nil
}

func (m *EMImageObjectV2) GetSourceName() string {
	if m != nil && m.SourceName != nil {
		return *m.SourceName
	}
	return ""
}

func (m *EMImageObjectV2) GetCanonicalFountainStream() string {
	if m != nil && m.CanonicalFountainStream != nil {
		return *m.CanonicalFountainStream
	}
	return ""
}

func (m *EMImageObjectV2) GetUnfilteredFountainStreamArray() []string {
	if m != nil {
		return m.UnfilteredFountainStreamArray
	}
	return nil
}

func (m *EMImageObjectV2) GetPremodFountainStreamArray() []string {
	if m != nil {
		return m.PremodFountainStreamArray
	}
	return nil
}

func (m *EMImageObjectV2) GetPostmodFountainStreamArray() []string {
	if m != nil {
		return m.PostmodFountainStreamArray
	}
	return nil
}

func (m *EMImageObjectV2) GetInboxFountainStreamArray() []string {
	if m != nil {
		return m.InboxFountainStreamArray
	}
	return nil
}

func (m *EMImageObjectV2) GetContentLocation() *EMEmbedClientItem {
	if m != nil {
		return m.ContentLocation
	}
	return nil
}

func (m *EMImageObjectV2) GetWidth() string {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return ""
}

func (m *EMImageObjectV2) GetHeight() string {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return ""
}

func (m *EMImageObjectV2) GetWidthPx() int32 {
	if m != nil && m.WidthPx != nil {
		return *m.WidthPx
	}
	return 0
}

func (m *EMImageObjectV2) GetHeightPx() int32 {
	if m != nil && m.HeightPx != nil {
		return *m.HeightPx
	}
	return 0
}

func (m *EMImageObjectV2) GetContentURL() string {
	if m != nil && m.ContentURL != nil {
		return *m.ContentURL
	}
	return ""
}

func (m *EMImageObjectV2) GetAssociatedMediaArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AssociatedMediaArray
	}
	return nil
}

func (m *EMImageObjectV2) GetIsFamilyFriendly() bool {
	if m != nil && m.IsFamilyFriendly != nil {
		return *m.IsFamilyFriendly
	}
	return false
}

func (m *EMImageObjectV2) GetEmbedURL() string {
	if m != nil && m.EmbedURL != nil {
		return *m.EmbedURL
	}
	return ""
}

func (m *EMImageObjectV2) GetPlayerType() string {
	if m != nil && m.PlayerType != nil {
		return *m.PlayerType
	}
	return ""
}

func (m *EMImageObjectV2) GetDuration() string {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return ""
}

func (m *EMImageObjectV2) GetFaviconURL() string {
	if m != nil && m.FaviconURL != nil {
		return *m.FaviconURL
	}
	return ""
}

func (m *EMImageObjectV2) GetAggregateRating() *EMEmbedClientItem {
	if m != nil {
		return m.AggregateRating
	}
	return nil
}

func (m *EMImageObjectV2) GetOffersArray() []*EMEmbedClientItem {
	if m != nil {
		return m.OffersArray
	}
	return nil
}

func (m *EMImageObjectV2) GetAudio() *EMEmbedClientItem {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *EMImageObjectV2) GetDateCreated() string {
	if m != nil && m.DateCreated != nil {
		return *m.DateCreated
	}
	return ""
}

func (m *EMImageObjectV2) GetDateModified() string {
	if m != nil && m.DateModified != nil {
		return *m.DateModified
	}
	return ""
}

func (m *EMImageObjectV2) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

func (m *EMImageObjectV2) GetGenre() string {
	if m != nil && m.Genre != nil {
		return *m.Genre
	}
	return ""
}

func (m *EMImageObjectV2) GetContentRating() string {
	if m != nil && m.ContentRating != nil {
		return *m.ContentRating
	}
	return ""
}

func (m *EMImageObjectV2) GetInLanguage() string {
	if m != nil && m.InLanguage != nil {
		return *m.InLanguage
	}
	return ""
}

func (m *EMImageObjectV2) GetDatePublished() string {
	if m != nil && m.DatePublished != nil {
		return *m.DatePublished
	}
	return ""
}

func (m *EMImageObjectV2) GetContentProfileName() string {
	if m != nil && m.ContentProfileName != nil {
		return *m.ContentProfileName
	}
	return ""
}

func (m *EMImageObjectV2) GetContentProfileId() string {
	if m != nil && m.ContentProfileId != nil {
		return *m.ContentProfileId
	}
	return ""
}

func (m *EMImageObjectV2) GetExternalId() string {
	if m != nil && m.ExternalId != nil {
		return *m.ExternalId
	}
	return ""
}

func (m *EMImageObjectV2) GetAmpURL() string {
	if m != nil && m.AmpURL != nil {
		return *m.AmpURL
	}
	return ""
}

func (m *EMImageObjectV2) GetDestinationURL() string {
	if m != nil && m.DestinationURL != nil {
		return *m.DestinationURL
	}
	return ""
}

func (m *EMImageObjectV2) GetFileFormat() string {
	if m != nil && m.FileFormat != nil {
		return *m.FileFormat
	}
	return ""
}

type EMWebPageV2 struct {
	URL                           *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL                      *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                          *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP                  *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated          *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage                  *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL             *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray                   []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                         *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	Text                          *string              `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	RelatedImageArray             []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName                    *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	CanonicalFountainStream       *string              `protobuf:"bytes,13,opt,name=canonicalFountainStream" json:"canonicalFountainStream,omitempty"`
	UnfilteredFountainStreamArray []string             `protobuf:"bytes,14,rep,name=unfilteredFountainStreamArray" json:"unfilteredFountainStreamArray,omitempty"`
	PremodFountainStreamArray     []string             `protobuf:"bytes,15,rep,name=premodFountainStreamArray" json:"premodFountainStreamArray,omitempty"`
	PostmodFountainStreamArray    []string             `protobuf:"bytes,16,rep,name=postmodFountainStreamArray" json:"postmodFountainStreamArray,omitempty"`
	InboxFountainStreamArray      []string             `protobuf:"bytes,17,rep,name=inboxFountainStreamArray" json:"inboxFountainStreamArray,omitempty"`
	ContentLocation               *EMEmbedClientItem   `protobuf:"bytes,18,opt,name=contentLocation" json:"contentLocation,omitempty"`
	AssociatedMediaArray          []*EMEmbedClientItem `protobuf:"bytes,42,rep,name=associatedMediaArray" json:"associatedMediaArray,omitempty"`
	IsFamilyFriendly              *bool                `protobuf:"varint,65,opt,name=isFamilyFriendly" json:"isFamilyFriendly,omitempty"`
	FaviconURL                    *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	AggregateRating               *EMEmbedClientItem   `protobuf:"bytes,82,opt,name=aggregateRating" json:"aggregateRating,omitempty"`
	OffersArray                   []*EMEmbedClientItem `protobuf:"bytes,83,rep,name=offersArray" json:"offersArray,omitempty"`
	Audio                         *EMEmbedClientItem   `protobuf:"bytes,96,opt,name=audio" json:"audio,omitempty"`
	DateCreated                   *string              `protobuf:"bytes,111,opt,name=dateCreated" json:"dateCreated,omitempty"`
	DateModified                  *string              `protobuf:"bytes,112,opt,name=dateModified" json:"dateModified,omitempty"`
	RepresentativeImage           *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	Genre                         *string              `protobuf:"bytes,188,opt,name=genre" json:"genre,omitempty"`
	ContentRating                 *string              `protobuf:"bytes,189,opt,name=contentRating" json:"contentRating,omitempty"`
	InLanguage                    *string              `protobuf:"bytes,190,opt,name=inLanguage" json:"inLanguage,omitempty"`
	DatePublished                 *string              `protobuf:"bytes,191,opt,name=datePublished" json:"datePublished,omitempty"`
	ContentProfileName            *string              `protobuf:"bytes,249,opt,name=contentProfileName" json:"contentProfileName,omitempty"`
	ContentProfileId              *string              `protobuf:"bytes,252,opt,name=contentProfileId" json:"contentProfileId,omitempty"`
	ExternalId                    *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	AmpURL                        *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	DestinationURL                *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	FileFormat                    *string              `protobuf:"bytes,289,opt,name=fileFormat" json:"fileFormat,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}             `json:"-"`
	XXX_unrecognized              []byte               `json:"-"`
	XXX_sizecache                 int32                `json:"-"`
}

func (m *EMWebPageV2) Reset()         { *m = EMWebPageV2{} }
func (m *EMWebPageV2) String() string { return proto.CompactTextString(m) }
func (*EMWebPageV2) ProtoMessage()    {}
func (*EMWebPageV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{16}
}

func (m *EMWebPageV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMWebPageV2.Unmarshal(m, b)
}
func (m *EMWebPageV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMWebPageV2.Marshal(b, m, deterministic)
}
func (m *EMWebPageV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMWebPageV2.Merge(m, src)
}
func (m *EMWebPageV2) XXX_Size() int {
	return xxx_messageInfo_EMWebPageV2.Size(m)
}
func (m *EMWebPageV2) XXX_DiscardUnknown() {
	xxx_messageInfo_EMWebPageV2.DiscardUnknown(m)
}

var xxx_messageInfo_EMWebPageV2 proto.InternalMessageInfo

func (m *EMWebPageV2) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMWebPageV2) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMWebPageV2) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMWebPageV2) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMWebPageV2) GetDescriptionTruncated() string {
	if m != nil && m.DescriptionTruncated != nil {
		return *m.DescriptionTruncated
	}
	return ""
}

func (m *EMWebPageV2) GetProxiedImage() *EMThumbnail {
	if m != nil {
		return m.ProxiedImage
	}
	return nil
}

func (m *EMWebPageV2) GetProxiedFaviconURL() string {
	if m != nil && m.ProxiedFaviconURL != nil {
		return *m.ProxiedFaviconURL
	}
	return ""
}

func (m *EMWebPageV2) GetAuthorArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AuthorArray
	}
	return nil
}

func (m *EMWebPageV2) GetAbout() *EMEmbedClientItem {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *EMWebPageV2) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *EMWebPageV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if m != nil {
		return m.RelatedImageArray
	}
	return nil
}

func (m *EMWebPageV2) GetSourceName() string {
	if m != nil && m.SourceName != nil {
		return *m.SourceName
	}
	return ""
}

func (m *EMWebPageV2) GetCanonicalFountainStream() string {
	if m != nil && m.CanonicalFountainStream != nil {
		return *m.CanonicalFountainStream
	}
	return ""
}

func (m *EMWebPageV2) GetUnfilteredFountainStreamArray() []string {
	if m != nil {
		return m.UnfilteredFountainStreamArray
	}
	return nil
}

func (m *EMWebPageV2) GetPremodFountainStreamArray() []string {
	if m != nil {
		return m.PremodFountainStreamArray
	}
	return nil
}

func (m *EMWebPageV2) GetPostmodFountainStreamArray() []string {
	if m != nil {
		return m.PostmodFountainStreamArray
	}
	return nil
}

func (m *EMWebPageV2) GetInboxFountainStreamArray() []string {
	if m != nil {
		return m.InboxFountainStreamArray
	}
	return nil
}

func (m *EMWebPageV2) GetContentLocation() *EMEmbedClientItem {
	if m != nil {
		return m.ContentLocation
	}
	return nil
}

func (m *EMWebPageV2) GetAssociatedMediaArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AssociatedMediaArray
	}
	return nil
}

func (m *EMWebPageV2) GetIsFamilyFriendly() bool {
	if m != nil && m.IsFamilyFriendly != nil {
		return *m.IsFamilyFriendly
	}
	return false
}

func (m *EMWebPageV2) GetFaviconURL() string {
	if m != nil && m.FaviconURL != nil {
		return *m.FaviconURL
	}
	return ""
}

func (m *EMWebPageV2) GetAggregateRating() *EMEmbedClientItem {
	if m != nil {
		return m.AggregateRating
	}
	return nil
}

func (m *EMWebPageV2) GetOffersArray() []*EMEmbedClientItem {
	if m != nil {
		return m.OffersArray
	}
	return nil
}

func (m *EMWebPageV2) GetAudio() *EMEmbedClientItem {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *EMWebPageV2) GetDateCreated() string {
	if m != nil && m.DateCreated != nil {
		return *m.DateCreated
	}
	return ""
}

func (m *EMWebPageV2) GetDateModified() string {
	if m != nil && m.DateModified != nil {
		return *m.DateModified
	}
	return ""
}

func (m *EMWebPageV2) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

func (m *EMWebPageV2) GetGenre() string {
	if m != nil && m.Genre != nil {
		return *m.Genre
	}
	return ""
}

func (m *EMWebPageV2) GetContentRating() string {
	if m != nil && m.ContentRating != nil {
		return *m.ContentRating
	}
	return ""
}

func (m *EMWebPageV2) GetInLanguage() string {
	if m != nil && m.InLanguage != nil {
		return *m.InLanguage
	}
	return ""
}

func (m *EMWebPageV2) GetDatePublished() string {
	if m != nil && m.DatePublished != nil {
		return *m.DatePublished
	}
	return ""
}

func (m *EMWebPageV2) GetContentProfileName() string {
	if m != nil && m.ContentProfileName != nil {
		return *m.ContentProfileName
	}
	return ""
}

func (m *EMWebPageV2) GetContentProfileId() string {
	if m != nil && m.ContentProfileId != nil {
		return *m.ContentProfileId
	}
	return ""
}

func (m *EMWebPageV2) GetExternalId() string {
	if m != nil && m.ExternalId != nil {
		return *m.ExternalId
	}
	return ""
}

func (m *EMWebPageV2) GetAmpURL() string {
	if m != nil && m.AmpURL != nil {
		return *m.AmpURL
	}
	return ""
}

func (m *EMWebPageV2) GetDestinationURL() string {
	if m != nil && m.DestinationURL != nil {
		return *m.DestinationURL
	}
	return ""
}

func (m *EMWebPageV2) GetFileFormat() string {
	if m != nil && m.FileFormat != nil {
		return *m.FileFormat
	}
	return ""
}

type EMPlusPhotoV2 struct {
	URL                           *string              `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	ImageURL                      *string              `protobuf:"bytes,2,opt,name=imageURL" json:"imageURL,omitempty"`
	Name                          *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DescriptionP                  *string              `protobuf:"bytes,4,opt,name=description_p,json=descriptionP" json:"description_p,omitempty"`
	DescriptionTruncated          *string              `protobuf:"bytes,5,opt,name=descriptionTruncated" json:"descriptionTruncated,omitempty"`
	ProxiedImage                  *EMThumbnail         `protobuf:"bytes,6,opt,name=proxiedImage" json:"proxiedImage,omitempty"`
	ProxiedFaviconURL             *string              `protobuf:"bytes,7,opt,name=proxiedFaviconURL" json:"proxiedFaviconURL,omitempty"`
	AuthorArray                   []*EMEmbedClientItem `protobuf:"bytes,8,rep,name=authorArray" json:"authorArray,omitempty"`
	About                         *EMEmbedClientItem   `protobuf:"bytes,9,opt,name=about" json:"about,omitempty"`
	Text                          *string              `protobuf:"bytes,10,opt,name=text" json:"text,omitempty"`
	RelatedImageArray             []*EMEmbedClientItem `protobuf:"bytes,11,rep,name=relatedImageArray" json:"relatedImageArray,omitempty"`
	SourceName                    *string              `protobuf:"bytes,12,opt,name=sourceName" json:"sourceName,omitempty"`
	CanonicalFountainStream       *string              `protobuf:"bytes,13,opt,name=canonicalFountainStream" json:"canonicalFountainStream,omitempty"`
	UnfilteredFountainStreamArray []string             `protobuf:"bytes,14,rep,name=unfilteredFountainStreamArray" json:"unfilteredFountainStreamArray,omitempty"`
	PremodFountainStreamArray     []string             `protobuf:"bytes,15,rep,name=premodFountainStreamArray" json:"premodFountainStreamArray,omitempty"`
	PostmodFountainStreamArray    []string             `protobuf:"bytes,16,rep,name=postmodFountainStreamArray" json:"postmodFountainStreamArray,omitempty"`
	InboxFountainStreamArray      []string             `protobuf:"bytes,17,rep,name=inboxFountainStreamArray" json:"inboxFountainStreamArray,omitempty"`
	ContentLocation               *EMEmbedClientItem   `protobuf:"bytes,18,opt,name=contentLocation" json:"contentLocation,omitempty"`
	Width                         *string              `protobuf:"bytes,19,opt,name=width" json:"width,omitempty"`
	Height                        *string              `protobuf:"bytes,20,opt,name=height" json:"height,omitempty"`
	WidthPx                       *int32               `protobuf:"varint,21,opt,name=widthPx" json:"widthPx,omitempty"`
	HeightPx                      *int32               `protobuf:"varint,22,opt,name=heightPx" json:"heightPx,omitempty"`
	ContentURL                    *string              `protobuf:"bytes,23,opt,name=contentURL" json:"contentURL,omitempty"`
	OwnerObfuscatedId             *string              `protobuf:"bytes,27,opt,name=ownerObfuscatedId" json:"ownerObfuscatedId,omitempty"`
	AlbumId                       *string              `protobuf:"bytes,38,opt,name=albumId" json:"albumId,omitempty"`
	PhotoId                       *string              `protobuf:"bytes,39,opt,name=photoId" json:"photoId,omitempty"`
	OnepickMediaId                *string              `protobuf:"bytes,40,opt,name=onepickMediaId" json:"onepickMediaId,omitempty"`
	AssociatedMediaArray          []*EMEmbedClientItem `protobuf:"bytes,42,rep,name=associatedMediaArray" json:"associatedMediaArray,omitempty"`
	RelativeURL                   *string              `protobuf:"bytes,46,opt,name=relativeURL" json:"relativeURL,omitempty"`
	StreamIdArray                 []string             `protobuf:"bytes,47,rep,name=streamIdArray" json:"streamIdArray,omitempty"`
	IsFamilyFriendly              *bool                `protobuf:"varint,65,opt,name=isFamilyFriendly" json:"isFamilyFriendly,omitempty"`
	EmbedURL                      *string              `protobuf:"bytes,66,opt,name=embedURL" json:"embedURL,omitempty"`
	PlayerType                    *string              `protobuf:"bytes,67,opt,name=playerType" json:"playerType,omitempty"`
	Duration                      *string              `protobuf:"bytes,68,opt,name=duration" json:"duration,omitempty"`
	FaviconURL                    *string              `protobuf:"bytes,75,opt,name=faviconURL" json:"faviconURL,omitempty"`
	AggregateRating               *EMEmbedClientItem   `protobuf:"bytes,82,opt,name=aggregateRating" json:"aggregateRating,omitempty"`
	OffersArray                   []*EMEmbedClientItem `protobuf:"bytes,83,rep,name=offersArray" json:"offersArray,omitempty"`
	Audio                         *EMEmbedClientItem   `protobuf:"bytes,96,opt,name=audio" json:"audio,omitempty"`
	DateCreated                   *string              `protobuf:"bytes,111,opt,name=dateCreated" json:"dateCreated,omitempty"`
	DateModified                  *string              `protobuf:"bytes,112,opt,name=dateModified" json:"dateModified,omitempty"`
	RepresentativeImage           *EMEmbedClientItem   `protobuf:"bytes,185,opt,name=representativeImage" json:"representativeImage,omitempty"`
	Genre                         *string              `protobuf:"bytes,188,opt,name=genre" json:"genre,omitempty"`
	ContentRating                 *string              `protobuf:"bytes,189,opt,name=contentRating" json:"contentRating,omitempty"`
	InLanguage                    *string              `protobuf:"bytes,190,opt,name=inLanguage" json:"inLanguage,omitempty"`
	DatePublished                 *string              `protobuf:"bytes,191,opt,name=datePublished" json:"datePublished,omitempty"`
	ImageQuality                  *string              `protobuf:"bytes,195,opt,name=imageQuality" json:"imageQuality,omitempty"`
	MaxHeight                     *string              `protobuf:"bytes,196,opt,name=maxHeight" json:"maxHeight,omitempty"`
	MaxWidth                      *string              `protobuf:"bytes,197,opt,name=maxWidth" json:"maxWidth,omitempty"`
	ContentProfileName            *string              `protobuf:"bytes,249,opt,name=contentProfileName" json:"contentProfileName,omitempty"`
	ContentProfileId              *string              `protobuf:"bytes,252,opt,name=contentProfileId" json:"contentProfileId,omitempty"`
	ExternalId                    *string              `protobuf:"bytes,254,opt,name=externalId" json:"externalId,omitempty"`
	MediaKey                      *string              `protobuf:"bytes,258,opt,name=mediaKey" json:"mediaKey,omitempty"`
	AmpURL                        *string              `protobuf:"bytes,282,opt,name=ampURL" json:"ampURL,omitempty"`
	OriginalMediaPlayerURL        *string              `protobuf:"bytes,283,opt,name=originalMediaPlayerURL" json:"originalMediaPlayerURL,omitempty"`
	OriginalMediaContainerURL     *string              `protobuf:"bytes,284,opt,name=originalMediaContainerURL" json:"originalMediaContainerURL,omitempty"`
	OriginalLightboxPhotoId       *string              `protobuf:"bytes,285,opt,name=originalLightboxPhotoId" json:"originalLightboxPhotoId,omitempty"`
	OriginalContentURL            *string              `protobuf:"bytes,286,opt,name=originalContentURL" json:"originalContentURL,omitempty"`
	DestinationURL                *string              `protobuf:"bytes,287,opt,name=destinationURL" json:"destinationURL,omitempty"`
	FileFormat                    *string              `protobuf:"bytes,289,opt,name=fileFormat" json:"fileFormat,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}             `json:"-"`
	XXX_unrecognized              []byte               `json:"-"`
	XXX_sizecache                 int32                `json:"-"`
}

func (m *EMPlusPhotoV2) Reset()         { *m = EMPlusPhotoV2{} }
func (m *EMPlusPhotoV2) String() string { return proto.CompactTextString(m) }
func (*EMPlusPhotoV2) ProtoMessage()    {}
func (*EMPlusPhotoV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{17}
}

func (m *EMPlusPhotoV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMPlusPhotoV2.Unmarshal(m, b)
}
func (m *EMPlusPhotoV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMPlusPhotoV2.Marshal(b, m, deterministic)
}
func (m *EMPlusPhotoV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMPlusPhotoV2.Merge(m, src)
}
func (m *EMPlusPhotoV2) XXX_Size() int {
	return xxx_messageInfo_EMPlusPhotoV2.Size(m)
}
func (m *EMPlusPhotoV2) XXX_DiscardUnknown() {
	xxx_messageInfo_EMPlusPhotoV2.DiscardUnknown(m)
}

var xxx_messageInfo_EMPlusPhotoV2 proto.InternalMessageInfo

func (m *EMPlusPhotoV2) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *EMPlusPhotoV2) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

func (m *EMPlusPhotoV2) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EMPlusPhotoV2) GetDescriptionP() string {
	if m != nil && m.DescriptionP != nil {
		return *m.DescriptionP
	}
	return ""
}

func (m *EMPlusPhotoV2) GetDescriptionTruncated() string {
	if m != nil && m.DescriptionTruncated != nil {
		return *m.DescriptionTruncated
	}
	return ""
}

func (m *EMPlusPhotoV2) GetProxiedImage() *EMThumbnail {
	if m != nil {
		return m.ProxiedImage
	}
	return nil
}

func (m *EMPlusPhotoV2) GetProxiedFaviconURL() string {
	if m != nil && m.ProxiedFaviconURL != nil {
		return *m.ProxiedFaviconURL
	}
	return ""
}

func (m *EMPlusPhotoV2) GetAuthorArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AuthorArray
	}
	return nil
}

func (m *EMPlusPhotoV2) GetAbout() *EMEmbedClientItem {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *EMPlusPhotoV2) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *EMPlusPhotoV2) GetRelatedImageArray() []*EMEmbedClientItem {
	if m != nil {
		return m.RelatedImageArray
	}
	return nil
}

func (m *EMPlusPhotoV2) GetSourceName() string {
	if m != nil && m.SourceName != nil {
		return *m.SourceName
	}
	return ""
}

func (m *EMPlusPhotoV2) GetCanonicalFountainStream() string {
	if m != nil && m.CanonicalFountainStream != nil {
		return *m.CanonicalFountainStream
	}
	return ""
}

func (m *EMPlusPhotoV2) GetUnfilteredFountainStreamArray() []string {
	if m != nil {
		return m.UnfilteredFountainStreamArray
	}
	return nil
}

func (m *EMPlusPhotoV2) GetPremodFountainStreamArray() []string {
	if m != nil {
		return m.PremodFountainStreamArray
	}
	return nil
}

func (m *EMPlusPhotoV2) GetPostmodFountainStreamArray() []string {
	if m != nil {
		return m.PostmodFountainStreamArray
	}
	return nil
}

func (m *EMPlusPhotoV2) GetInboxFountainStreamArray() []string {
	if m != nil {
		return m.InboxFountainStreamArray
	}
	return nil
}

func (m *EMPlusPhotoV2) GetContentLocation() *EMEmbedClientItem {
	if m != nil {
		return m.ContentLocation
	}
	return nil
}

func (m *EMPlusPhotoV2) GetWidth() string {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return ""
}

func (m *EMPlusPhotoV2) GetHeight() string {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return ""
}

func (m *EMPlusPhotoV2) GetWidthPx() int32 {
	if m != nil && m.WidthPx != nil {
		return *m.WidthPx
	}
	return 0
}

func (m *EMPlusPhotoV2) GetHeightPx() int32 {
	if m != nil && m.HeightPx != nil {
		return *m.HeightPx
	}
	return 0
}

func (m *EMPlusPhotoV2) GetContentURL() string {
	if m != nil && m.ContentURL != nil {
		return *m.ContentURL
	}
	return ""
}

func (m *EMPlusPhotoV2) GetOwnerObfuscatedId() string {
	if m != nil && m.OwnerObfuscatedId != nil {
		return *m.OwnerObfuscatedId
	}
	return ""
}

func (m *EMPlusPhotoV2) GetAlbumId() string {
	if m != nil && m.AlbumId != nil {
		return *m.AlbumId
	}
	return ""
}

func (m *EMPlusPhotoV2) GetPhotoId() string {
	if m != nil && m.PhotoId != nil {
		return *m.PhotoId
	}
	return ""
}

func (m *EMPlusPhotoV2) GetOnepickMediaId() string {
	if m != nil && m.OnepickMediaId != nil {
		return *m.OnepickMediaId
	}
	return ""
}

func (m *EMPlusPhotoV2) GetAssociatedMediaArray() []*EMEmbedClientItem {
	if m != nil {
		return m.AssociatedMediaArray
	}
	return nil
}

func (m *EMPlusPhotoV2) GetRelativeURL() string {
	if m != nil && m.RelativeURL != nil {
		return *m.RelativeURL
	}
	return ""
}

func (m *EMPlusPhotoV2) GetStreamIdArray() []string {
	if m != nil {
		return m.StreamIdArray
	}
	return nil
}

func (m *EMPlusPhotoV2) GetIsFamilyFriendly() bool {
	if m != nil && m.IsFamilyFriendly != nil {
		return *m.IsFamilyFriendly
	}
	return false
}

func (m *EMPlusPhotoV2) GetEmbedURL() string {
	if m != nil && m.EmbedURL != nil {
		return *m.EmbedURL
	}
	return ""
}

func (m *EMPlusPhotoV2) GetPlayerType() string {
	if m != nil && m.PlayerType != nil {
		return *m.PlayerType
	}
	return ""
}

func (m *EMPlusPhotoV2) GetDuration() string {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return ""
}

func (m *EMPlusPhotoV2) GetFaviconURL() string {
	if m != nil && m.FaviconURL != nil {
		return *m.FaviconURL
	}
	return ""
}

func (m *EMPlusPhotoV2) GetAggregateRating() *EMEmbedClientItem {
	if m != nil {
		return m.AggregateRating
	}
	return nil
}

func (m *EMPlusPhotoV2) GetOffersArray() []*EMEmbedClientItem {
	if m != nil {
		return m.OffersArray
	}
	return nil
}

func (m *EMPlusPhotoV2) GetAudio() *EMEmbedClientItem {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *EMPlusPhotoV2) GetDateCreated() string {
	if m != nil && m.DateCreated != nil {
		return *m.DateCreated
	}
	return ""
}

func (m *EMPlusPhotoV2) GetDateModified() string {
	if m != nil && m.DateModified != nil {
		return *m.DateModified
	}
	return ""
}

func (m *EMPlusPhotoV2) GetRepresentativeImage() *EMEmbedClientItem {
	if m != nil {
		return m.RepresentativeImage
	}
	return nil
}

func (m *EMPlusPhotoV2) GetGenre() string {
	if m != nil && m.Genre != nil {
		return *m.Genre
	}
	return ""
}

func (m *EMPlusPhotoV2) GetContentRating() string {
	if m != nil && m.ContentRating != nil {
		return *m.ContentRating
	}
	return ""
}

func (m *EMPlusPhotoV2) GetInLanguage() string {
	if m != nil && m.InLanguage != nil {
		return *m.InLanguage
	}
	return ""
}

func (m *EMPlusPhotoV2) GetDatePublished() string {
	if m != nil && m.DatePublished != nil {
		return *m.DatePublished
	}
	return ""
}

func (m *EMPlusPhotoV2) GetImageQuality() string {
	if m != nil && m.ImageQuality != nil {
		return *m.ImageQuality
	}
	return ""
}

func (m *EMPlusPhotoV2) GetMaxHeight() string {
	if m != nil && m.MaxHeight != nil {
		return *m.MaxHeight
	}
	return ""
}

func (m *EMPlusPhotoV2) GetMaxWidth() string {
	if m != nil && m.MaxWidth != nil {
		return *m.MaxWidth
	}
	return ""
}

func (m *EMPlusPhotoV2) GetContentProfileName() string {
	if m != nil && m.ContentProfileName != nil {
		return *m.ContentProfileName
	}
	return ""
}

func (m *EMPlusPhotoV2) GetContentProfileId() string {
	if m != nil && m.ContentProfileId != nil {
		return *m.ContentProfileId
	}
	return ""
}

func (m *EMPlusPhotoV2) GetExternalId() string {
	if m != nil && m.ExternalId != nil {
		return *m.ExternalId
	}
	return ""
}

func (m *EMPlusPhotoV2) GetMediaKey() string {
	if m != nil && m.MediaKey != nil {
		return *m.MediaKey
	}
	return ""
}

func (m *EMPlusPhotoV2) GetAmpURL() string {
	if m != nil && m.AmpURL != nil {
		return *m.AmpURL
	}
	return ""
}

func (m *EMPlusPhotoV2) GetOriginalMediaPlayerURL() string {
	if m != nil && m.OriginalMediaPlayerURL != nil {
		return *m.OriginalMediaPlayerURL
	}
	return ""
}

func (m *EMPlusPhotoV2) GetOriginalMediaContainerURL() string {
	if m != nil && m.OriginalMediaContainerURL != nil {
		return *m.OriginalMediaContainerURL
	}
	return ""
}

func (m *EMPlusPhotoV2) GetOriginalLightboxPhotoId() string {
	if m != nil && m.OriginalLightboxPhotoId != nil {
		return *m.OriginalLightboxPhotoId
	}
	return ""
}

func (m *EMPlusPhotoV2) GetOriginalContentURL() string {
	if m != nil && m.OriginalContentURL != nil {
		return *m.OriginalContentURL
	}
	return ""
}

func (m *EMPlusPhotoV2) GetDestinationURL() string {
	if m != nil && m.DestinationURL != nil {
		return *m.DestinationURL
	}
	return ""
}

func (m *EMPlusPhotoV2) GetFileFormat() string {
	if m != nil && m.FileFormat != nil {
		return *m.FileFormat
	}
	return ""
}

type EMClientEmbedOptions struct {
	IncludeTypeArray     []EMItemType `protobuf:"varint,1,rep,name=includeTypeArray,enum=hangouts.EMItemType" json:"includeTypeArray,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EMClientEmbedOptions) Reset()         { *m = EMClientEmbedOptions{} }
func (m *EMClientEmbedOptions) String() string { return proto.CompactTextString(m) }
func (*EMClientEmbedOptions) ProtoMessage()    {}
func (*EMClientEmbedOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{18}
}

func (m *EMClientEmbedOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMClientEmbedOptions.Unmarshal(m, b)
}
func (m *EMClientEmbedOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMClientEmbedOptions.Marshal(b, m, deterministic)
}
func (m *EMClientEmbedOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMClientEmbedOptions.Merge(m, src)
}
func (m *EMClientEmbedOptions) XXX_Size() int {
	return xxx_messageInfo_EMClientEmbedOptions.Size(m)
}
func (m *EMClientEmbedOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_EMClientEmbedOptions.DiscardUnknown(m)
}

var xxx_messageInfo_EMClientEmbedOptions proto.InternalMessageInfo

func (m *EMClientEmbedOptions) GetIncludeTypeArray() []EMItemType {
	if m != nil {
		return m.IncludeTypeArray
	}
	return nil
}

type EMEmbedClientItem struct {
	TypeArray   []EMItemType `protobuf:"varint,1,rep,name=typeArray,enum=hangouts.EMItemType" json:"typeArray,omitempty"`
	IdP         *string      `protobuf:"bytes,2,opt,name=id_p,json=idP" json:"id_p,omitempty"`
	CanonicalId *string      `protobuf:"bytes,3,opt,name=canonicalId" json:"canonicalId,omitempty"`
	Signature   *string      `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	RenderId    *string      `protobuf:"bytes,8,opt,name=renderId" json:"renderId,omitempty"`
	// Extensions:
	GeoCoordinates *EMGeoCoordinates `protobuf:"bytes,27364648,opt,name=geoCoordinates" json:"geoCoordinates,omitempty"`
	ImageObject    *EMImageObject    `protobuf:"bytes,27535952,opt,name=imageObject" json:"imageObject,omitempty"`
	Place          *EMPlace          `protobuf:"bytes,26807906,opt,name=place" json:"place,omitempty"`
	PostalAddress  *EMPostalAddress  `protobuf:"bytes,27364630,opt,name=postalAddress" json:"postalAddress,omitempty"`
	PlusPhoto      *EMPlusPhoto      `protobuf:"bytes,27639957,opt,name=plusPhoto" json:"plusPhoto,omitempty"`
	// ExtensionsV2:
	PlusPhotoV2          *EMPlusPhotoV2      `protobuf:"bytes,40655821,opt,name=plusPhotoV2" json:"plusPhotoV2,omitempty"`
	PlaceV2              *EMPlaceV2          `protobuf:"bytes,35825640,opt,name=placeV2" json:"placeV2,omitempty"`
	ThingV2              *EMThingV2          `protobuf:"bytes,39748951,opt,name=thingV2" json:"thingV2,omitempty"`
	PlusAudioV2          *EMPlusAudioV2      `protobuf:"bytes,62101782,opt,name=plusAudioV2" json:"plusAudioV2,omitempty"`
	PostalAddressV2      *EMPostalAddressV2  `protobuf:"bytes,36003298,opt,name=postalAddressV2" json:"postalAddressV2,omitempty"`
	GeoCoordinatesV2     *EMGeoCoordinatesV2 `protobuf:"bytes,36736749,opt,name=geoCoordinatesV2" json:"geoCoordinatesV2,omitempty"`
	ImageObjectV2        *EMImageObjectV2    `protobuf:"bytes,40265033,opt,name=imageObjectV2" json:"imageObjectV2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *EMEmbedClientItem) Reset()         { *m = EMEmbedClientItem{} }
func (m *EMEmbedClientItem) String() string { return proto.CompactTextString(m) }
func (*EMEmbedClientItem) ProtoMessage()    {}
func (*EMEmbedClientItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_566c2d9906bc0fec, []int{19}
}

func (m *EMEmbedClientItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMEmbedClientItem.Unmarshal(m, b)
}
func (m *EMEmbedClientItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMEmbedClientItem.Marshal(b, m, deterministic)
}
func (m *EMEmbedClientItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMEmbedClientItem.Merge(m, src)
}
func (m *EMEmbedClientItem) XXX_Size() int {
	return xxx_messageInfo_EMEmbedClientItem.Size(m)
}
func (m *EMEmbedClientItem) XXX_DiscardUnknown() {
	xxx_messageInfo_EMEmbedClientItem.DiscardUnknown(m)
}

var xxx_messageInfo_EMEmbedClientItem proto.InternalMessageInfo

func (m *EMEmbedClientItem) GetTypeArray() []EMItemType {
	if m != nil {
		return m.TypeArray
	}
	return nil
}

func (m *EMEmbedClientItem) GetIdP() string {
	if m != nil && m.IdP != nil {
		return *m.IdP
	}
	return ""
}

func (m *EMEmbedClientItem) GetCanonicalId() string {
	if m != nil && m.CanonicalId != nil {
		return *m.CanonicalId
	}
	return ""
}

func (m *EMEmbedClientItem) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *EMEmbedClientItem) GetRenderId() string {
	if m != nil && m.RenderId != nil {
		return *m.RenderId
	}
	return ""
}

func (m *EMEmbedClientItem) GetGeoCoordinates() *EMGeoCoordinates {
	if m != nil {
		return m.GeoCoordinates
	}
	return nil
}

func (m *EMEmbedClientItem) GetImageObject() *EMImageObject {
	if m != nil {
		return m.ImageObject
	}
	return nil
}

func (m *EMEmbedClientItem) GetPlace() *EMPlace {
	if m != nil {
		return m.Place
	}
	return nil
}

func (m *EMEmbedClientItem) GetPostalAddress() *EMPostalAddress {
	if m != nil {
		return m.PostalAddress
	}
	return nil
}

func (m *EMEmbedClientItem) GetPlusPhoto() *EMPlusPhoto {
	if m != nil {
		return m.PlusPhoto
	}
	return nil
}

func (m *EMEmbedClientItem) GetPlusPhotoV2() *EMPlusPhotoV2 {
	if m != nil {
		return m.PlusPhotoV2
	}
	return nil
}

func (m *EMEmbedClientItem) GetPlaceV2() *EMPlaceV2 {
	if m != nil {
		return m.PlaceV2
	}
	return nil
}

func (m *EMEmbedClientItem) GetThingV2() *EMThingV2 {
	if m != nil {
		return m.ThingV2
	}
	return nil
}

func (m *EMEmbedClientItem) GetPlusAudioV2() *EMPlusAudioV2 {
	if m != nil {
		return m.PlusAudioV2
	}
	return nil
}

func (m *EMEmbedClientItem) GetPostalAddressV2() *EMPostalAddressV2 {
	if m != nil {
		return m.PostalAddressV2
	}
	return nil
}

func (m *EMEmbedClientItem) GetGeoCoordinatesV2() *EMGeoCoordinatesV2 {
	if m != nil {
		return m.GeoCoordinatesV2
	}
	return nil
}

func (m *EMEmbedClientItem) GetImageObjectV2() *EMImageObjectV2 {
	if m != nil {
		return m.ImageObjectV2
	}
	return nil
}

func init() {
	proto.RegisterEnum("hangouts.EMItemType", EMItemType_name, EMItemType_value)
	proto.RegisterEnum("hangouts.EMPlusPhoto_PhotoMediaType", EMPlusPhoto_PhotoMediaType_name, EMPlusPhoto_PhotoMediaType_value)
	proto.RegisterType((*EMPlace)(nil), "hangouts.EMPlace")
	proto.RegisterType((*EMThing)(nil), "hangouts.EMThing")
	proto.RegisterType((*EMGeoCoordinates)(nil), "hangouts.EMGeoCoordinates")
	proto.RegisterType((*EMPostalAddress)(nil), "hangouts.EMPostalAddress")
	proto.RegisterType((*EMWebPage)(nil), "hangouts.EMWebPage")
	proto.RegisterType((*EMPlusPhoto)(nil), "hangouts.EMPlusPhoto")
	proto.RegisterType((*EMPerson)(nil), "hangouts.EMPerson")
	proto.RegisterType((*EMImageObject)(nil), "hangouts.EMImageObject")
	proto.RegisterType((*EMPlaceV2)(nil), "hangouts.EMPlaceV2")
	proto.RegisterType((*EMThumbnail)(nil), "hangouts.EMThumbnail")
	proto.RegisterType((*EMPostalAddressV2)(nil), "hangouts.EMPostalAddressV2")
	proto.RegisterType((*EMGeoCoordinatesV2)(nil), "hangouts.EMGeoCoordinatesV2")
	proto.RegisterType((*EMThingV2)(nil), "hangouts.EMThingV2")
	proto.RegisterType((*EMPlusAudioV2)(nil), "hangouts.EMPlusAudioV2")
	proto.RegisterType((*EMPersonV2)(nil), "hangouts.EMPersonV2")
	proto.RegisterType((*EMImageObjectV2)(nil), "hangouts.EMImageObjectV2")
	proto.RegisterType((*EMWebPageV2)(nil), "hangouts.EMWebPageV2")
	proto.RegisterType((*EMPlusPhotoV2)(nil), "hangouts.EMPlusPhotoV2")
	proto.RegisterType((*EMClientEmbedOptions)(nil), "hangouts.EMClientEmbedOptions")
	proto.RegisterType((*EMEmbedClientItem)(nil), "hangouts.EMEmbedClientItem")
}

func init() { proto.RegisterFile("embeds.proto", fileDescriptor_566c2d9906bc0fec) }

var fileDescriptor_566c2d9906bc0fec = []byte{
	// 6924 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0x79, 0x7c, 0x64, 0x45,
	0xf5, 0xaf, 0xdd, 0x9d, 0x64, 0x92, 0xca, 0x24, 0xa9, 0xb9, 0xb3, 0xf5, 0xcc, 0x30, 0x30, 0x06,
	0xd4, 0x79, 0xa8, 0x80, 0xed, 0x73, 0x17, 0x9f, 0x9d, 0x4e, 0x32, 0x89, 0x4c, 0x26, 0x4d, 0x27,
	0xf4, 0xa8, 0x6f, 0xc1, 0xca, 0xbd, 0x95, 0xee, 0x22, 0xb7, 0xab, 0x9a, 0xba, 0xf7, 0x26, 0x69,
	0xdf, 0x26, 0xa8, 0xa8, 0xe0, 0x82, 0x0b, 0xa0, 0x08, 0x28, 0xae, 0xb8, 0x0b, 0x2e, 0x88, 0x6c,
	0x0a, 0x6e, 0xb8, 0x6f, 0xef, 0xe1, 0x5b, 0xdc, 0x10, 0xf7, 0x15, 0xd7, 0x8f, 0xcb, 0xd3, 0xf7,
	0x39, 0xa7, 0xee, 0xbd, 0x7d, 0xbb, 0xd3, 0x49, 0x86, 0x19, 0x7e, 0xf0, 0x71, 0x7e, 0xf9, 0x67,
	0x3e, 0x73, 0xeb, 0x56, 0xd5, 0xad, 0x3a, 0xcb, 0xf7, 0x7c, 0xcf, 0xa9, 0xae, 0x90, 0xcd, 0xbc,
	0x36, 0xc7, 0x1d, 0xef, 0xb4, 0xba, 0x56, 0xbe, 0xb2, 0x7a, 0xab, 0x4c, 0x56, 0x54, 0xe0, 0x7b,
	0xc3, 0xf7, 0x75, 0x91, 0x4d, 0x63, 0x53, 0x45, 0x97, 0xd9, 0xdc, 0xb2, 0x48, 0x97, 0x64, 0x35,
	0x9e, 0x4d, 0xed, 0x4b, 0xed, 0xef, 0x2b, 0xe1, 0xff, 0xad, 0x93, 0xc9, 0x80, 0xc3, 0x3d, 0x5b,
	0x8b, 0xba, 0x2f, 0x94, 0x3c, 0xb7, 0x9e, 0x4d, 0xe3, 0xcb, 0xcd, 0x89, 0xc6, 0xa2, 0x45, 0x49,
	0xe6, 0x9c, 0xd2, 0xc1, 0x6c, 0x06, 0x5f, 0xc1, 0x7f, 0xad, 0xc7, 0x93, 0x4d, 0xcc, 0x71, 0x34,
	0xf7, 0xbc, 0x6c, 0xd7, 0xbe, 0xd4, 0xfe, 0xfe, 0xdc, 0xae, 0xd3, 0xa2, 0x4f, 0x9e, 0x36, 0x36,
	0x55, 0x54, 0x9e, 0xcf, 0xdc, 0xbc, 0xe9, 0x50, 0x8a, 0x7a, 0x5a, 0x8f, 0x21, 0x99, 0x0a, 0x57,
	0xd9, 0x6e, 0x1c, 0xb0, 0x3b, 0x39, 0xe0, 0x00, 0x57, 0x05, 0xa5, 0xb4, 0x23, 0x24, 0xf3, 0xb9,
	0x57, 0x82, 0x6e, 0xd6, 0x09, 0xa4, 0xcf, 0x76, 0x03, 0xcf, 0xe7, 0x7a, 0xd2, 0xc9, 0xf6, 0xe0,
	0xa7, 0x9b, 0x0d, 0xd6, 0x63, 0xc8, 0x16, 0xb5, 0x24, 0xb9, 0x9e, 0x9e, 0x9b, 0x0f, 0x3c, 0x9b,
	0xf9, 0xdc, 0x99, 0x74, 0xb2, 0x9b, 0xb0, 0xd7, 0xca, 0x17, 0xd6, 0x0e, 0xd2, 0x53, 0x63, 0x75,
	0xd8, 0x43, 0x2f, 0x76, 0x09, 0x9f, 0xac, 0xdd, 0xa4, 0x57, 0xd4, 0x58, 0x85, 0xc3, 0x9b, 0x3e,
	0x7c, 0x13, 0x3f, 0x5b, 0xfb, 0x48, 0xbf, 0xe6, 0xf3, 0x5c, 0x73, 0x69, 0xf3, 0x49, 0x27, 0x4b,
	0xf0, 0x75, 0xb2, 0xc9, 0x9a, 0x22, 0x5b, 0x35, 0xaf, 0x6b, 0xee, 0x71, 0xe9, 0x33, 0x5f, 0x2c,
	0xf2, 0x49, 0x18, 0x9b, 0xed, 0xc7, 0xfd, 0xed, 0x49, 0xee, 0x6f, 0x0c, 0x94, 0x53, 0x70, 0x05,
	0x97, 0xfe, 0xa4, 0xcf, 0x6b, 0xa5, 0x4e, 0xe3, 0xac, 0x31, 0x32, 0xc4, 0x2a, 0x15, 0xcd, 0x2b,
	0xcc, 0xe7, 0x25, 0xe6, 0x0b, 0x59, 0xc9, 0x6e, 0x5e, 0x7f, 0xaa, 0xf6, 0x31, 0x20, 0x37, 0x9f,
	0xbb, 0xbc, 0x5e, 0x55, 0x92, 0x67, 0x07, 0x8c, 0xdc, 0xe2, 0x06, 0x78, 0x3b, 0xcf, 0x96, 0x0f,
	0x05, 0xb5, 0x39, 0xae, 0xb3, 0x83, 0xe6, 0x6d, 0xdc, 0x60, 0x9d, 0x4a, 0xa8, 0xf0, 0x0a, 0x2e,
	0x13, 0x35, 0xee, 0x8c, 0x34, 0xa6, 0x41, 0x8e, 0xd9, 0xa1, 0x7d, 0xa9, 0xfd, 0xbd, 0xa5, 0x15,
	0xed, 0x56, 0x96, 0x6c, 0xaa, 0x83, 0x59, 0x4d, 0x3a, 0x59, 0x8a, 0xf3, 0x44, 0x8f, 0xc3, 0xf7,
	0x64, 0xc0, 0xe6, 0x66, 0xab, 0xb0, 0x9a, 0xd0, 0x74, 0x52, 0x4d, 0xd3, 0x49, 0xca, 0x3c, 0xdd,
	0x26, 0xf3, 0xc8, 0x42, 0x33, 0x6b, 0x59, 0x68, 0x57, 0x07, 0x0b, 0x7d, 0x0a, 0xd9, 0x5c, 0xd7,
	0x6a, 0x59, 0x70, 0xc7, 0xe8, 0xc0, 0xd8, 0xd8, 0xf6, 0xa4, 0xe0, 0x66, 0xab, 0x41, 0x6d, 0x4e,
	0x32, 0xe1, 0x96, 0x5a, 0xba, 0x82, 0x25, 0x85, 0xcf, 0xe3, 0x6c, 0x51, 0xd8, 0x4a, 0xc2, 0xc2,
	0x8c, 0xbd, 0xad, 0x7c, 0x61, 0x9d, 0x49, 0xfa, 0x59, 0xe0, 0x57, 0x95, 0xce, 0x6b, 0xcd, 0x1a,
	0xd9, 0x4d, 0xfb, 0x32, 0xeb, 0x29, 0x28, 0xd9, 0xdf, 0xca, 0x91, 0x6d, 0x89, 0x75, 0xcf, 0xea,
	0x40, 0xa2, 0x89, 0x86, 0x66, 0xd9, 0xf1, 0xdd, 0x6a, 0x66, 0xd6, 0x77, 0xd4, 0x66, 0xb6, 0x45,
	0x73, 0x17, 0x1d, 0x03, 0x9e, 0xcd, 0x3e, 0x08, 0xee, 0x63, 0x67, 0x72, 0x32, 0x7c, 0x3b, 0x3d,
	0x77, 0x1e, 0xb7, 0xfd, 0xd2, 0xca, 0x11, 0xc3, 0xdf, 0x4e, 0x11, 0xda, 0xee, 0xb8, 0xa0, 0x5b,
	0x97, 0xf9, 0xc2, 0x0f, 0x1c, 0x83, 0x32, 0xa9, 0x52, 0xfc, 0x0c, 0x96, 0xe7, 0x2a, 0x59, 0x31,
	0x2f, 0xd3, 0xf8, 0xb2, 0xd9, 0xd0, 0x62, 0x15, 0x99, 0x55, 0xac, 0xa2, 0x2b, 0x61, 0x15, 0xa1,
	0x5d, 0x75, 0x37, 0xed, 0x6a, 0x15, 0x31, 0xf5, 0x1c, 0x9d, 0x98, 0x86, 0xff, 0x98, 0x26, 0x43,
	0x6d, 0x48, 0xd6, 0x11, 0x40, 0x1f, 0x49, 0x06, 0x43, 0x7c, 0x2b, 0xa8, 0x40, 0xfa, 0xba, 0x11,
	0x1a, 0x75, 0x5b, 0xab, 0xb5, 0x9f, 0x0c, 0x85, 0x2d, 0x07, 0x95, 0xcd, 0x5c, 0xe1, 0x37, 0xc2,
	0x7d, 0xb6, 0x37, 0x5b, 0xa7, 0x90, 0x81, 0xb0, 0xa9, 0xc4, 0x2b, 0x42, 0xc9, 0x70, 0xdf, 0xad,
	0x8d, 0xd6, 0x19, 0x64, 0x6b, 0x5d, 0x79, 0xfe, 0xf4, 0xfc, 0xbc, 0xb0, 0xf9, 0x88, 0x8a, 0x5c,
	0xda, 0x08, 0xa4, 0xd3, 0x2b, 0xeb, 0x44, 0x42, 0xea, 0xb8, 0x9d, 0x82, 0x72, 0x78, 0x68, 0xe1,
	0x89, 0x16, 0xf8, 0xae, 0xe7, 0x6b, 0xce, 0xfd, 0x70, 0xbb, 0x21, 0x9c, 0xb6, 0x36, 0x46, 0x82,
	0xef, 0x5d, 0x57, 0xf0, 0x47, 0x69, 0x9f, 0xc3, 0xf7, 0xf5, 0x90, 0xbe, 0xb1, 0xa9, 0xc3, 0x7c,
	0xae, 0x08, 0xd6, 0xfa, 0x20, 0xe1, 0xc7, 0xe3, 0x48, 0x37, 0x9b, 0x53, 0x81, 0x1f, 0x02, 0xc7,
	0x9a, 0xab, 0x36, 0x3d, 0x57, 0x40, 0x4e, 0xcf, 0x31, 0x42, 0xce, 0xa6, 0x23, 0x84, 0x9c, 0xde,
	0x07, 0x08, 0x72, 0xfa, 0xd6, 0x80, 0x9c, 0x07, 0x06, 0x23, 0xc0, 0xe2, 0x3c, 0x15, 0x68, 0x9b,
	0x1f, 0x02, 0xa5, 0xf4, 0x1b, 0x8b, 0x6b, 0xb6, 0x58, 0x4f, 0x26, 0x3b, 0x6d, 0x26, 0x95, 0x14,
	0x36, 0x73, 0xc7, 0xc1, 0x4f, 0x98, 0x90, 0x33, 0xbe, 0xe6, 0xac, 0x86, 0x91, 0xaf, 0xaf, 0xb4,
	0xda, 0x6b, 0x6b, 0x94, 0xec, 0x0d, 0xe4, 0xbc, 0x70, 0x7d, 0xae, 0xb9, 0xd3, 0xfa, 0xce, 0x2c,
	0x76, 0x60, 0x5f, 0x66, 0x7f, 0x5f, 0x69, 0xed, 0x4e, 0xd6, 0xd3, 0xc9, 0xae, 0xba, 0xe6, 0x35,
	0xd5, 0x71, 0x86, 0x41, 0x9c, 0x61, 0xf5, 0x0e, 0xd6, 0x33, 0xc8, 0x6e, 0xf0, 0x9e, 0x55, 0x86,
	0x0f, 0xe1, 0xf0, 0x35, 0x7a, 0x58, 0x4f, 0x25, 0x59, 0x21, 0xe7, 0xd4, 0x72, 0xa7, 0xd1, 0x14,
	0x47, 0xaf, 0xfa, 0x7e, 0x35, 0x9f, 0xdb, 0x72, 0x94, 0x3e, 0x77, 0x57, 0x0f, 0xe9, 0x07, 0x96,
	0x18, 0x78, 0xc5, 0x2a, 0xf0, 0xc7, 0x27, 0x90, 0x3e, 0x3f, 0xb2, 0x5d, 0xf4, 0xbd, 0x35, 0xf4,
	0xde, 0xec, 0xd9, 0x99, 0x94, 0xa5, 0x57, 0x23, 0x65, 0x59, 0xb2, 0x89, 0xb9, 0x73, 0x41, 0x6d,
	0xd2, 0x09, 0xfd, 0x35, 0x7a, 0x44, 0x6a, 0x01, 0xeb, 0x98, 0x74, 0x42, 0x67, 0x8d, 0x1e, 0xe1,
	0x8d, 0xf0, 0xca, 0xc2, 0x09, 0x69, 0x64, 0x6f, 0x29, 0x7a, 0x8c, 0x80, 0xa2, 0xa7, 0x09, 0x14,
	0x4f, 0x24, 0x3b, 0x94, 0x16, 0x15, 0x21, 0x99, 0x3b, 0xc5, 0x1d, 0xc1, 0x8a, 0x2e, 0x6b, 0x70,
	0xdd, 0x74, 0xb5, 0x55, 0xde, 0x82, 0x55, 0xb4, 0xbc, 0x29, 0x28, 0x14, 0xbf, 0x19, 0x6a, 0x70,
	0x6f, 0xf5, 0x0e, 0x60, 0xd3, 0xd1, 0xcb, 0x83, 0xa2, 0x52, 0xf5, 0xe7, 0xd4, 0x72, 0x31, 0xdc,
	0x8b, 0xf1, 0xb8, 0xd5, 0x5e, 0x5b, 0xa7, 0x11, 0x2b, 0x7a, 0x05, 0x33, 0x72, 0xe9, 0xc3, 0x07,
	0x0d, 0xef, 0xec, 0xf0, 0x26, 0x06, 0xbb, 0xfe, 0xd6, 0x68, 0xa4, 0x24, 0xaf, 0x0b, 0x7b, 0x01,
	0x57, 0x36, 0xe9, 0x84, 0x8e, 0xd4, 0xd6, 0x6a, 0x8d, 0x90, 0xbe, 0x1a, 0xfc, 0x77, 0xb6, 0x51,
	0x37, 0x24, 0x71, 0x30, 0x77, 0x4a, 0x0b, 0x83, 0x8f, 0x4c, 0xe1, 0x5c, 0xfc, 0x77, 0x2a, 0xea,
	0x5b, 0x6a, 0x0e, 0x8b, 0xe2, 0x05, 0xab, 0x4d, 0x3a, 0x49, 0x8f, 0x69, 0x6d, 0x5c, 0xcd, 0x52,
	0x87, 0x8e, 0x92, 0xbd, 0x0c, 0x93, 0xcd, 0x88, 0xf6, 0x67, 0x07, 0x26, 0x86, 0x1a, 0xea, 0xd9,
	0xd2, 0x06, 0x4c, 0xa3, 0xc6, 0x96, 0x27, 0x38, 0xc8, 0x17, 0x5d, 0xa2, 0xaf, 0xd4, 0x6c, 0x80,
	0xf8, 0x51, 0x63, 0xcb, 0x87, 0x85, 0xe3, 0x57, 0xb3, 0x96, 0x89, 0x1f, 0xd1, 0xb3, 0xe1, 0xfc,
	0x2e, 0x7e, 0x0e, 0x64, 0xbf, 0x35, 0xe2, 0xfc, 0x71, 0x13, 0xf4, 0x70, 0xd4, 0x92, 0x74, 0x15,
	0x73, 0xa0, 0xc7, 0x36, 0xd3, 0x23, 0xd1, 0x34, 0xfc, 0xa7, 0x14, 0xe9, 0x1d, 0x9b, 0x2a, 0x72,
	0xed, 0x29, 0xd9, 0x91, 0x31, 0xdc, 0x3f, 0x2f, 0x59, 0x8b, 0x18, 0x85, 0x36, 0xdf, 0xd5, 0xb4,
	0xf9, 0x1d, 0xa4, 0xa7, 0xc2, 0xa5, 0x13, 0x13, 0x81, 0xf0, 0xc9, 0xda, 0x46, 0xba, 0x79, 0x0d,
	0x9c, 0xd9, 0xf8, 0x87, 0x79, 0x58, 0x4d, 0x37, 0x9b, 0x8e, 0x12, 0x45, 0x6e, 0xe9, 0x22, 0x03,
	0x2d, 0xd8, 0xd0, 0x21, 0x7a, 0x47, 0x02, 0x49, 0xaf, 0x15, 0xa1, 0x33, 0x1d, 0x22, 0x74, 0x52,
	0x0e, 0x5d, 0x6d, 0x72, 0x18, 0x26, 0x9b, 0x63, 0x10, 0x6a, 0xb2, 0xc2, 0x96, 0xb6, 0x63, 0x09,
	0xd7, 0x4f, 0x23, 0x43, 0xb6, 0x71, 0x3b, 0xe0, 0x68, 0xb0, 0x9c, 0x50, 0x44, 0x5b, 0x5a, 0x5d,
	0x86, 0xd9, 0xbc, 0xd4, 0xde, 0x13, 0x24, 0xbf, 0x84, 0xb6, 0x66, 0x90, 0xc3, 0x3c, 0x80, 0x9e,
	0xaa, 0xc6, 0x3e, 0x0d, 0x28, 0x84, 0x4f, 0x80, 0x6f, 0xd8, 0xa1, 0xb8, 0x8c, 0x8e, 0xdf, 0x5d,
	0x8a, 0x1e, 0x61, 0xff, 0xa6, 0x4f, 0x71, 0x19, 0x3d, 0xbe, 0xbb, 0x14, 0x3f, 0x43, 0x9c, 0xb5,
	0x9b, 0x88, 0x61, 0x3c, 0x3e, 0xd1, 0x02, 0xf2, 0x31, 0x51, 0x77, 0x54, 0xd5, 0x98, 0x90, 0x61,
	0x56, 0xd8, 0xd2, 0xd6, 0x64, 0x40, 0x83, 0x47, 0xcc, 0x80, 0x1e, 0x58, 0xd7, 0x1e, 0xbe, 0xa4,
	0x0f, 0x88, 0x1f, 0x8a, 0xb1, 0x9c, 0x7b, 0xb0, 0x88, 0xdf, 0x6a, 0xec, 0xa8, 0x7b, 0x0d, 0x76,
	0xf4, 0xcf, 0xc2, 0xfc, 0x62, 0x95, 0xf6, 0x1d, 0xb1, 0x4a, 0x27, 0x3b, 0x11, 0xbf, 0xfe, 0xf5,
	0xbf, 0xbb, 0x2e, 0xf9, 0xdb, 0xbc, 0x82, 0xfc, 0x3d, 0xa1, 0x59, 0x42, 0xca, 0xae, 0xbf, 0xbe,
	0xb8, 0x88, 0xf4, 0x58, 0x53, 0x44, 0xda, 0xb5, 0xfe, 0x90, 0x95, 0x55, 0xa4, 0xdd, 0x47, 0x54,
	0x45, 0xda, 0xb3, 0x7e, 0x15, 0xe9, 0x84, 0x96, 0x2a, 0x52, 0x5b, 0xa5, 0x68, 0xef, 0xca, 0x4a,
	0xd1, 0x89, 0x84, 0xcc, 0x37, 0xf5, 0x7d, 0x96, 0x91, 0x45, 0xb3, 0xa5, 0x53, 0xe9, 0xa7, 0x74,
	0x14, 0xa5, 0x9f, 0x2d, 0xa4, 0x4b, 0x38, 0xe7, 0xd6, 0xb3, 0xe7, 0x19, 0xa7, 0x11, 0x4e, 0xd1,
	0x3a, 0xd4, 0xd9, 0x47, 0x6f, 0x4a, 0x1d, 0x65, 0xfc, 0xdd, 0x9b, 0xac, 0x2e, 0xfd, 0x20, 0xd5,
	0x5e, 0x5e, 0xda, 0x9b, 0x2c, 0x2f, 0xdd, 0x9b, 0x6a, 0xaf, 0x2f, 0x9d, 0x44, 0x08, 0x5f, 0xf6,
	0xb9, 0x96, 0xcc, 0x9d, 0x74, 0xb2, 0x7f, 0x37, 0xef, 0x13, 0x4d, 0xd6, 0xa3, 0x3b, 0x14, 0xa0,
	0x2e, 0x49, 0xaf, 0x52, 0x81, 0xda, 0xd5, 0xac, 0x40, 0xbd, 0x3e, 0xdd, 0x52, 0x82, 0xb2, 0x76,
	0x92, 0x1e, 0x56, 0x43, 0x55, 0x5d, 0x69, 0xde, 0x84, 0x8f, 0xd6, 0xa3, 0xc8, 0xa0, 0xc3, 0x3d,
	0x5f, 0x48, 0x44, 0x67, 0xe8, 0xf0, 0xa6, 0x30, 0x5f, 0x6f, 0x6d, 0x1e, 0xbe, 0x3e, 0x0d, 0x94,
	0x38, 0xf6, 0xe3, 0x16, 0xf4, 0x49, 0xb5, 0xa1, 0xcf, 0x89, 0x84, 0xcc, 0x29, 0x43, 0x21, 0x8a,
	0xcb, 0x88, 0x4d, 0xdd, 0xa5, 0x44, 0x0b, 0x18, 0xc8, 0x9c, 0x0a, 0xf9, 0x47, 0x71, 0x19, 0x41,
	0xaa, 0xbb, 0x94, 0x6c, 0x82, 0x19, 0xf8, 0x32, 0xb3, 0x7d, 0x43, 0x4b, 0xba, 0x70, 0xc3, 0x89,
	0x16, 0x98, 0x01, 0x9f, 0x42, 0x52, 0x63, 0xb8, 0x6f, 0xb2, 0x09, 0xd8, 0xa3, 0xe6, 0x36, 0x97,
	0x3e, 0xd7, 0x65, 0xae, 0x7d, 0xc8, 0x99, 0xdc, 0x06, 0x42, 0x53, 0x6f, 0xa9, 0xc3, 0x1b, 0x30,
	0xfd, 0x40, 0xda, 0x5a, 0xd5, 0xeb, 0xa1, 0xd7, 0x26, 0x90, 0x68, 0xc5, 0x0b, 0xe0, 0x7a, 0xb8,
	0xdb, 0x78, 0x0f, 0xbd, 0xb8, 0x87, 0xd6, 0xc6, 0xe1, 0x1b, 0x37, 0x91, 0x2d, 0x6d, 0x35, 0x93,
	0x0d, 0x24, 0x3f, 0xfe, 0x91, 0x7c, 0x65, 0x09, 0xec, 0xc4, 0x23, 0x2d, 0x81, 0x9d, 0x74, 0x84,
	0x25, 0xb0, 0x7d, 0xf7, 0xa3, 0x04, 0xf6, 0xf0, 0x23, 0x2d, 0x81, 0x0d, 0xaf, 0x5f, 0x02, 0x3b,
	0xb9, 0x53, 0x09, 0x6c, 0x3d, 0x34, 0x7f, 0xa0, 0x31, 0x77, 0x5d, 0xd4, 0x3c, 0x76, 0xb4, 0xbb,
	0xb0, 0x87, 0x58, 0xed, 0xd5, 0xdc, 0x0d, 0xd7, 0x3d, 0xfe, 0x5d, 0x37, 0x59, 0xb0, 0x3f, 0x65,
	0xad, 0x82, 0xfd, 0x23, 0xda, 0x0b, 0xf6, 0xc7, 0xa1, 0x13, 0xdc, 0xde, 0x0d, 0x09, 0x08, 0x9e,
	0x5b, 0x6d, 0xd8, 0xfe, 0xf1, 0x6f, 0xfb, 0xc7, 0xa1, 0x05, 0x7f, 0x9b, 0x92, 0x01, 0x53, 0xbc,
	0xcb, 0x07, 0x8e, 0x50, 0x1b, 0x56, 0xfc, 0x10, 0x59, 0xb1, 0x45, 0xba, 0x7c, 0xbe, 0xec, 0x87,
	0xc5, 0x5b, 0xfc, 0xff, 0x83, 0x69, 0xd9, 0x6b, 0x9c, 0xab, 0x0c, 0x1c, 0xe3, 0xb9, 0xca, 0xe0,
	0x31, 0x9f, 0xab, 0x0c, 0x1d, 0xdb, 0xb9, 0x0a, 0x3d, 0xa6, 0x73, 0x95, 0x2d, 0xeb, 0x9c, 0xab,
	0x8c, 0xad, 0x2c, 0xf5, 0x59, 0x47, 0x90, 0x88, 0xaf, 0x5a, 0xf4, 0xdb, 0xda, 0xb9, 0xe8, 0xb7,
	0x6d, 0xb5, 0xa2, 0xdf, 0xf6, 0xd5, 0x8b, 0x7e, 0x3b, 0xd6, 0x2c, 0xfa, 0xed, 0x5c, 0x51, 0xf4,
	0xbb, 0x7f, 0xb5, 0x8d, 0xc4, 0x61, 0xcc, 0x23, 0x57, 0x3d, 0x8c, 0x79, 0x54, 0xeb, 0x61, 0xcc,
	0x34, 0xd9, 0xc6, 0x3c, 0x4f, 0xd9, 0x02, 0xe6, 0xc0, 0x23, 0x02, 0x23, 0xe4, 0x53, 0xd7, 0x37,
	0xea, 0x8e, 0x03, 0xcd, 0xcf, 0x4f, 0xc6, 0x59, 0x4d, 0xb8, 0x8d, 0x71, 0x2d, 0xb8, 0x74, 0xdc,
	0x46, 0x36, 0x1f, 0x25, 0xff, 0xad, 0xed, 0x20, 0x1a, 0xfc, 0xc9, 0x13, 0x6c, 0x7e, 0xc4, 0xc0,
	0x58, 0xf4, 0x8c, 0x34, 0x1f, 0x8f, 0x73, 0xf0, 0x78, 0xa3, 0x10, 0xd2, 0xfc, 0xb8, 0x05, 0xc6,
	0x3a, 0x81, 0x36, 0xea, 0x1d, 0x35, 0x63, 0xa3, 0xe7, 0x07, 0xab, 0x54, 0x73, 0x26, 0xe9, 0x57,
	0xf3, 0xf3, 0x5c, 0x7b, 0x46, 0x64, 0x33, 0x47, 0x80, 0x49, 0x89, 0xfe, 0x88, 0x49, 0x80, 0xf0,
	0xd9, 0xe7, 0x1d, 0x09, 0x26, 0x41, 0x4f, 0x3c, 0xb9, 0x60, 0x3e, 0x2f, 0x68, 0x8e, 0xc8, 0xac,
	0xc2, 0x93, 0x8b, 0x66, 0x93, 0x35, 0x4c, 0x36, 0xc3, 0xe3, 0x94, 0x72, 0xc4, 0xbc, 0xe0, 0x4e,
	0xb6, 0x1e, 0x02, 0x7d, 0xa2, 0xed, 0x01, 0x0f, 0x8a, 0xdb, 0x49, 0x77, 0x85, 0x4b, 0xcd, 0xb3,
	0xb7, 0x98, 0x10, 0x65, 0x9e, 0xac, 0x47, 0x90, 0x81, 0xd0, 0x94, 0x43, 0x19, 0xdf, 0x6a, 0x5e,
	0xb7, 0xb6, 0x42, 0x48, 0x15, 0xf2, 0x20, 0x93, 0x95, 0x00, 0x16, 0x71, 0x5b, 0x18, 0x52, 0x9b,
	0x4d, 0x30, 0x0f, 0x2c, 0xbf, 0x18, 0xcc, 0xb9, 0xc2, 0xab, 0x72, 0x27, 0x7b, 0x7b, 0x38, 0x4f,
	0x4b, 0x2b, 0x04, 0x58, 0x1b, 0x17, 0x3a, 0x16, 0x99, 0xd4, 0xdd, 0xa6, 0x5f, 0x5b, 0xb3, 0x75,
	0x3a, 0xb1, 0xc2, 0x15, 0x14, 0xb5, 0x9a, 0x17, 0xae, 0x41, 0xe0, 0x3f, 0x9b, 0xce, 0x1d, 0x5e,
	0x59, 0x8f, 0x26, 0xb4, 0xb5, 0x75, 0xd2, 0xc9, 0xfe, 0xcd, 0x74, 0x5f, 0xf1, 0x62, 0x7d, 0x86,
	0xb0, 0x87, 0xf4, 0xe2, 0xf9, 0xdb, 0x59, 0xbc, 0x91, 0xbd, 0x30, 0x0c, 0xde, 0x51, 0xc3, 0xb1,
	0xd3, 0x07, 0xf8, 0x3e, 0xac, 0x64, 0x5c, 0xe9, 0x1a, 0xf3, 0xb3, 0xd7, 0xa6, 0x43, 0xe3, 0x8f,
	0x9b, 0x86, 0xaf, 0xea, 0x21, 0x24, 0x3a, 0xdb, 0xda, 0x20, 0x17, 0xc7, 0x3f, 0x45, 0xbe, 0xdf,
	0xf5, 0xf1, 0xf0, 0xf0, 0xf1, 0x8c, 0xce, 0x87, 0x8f, 0x8f, 0x4b, 0x1e, 0x3e, 0x1e, 0x87, 0xf4,
	0xfb, 0xc6, 0x21, 0x32, 0xd4, 0x72, 0x00, 0xba, 0xe1, 0x23, 0x1b, 0x04, 0x7c, 0x83, 0x80, 0xff,
	0x2b, 0x25, 0xe0, 0x1b, 0xf4, 0x78, 0x83, 0x1e, 0x1f, 0x1f, 0xf4, 0xf8, 0x21, 0x66, 0xbd, 0x0f,
	0x02, 0xb1, 0xbd, 0x7b, 0x80, 0xf4, 0xc7, 0x3f, 0x3a, 0xde, 0x88, 0xda, 0x1b, 0x51, 0x7b, 0x23,
	0x6a, 0x3f, 0x04, 0x51, 0xfb, 0x21, 0x8d, 0x98, 0x1b, 0x91, 0x6d, 0x23, 0xb2, 0x1d, 0x87, 0x91,
	0xed, 0xa7, 0x5b, 0xa3, 0x23, 0x21, 0xfc, 0x25, 0xf7, 0x46, 0x6c, 0xdb, 0x88, 0x6d, 0x1b, 0xb1,
	0x6d, 0xe3, 0x48, 0xe8, 0x5f, 0xe8, 0x48, 0x68, 0xe5, 0xfd, 0x93, 0xfd, 0x1d, 0xef, 0x9f, 0x3c,
	0xe0, 0x91, 0xbe, 0xed, 0xe6, 0xc6, 0x69, 0x2b, 0x6f, 0x6e, 0xac, 0xb8, 0xae, 0x72, 0x7a, 0xa7,
	0xeb, 0x2a, 0x1b, 0x39, 0xf6, 0x06, 0x13, 0x79, 0x48, 0x98, 0xc8, 0xc9, 0x6d, 0x17, 0x9b, 0xee,
	0x4c, 0x75, 0xb8, 0xd9, 0xb4, 0x37, 0x79, 0xb3, 0xe9, 0x53, 0xa9, 0xf6, 0xab, 0x4d, 0x7b, 0x12,
	0x57, 0x9b, 0x3e, 0x9d, 0x6a, 0xbb, 0xdb, 0xf4, 0x4f, 0x79, 0x74, 0xf5, 0xa4, 0x55, 0xef, 0xf0,
	0xbd, 0x31, 0xbd, 0xe6, 0x25, 0xbe, 0x33, 0xd7, 0xba, 0xc4, 0x77, 0x55, 0x7a, 0xbd, 0x5b, 0x7c,
	0x4f, 0x59, 0xfd, 0x16, 0xdf, 0xd5, 0xe9, 0xb5, 0xaf, 0xf1, 0x9d, 0xde, 0xf1, 0x1a, 0xdf, 0x35,
	0xe9, 0x55, 0xef, 0xf1, 0x3d, 0x70, 0x5c, 0xef, 0xd9, 0x64, 0xdb, 0xd8, 0x54, 0xa1, 0x79, 0x62,
	0x39, 0x8d, 0xf4, 0xca, 0xb3, 0x9e, 0x49, 0xa8, 0x90, 0xb6, 0x1b, 0x38, 0x1c, 0xb0, 0xc7, 0xb8,
	0x7b, 0x6a, 0x5f, 0x66, 0xff, 0x60, 0x6e, 0x5b, 0xcb, 0xad, 0x4e, 0x9f, 0xd7, 0xf0, 0x92, 0xdf,
	0x8a, 0xde, 0xc3, 0xd7, 0xe0, 0x2f, 0xbb, 0xdb, 0xdc, 0xc9, 0xca, 0x91, 0x3e, 0xff, 0x88, 0x26,
	0x6c, 0x76, 0x8b, 0xef, 0x28, 0xa4, 0x9b, 0x77, 0x14, 0xf6, 0x91, 0xfe, 0x98, 0x7c, 0xc4, 0x97,
	0x41, 0x93, 0x4d, 0xd6, 0x09, 0xa4, 0xcf, 0x13, 0x15, 0xc9, 0xfc, 0x40, 0x47, 0x37, 0xd7, 0x9b,
	0x0d, 0x80, 0xa5, 0x1a, 0x4f, 0x9a, 0x26, 0xa3, 0x3f, 0xa4, 0x10, 0x3f, 0x5b, 0x63, 0x64, 0xb0,
	0xd2, 0xf2, 0xab, 0xd6, 0xec, 0x75, 0x57, 0x5e, 0x34, 0xb0, 0xee, 0x5f, 0x20, 0x69, 0x1b, 0x64,
	0x3d, 0x9d, 0xf4, 0x8b, 0xe6, 0xb1, 0x4e, 0xf6, 0xab, 0xdf, 0xbc, 0x74, 0x60, 0xed, 0x5b, 0xb1,
	0xc9, 0xee, 0xd6, 0xa9, 0xa4, 0x1b, 0x2f, 0x26, 0x64, 0xef, 0xb9, 0xea, 0xde, 0xcd, 0xab, 0xdd,
	0x1c, 0x33, 0x5d, 0xac, 0x11, 0x32, 0x50, 0x4f, 0xfe, 0x80, 0x3e, 0x7b, 0x79, 0xb4, 0xde, 0x35,
	0xfe, 0xc4, 0x4a, 0xeb, 0x10, 0xeb, 0x89, 0xa4, 0xaf, 0x1e, 0x11, 0xfe, 0xec, 0x65, 0x17, 0x5c,
	0x31, 0xb0, 0x92, 0x46, 0xc7, 0x09, 0x41, 0xa9, 0xd9, 0x15, 0x76, 0x59, 0x6f, 0x26, 0x0a, 0xd9,
	0x2f, 0xdd, 0x78, 0xfd, 0xd6, 0x95, 0xbb, 0x4c, 0xa4, 0x12, 0xa5, 0x64, 0x77, 0xeb, 0x8c, 0xf0,
	0x3a, 0x46, 0x39, 0x97, 0xfd, 0xc9, 0x57, 0x2e, 0x36, 0x57, 0x91, 0xb7, 0xae, 0xd8, 0x67, 0x39,
	0x57, 0x8a, 0xba, 0xc1, 0x08, 0xdf, 0xfc, 0xda, 0x32, 0x7b, 0xf7, 0xc5, 0x7f, 0xb1, 0x56, 0x8e,
	0x08, 0x7f, 0x8b, 0x59, 0x8a, 0xba, 0x45, 0x2b, 0x0c, 0x7f, 0xdd, 0x96, 0xbd, 0xfc, 0x86, 0x2f,
	0xef, 0xed, 0xbc, 0xc2, 0xb0, 0x47, 0x29, 0xd9, 0xdd, 0x9a, 0x20, 0x43, 0xf5, 0xd6, 0xcb, 0x09,
	0xd9, 0x7b, 0x6e, 0xbe, 0xac, 0xc3, 0xa5, 0xe9, 0xb6, 0x2b, 0x0c, 0xa5, 0xf6, 0x61, 0xd6, 0x59,
	0x84, 0x56, 0xda, 0x7e, 0x2c, 0x9d, 0xfd, 0xe5, 0xd5, 0x77, 0x98, 0xa9, 0x4e, 0x58, 0xdd, 0xb0,
	0xca, 0xb9, 0xd2, 0x8a, 0x81, 0xa0, 0x72, 0x91, 0x3c, 0x33, 0xcc, 0xde, 0xf5, 0xf9, 0x37, 0x6c,
	0x5d, 0xa9, 0xf2, 0x96, 0x73, 0xc5, 0x52, 0xeb, 0x90, 0x53, 0x3f, 0xfb, 0x0c, 0x42, 0x9a, 0x0e,
	0x67, 0x0d, 0x92, 0xbe, 0x82, 0xaa, 0xd5, 0xb8, 0xf4, 0xcb, 0x39, 0xfa, 0x8f, 0xb4, 0x35, 0x40,
	0x7a, 0xf3, 0x36, 0x80, 0x41, 0x39, 0x47, 0xdf, 0x94, 0xb1, 0x76, 0x93, 0xed, 0x20, 0xa4, 0x10,
	0xf7, 0x5c, 0x97, 0x47, 0xef, 0x3e, 0x96, 0xb1, 0x36, 0x93, 0x4d, 0x13, 0xe6, 0xa3, 0xf4, 0xef,
	0x29, 0x6b, 0x1b, 0x19, 0x1a, 0xe5, 0x75, 0xa6, 0x7d, 0x98, 0x6b, 0xc6, 0x57, 0x9a, 0xd3, 0x8f,
	0xa6, 0xac, 0x2d, 0x64, 0xf3, 0x98, 0xf4, 0x75, 0xa3, 0xa8, 0x04, 0x7e, 0xe1, 0xe6, 0x0c, 0x34,
	0x85, 0xc3, 0xce, 0x0e, 0x94, 0xcf, 0xe9, 0x9d, 0x19, 0x8b, 0x92, 0xfe, 0x31, 0x19, 0xd4, 0xb8,
	0xa1, 0x35, 0xf4, 0x3b, 0x29, 0x6b, 0x80, 0xf4, 0xcd, 0x2e, 0x8e, 0xd5, 0x85, 0xa7, 0x1c, 0x4e,
	0xf7, 0xc1, 0x2a, 0x67, 0xaa, 0x8a, 0x9b, 0x69, 0xef, 0x4a, 0x59, 0x5b, 0xc9, 0xe0, 0x88, 0x52,
	0x0b, 0x06, 0xcd, 0x60, 0x1f, 0xf4, 0xbb, 0x29, 0x8b, 0x90, 0x9e, 0x11, 0xb6, 0xc0, 0x75, 0x83,
	0xba, 0xd6, 0x76, 0xb2, 0x25, 0x6f, 0xdb, 0x40, 0xd2, 0x85, 0xac, 0xcc, 0x70, 0xbd, 0x28, 0x6c,
	0x4e, 0x2b, 0xb0, 0xc8, 0x36, 0x8d, 0xd1, 0xff, 0x99, 0xb6, 0x86, 0x08, 0x99, 0x62, 0x15, 0xf6,
	0x7c, 0x21, 0x79, 0x39, 0x47, 0x2f, 0xcc, 0x58, 0x3b, 0x89, 0x55, 0x8c, 0xa3, 0xbf, 0x92, 0x46,
	0x76, 0xf4, 0x5b, 0xf8, 0x09, 0xf3, 0x9b, 0x06, 0xda, 0x6d, 0x6d, 0x27, 0x74, 0x4a, 0x2d, 0x0a,
	0x5e, 0x82, 0x6e, 0xae, 0x59, 0xda, 0x9d, 0x29, 0x6b, 0x88, 0xf4, 0xcf, 0xd4, 0x95, 0xf6, 0xbd,
	0xb1, 0x45, 0x2e, 0x7d, 0xfa, 0xef, 0xac, 0x6d, 0x84, 0x1e, 0x50, 0x8b, 0x5c, 0x4b, 0x10, 0x8c,
	0xb9, 0x67, 0x40, 0x7d, 0xab, 0x9f, 0x6c, 0xca, 0x6b, 0x5f, 0xd8, 0x2e, 0xa7, 0xfd, 0xb0, 0x00,
	0xd8, 0x4a, 0xf8, 0x9d, 0xdf, 0xa6, 0x2c, 0x8b, 0x0c, 0x8c, 0x6a, 0xb1, 0x18, 0x6b, 0x8d, 0xfe,
	0x22, 0x0d, 0x6d, 0x05, 0xa6, 0x55, 0xe0, 0x71, 0x77, 0x5c, 0xb3, 0x1a, 0xa7, 0xbf, 0x4b, 0xc1,
	0x42, 0xf3, 0x4e, 0x4d, 0x48, 0xe1, 0xf9, 0x1a, 0x89, 0x4a, 0x5e, 0x73, 0x46, 0x5f, 0x9e, 0x46,
	0x01, 0x05, 0x8e, 0x53, 0x15, 0x9e, 0x3f, 0xcb, 0x6b, 0x75, 0x97, 0xd3, 0x77, 0x60, 0xe3, 0x41,
	0xe1, 0xf9, 0x5c, 0xc6, 0x1a, 0xbe, 0x36, 0x03, 0x8d, 0xe7, 0xd4, 0x81, 0x61, 0xc4, 0x8d, 0xef,
	0xca, 0x80, 0xf8, 0xc6, 0x95, 0x72, 0xc6, 0x3c, 0x9f, 0x21, 0xed, 0x80, 0xa5, 0xd3, 0x05, 0x68,
	0x1e, 0x61, 0x72, 0x61, 0x5a, 0x17, 0x34, 0x77, 0x84, 0x7f, 0x8e, 0x04, 0x6d, 0x09, 0x30, 0x84,
	0x73, 0xe4, 0x82, 0x54, 0x4b, 0x92, 0x5e, 0x60, 0x2c, 0xe8, 0xfc, 0x80, 0x69, 0x11, 0xd4, 0xe8,
	0x6b, 0xf0, 0xa3, 0x10, 0x6c, 0xa7, 0x02, 0x4f, 0xd8, 0xb3, 0x9a, 0xd9, 0x0b, 0xf4, 0xce, 0xb4,
	0xd5, 0x4f, 0x7a, 0x46, 0x5c, 0x55, 0x29, 0xe7, 0xe8, 0x6b, 0x32, 0xa0, 0xdc, 0x09, 0x35, 0x37,
	0xd7, 0x98, 0xa9, 0xaa, 0x3a, 0xbd, 0x15, 0x37, 0xdf, 0xa2, 0x24, 0xfa, 0xab, 0x14, 0x08, 0x1b,
	0x4c, 0x36, 0xbf, 0xc8, 0x84, 0xcb, 0xe6, 0x04, 0x70, 0x1c, 0xfa, 0x3d, 0xb4, 0x03, 0x43, 0x08,
	0xe3, 0xc5, 0xbf, 0x35, 0x83, 0x8a, 0x81, 0xaf, 0x95, 0xb8, 0x8d, 0xce, 0x03, 0x9f, 0xf9, 0x53,
	0xda, 0xda, 0x41, 0xb6, 0x1c, 0x50, 0xaa, 0xe2, 0xf2, 0x73, 0x3c, 0xae, 0x43, 0x28, 0xa2, 0x9f,
	0xc0, 0xee, 0xcf, 0x51, 0x81, 0x1f, 0xcc, 0xf1, 0x42, 0x95, 0x49, 0xc9, 0xdd, 0x72, 0x8e, 0x5e,
	0x95, 0x81, 0xee, 0xb1, 0xe5, 0xc7, 0x6a, 0xf8, 0x08, 0x9a, 0x6f, 0x53, 0x57, 0xe5, 0x1c, 0xfd,
	0x69, 0xda, 0x1a, 0x24, 0xa4, 0xc4, 0x3d, 0x9f, 0x05, 0x9a, 0x49, 0x9f, 0x6a, 0x90, 0x00, 0x04,
	0x54, 0x5b, 0x30, 0x49, 0x5f, 0x8d, 0x3e, 0x50, 0x74, 0x59, 0x53, 0xe8, 0x1f, 0xca, 0x80, 0xf6,
	0xc3, 0x23, 0x04, 0x7a, 0x32, 0x74, 0x2f, 0xf0, 0x1a, 0xf7, 0xc1, 0x72, 0xaf, 0x48, 0x83, 0x8d,
	0x16, 0x94, 0xf4, 0x82, 0x5a, 0x73, 0x53, 0x6f, 0xce, 0x40, 0xa7, 0x59, 0xd5, 0x30, 0x56, 0xf6,
	0xc5, 0x14, 0xac, 0x0e, 0xb6, 0x07, 0x8e, 0xeb, 0x70, 0xa7, 0xc8, 0x15, 0xa8, 0xf8, 0x33, 0x69,
	0x8b, 0x90, 0xee, 0x11, 0xce, 0xec, 0x2a, 0x7d, 0x2d, 0x2e, 0x2b, 0xaf, 0xfd, 0x03, 0xcc, 0x75,
	0x61, 0x66, 0x06, 0xeb, 0x78, 0x16, 0x5f, 0xe2, 0xae, 0x0e, 0xa7, 0xb9, 0x1d, 0xed, 0xb9, 0xc4,
	0x6d, 0x51, 0xe7, 0x74, 0x2f, 0xbc, 0x9e, 0x01, 0xbd, 0xf1, 0x49, 0xb9, 0x28, 0x7c, 0x4e, 0xbf,
	0x00, 0x8e, 0xd1, 0x8f, 0x7f, 0x33, 0x21, 0x34, 0xcc, 0x1d, 0x20, 0xab, 0x31, 0xc0, 0x00, 0x0d,
	0x01, 0xd7, 0x33, 0xd3, 0xdc, 0x98, 0x02, 0xff, 0x4d, 0x40, 0x29, 0xfd, 0x28, 0x60, 0x43, 0xef,
	0x38, 0x70, 0x92, 0x45, 0xe6, 0xd2, 0xa7, 0x18, 0x90, 0x01, 0x57, 0x04, 0x33, 0xba, 0x1d, 0xb6,
	0x08, 0xd3, 0x80, 0x51, 0x31, 0xdd, 0x98, 0xb1, 0xab, 0x4a, 0xb9, 0x74, 0x0c, 0xb6, 0x68, 0x16,
	0x50, 0xce, 0xd1, 0x1f, 0xa4, 0xc1, 0xaa, 0xc2, 0x38, 0x40, 0xbf, 0x09, 0x4f, 0xbd, 0x13, 0xca,
	0xab, 0x0b, 0x9f, 0xb9, 0xf4, 0xdf, 0x43, 0xd7, 0xb3, 0x03, 0x26, 0x7d, 0x30, 0x83, 0x1f, 0xa6,
	0xa0, 0x6b, 0x18, 0x00, 0xe8, 0x57, 0x70, 0xd5, 0x48, 0xd1, 0x6c, 0x1f, 0x05, 0xfc, 0x6f, 0xcc,
	0x4c, 0x78, 0xaf, 0x87, 0xbe, 0x08, 0xf7, 0x3c, 0xca, 0x1a, 0x33, 0x75, 0x46, 0x97, 0xc1, 0xd4,
	0x70, 0xd1, 0xb1, 0x36, 0x7f, 0x83, 0x5f, 0x02, 0x53, 0xc3, 0xb1, 0xa7, 0x82, 0x54, 0x46, 0xd4,
	0x92, 0x2b, 0x64, 0x25, 0xef, 0xba, 0xbc, 0x41, 0xdf, 0x81, 0xb6, 0x38, 0x2a, 0x3c, 0x1b, 0x7c,
	0x3a, 0xd6, 0xd0, 0xfb, 0x33, 0xd6, 0x1e, 0xb2, 0x73, 0xcc, 0x09, 0x4c, 0x12, 0xcf, 0xdc, 0x69,
	0x5d, 0x61, 0x52, 0x3c, 0xdf, 0x00, 0x5a, 0x01, 0x3c, 0x7c, 0x76, 0x71, 0x86, 0x6b, 0x01, 0x38,
	0x4e, 0x2f, 0x46, 0xf0, 0x2c, 0x54, 0xb9, 0xbd, 0x20, 0x24, 0xbd, 0x18, 0x7d, 0xfb, 0xb0, 0x16,
	0x09, 0x33, 0xbe, 0x3e, 0x63, 0x65, 0xc9, 0xd6, 0x29, 0x35, 0x27, 0x5c, 0x9e, 0xaf, 0xd7, 0x5d,
	0x61, 0xe6, 0x2d, 0xe7, 0xe8, 0x8b, 0x33, 0xd6, 0x2e, 0xb2, 0x6d, 0x14, 0xd2, 0x13, 0xcc, 0xbf,
	0x67, 0x55, 0xa0, 0x43, 0xfd, 0xfc, 0xbf, 0x94, 0x75, 0x02, 0xd9, 0x79, 0x00, 0x5a, 0x4b, 0xdc,
	0x13, 0x0e, 0x97, 0x36, 0x07, 0x70, 0x0f, 0x24, 0xc8, 0xe9, 0x1b, 0xe8, 0x59, 0x05, 0x55, 0xab,
	0x07, 0x3e, 0xd7, 0x46, 0x77, 0x1f, 0x36, 0xde, 0xa6, 0x95, 0x13, 0xd8, 0x7e, 0x89, 0x2f, 0x0a,
	0xbe, 0x44, 0xff, 0x9a, 0x02, 0xf3, 0x0c, 0xdb, 0xe8, 0x26, 0x70, 0xfa, 0x03, 0x5c, 0x72, 0x6d,
	0xa8, 0xa8, 0x66, 0xb6, 0xaf, 0x34, 0xfd, 0xef, 0x20, 0xe5, 0x90, 0xd4, 0xa3, 0xa4, 0x1e, 0x1d,
	0x19, 0x41, 0xe4, 0x59, 0xdf, 0x02, 0x24, 0xe8, 0x3b, 0x5c, 0x9f, 0x11, 0x0e, 0x9f, 0x63, 0x9a,
	0x3e, 0x1e, 0xb6, 0x0c, 0x5f, 0x6d, 0x94, 0x73, 0xf4, 0x6f, 0x69, 0x10, 0xec, 0xac, 0xc6, 0x0a,
	0x8a, 0x91, 0xd1, 0x87, 0xb0, 0xff, 0x0c, 0x73, 0xb9, 0x01, 0xce, 0x33, 0x8d, 0x1e, 0x75, 0x5d,
	0x85, 0x51, 0x61, 0xc4, 0x3a, 0x91, 0xec, 0x82, 0x2f, 0xcc, 0xa8, 0x79, 0x7f, 0x89, 0xe9, 0x36,
	0xb9, 0x5c, 0x93, 0xb1, 0xfa, 0x48, 0x57, 0x91, 0xe9, 0x05, 0xfa, 0x16, 0x74, 0xa2, 0x96, 0x5d,
	0x95, 0x73, 0xf4, 0xa5, 0x80, 0x75, 0x43, 0x65, 0xe1, 0x05, 0xcc, 0xcd, 0xc7, 0xf8, 0x9c, 0x8f,
	0x42, 0x1c, 0xae, 0xbb, 0x25, 0xc4, 0x5d, 0x01, 0xce, 0x3e, 0x80, 0x50, 0x02, 0x08, 0xe6, 0x0a,
	0xcf, 0xa7, 0x59, 0x90, 0x57, 0x4b, 0x7c, 0xa5, 0xdf, 0x48, 0x03, 0x0c, 0x8f, 0x30, 0x4f, 0xd8,
	0x93, 0xd2, 0xe7, 0x20, 0x20, 0x33, 0xfe, 0x97, 0xe8, 0x82, 0x13, 0xa2, 0x52, 0x0d, 0x4d, 0x7c,
	0x1c, 0xb6, 0x94, 0xb0, 0x37, 0xba, 0x15, 0x23, 0x0d, 0x64, 0x76, 0xf6, 0xcc, 0x92, 0xa8, 0xd5,
	0x84, 0xac, 0x14, 0xa1, 0xe3, 0xbb, 0x11, 0xd9, 0xca, 0x00, 0x09, 0x42, 0x32, 0xdd, 0x28, 0x30,
	0xcd, 0xe9, 0xeb, 0xd0, 0xcf, 0xe2, 0xa8, 0x58, 0xce, 0xd1, 0x4b, 0x4d, 0x7c, 0xe6, 0x7a, 0x5e,
	0x69, 0x18, 0x0b, 0xbb, 0x9a, 0xad, 0x02, 0x1c, 0x6a, 0xfa, 0x36, 0x94, 0x70, 0x89, 0x39, 0x42,
	0x45, 0x12, 0x7e, 0x33, 0xc2, 0xc6, 0x4c, 0x5d, 0x73, 0xe6, 0x78, 0x55, 0xce, 0xfd, 0x70, 0x15,
	0xff, 0x1b, 0x82, 0x37, 0x9d, 0x52, 0xbe, 0xd2, 0x76, 0xc3, 0x76, 0x79, 0x89, 0xd7, 0x99, 0xd0,
	0xb4, 0x0c, 0x42, 0x3c, 0xa8, 0x9c, 0x8a, 0x90, 0x95, 0x91, 0xc0, 0x13, 0x12, 0xa0, 0xf8, 0xa5,
	0x68, 0x30, 0x25, 0xce, 0x6c, 0x3f, 0xb6, 0xd5, 0x77, 0x64, 0x60, 0x7c, 0x81, 0xcd, 0xf3, 0x69,
	0x5d, 0x80, 0xc4, 0x9f, 0x23, 0x92, 0x2b, 0xd0, 0xe7, 0x04, 0x13, 0x7a, 0x86, 0xb9, 0x4a, 0xd2,
	0x06, 0xac, 0x3e, 0xef, 0x38, 0xf1, 0xb0, 0x77, 0x23, 0x96, 0x1e, 0x66, 0xb2, 0x39, 0xd3, 0x75,
	0x80, 0x8c, 0x3d, 0x87, 0x14, 0xc0, 0x02, 0xbd, 0x3a, 0x05, 0xe2, 0x1b, 0x65, 0xd2, 0x0e, 0x2d,
	0xe2, 0x49, 0xe0, 0xf6, 0x51, 0xb6, 0x4c, 0x7f, 0x90, 0xb2, 0x76, 0x91, 0xed, 0x63, 0x20, 0x71,
	0xc8, 0xc6, 0x00, 0x4c, 0xe2, 0x55, 0xfe, 0x27, 0x8b, 0x92, 0xcd, 0x2d, 0x1e, 0xd8, 0x85, 0x4c,
	0xa4, 0xa6, 0x7c, 0xe1, 0x55, 0x0d, 0xc2, 0xfc, 0x3d, 0x6d, 0x6d, 0x22, 0x99, 0x29, 0x56, 0xa7,
	0x5b, 0x00, 0x9f, 0x66, 0xd9, 0xb2, 0x98, 0xf1, 0x99, 0x74, 0xe8, 0x0d, 0x69, 0xe4, 0x23, 0xf0,
	0xc9, 0x59, 0x51, 0x83, 0xae, 0x97, 0x03, 0x23, 0xd8, 0x8a, 0xb6, 0x51, 0xe1, 0xd3, 0xfa, 0x1c,
	0x29, 0x16, 0xb9, 0xf6, 0xc0, 0xa7, 0x46, 0x11, 0xdc, 0x95, 0xeb, 0x9a, 0x04, 0xaa, 0x9c, 0xa3,
	0x6f, 0xc0, 0x2d, 0x40, 0x53, 0x39, 0x47, 0x5f, 0x8f, 0xd4, 0xc6, 0x44, 0x9d, 0x42, 0x95, 0x69,
	0x9f, 0x5e, 0x88, 0x36, 0x71, 0x80, 0x79, 0x91, 0x52, 0x66, 0x01, 0x6f, 0x0e, 0xd7, 0x27, 0x38,
	0x73, 0xb8, 0xa6, 0x39, 0x50, 0x68, 0x67, 0xfb, 0xbe, 0x25, 0x03, 0x92, 0x87, 0x70, 0x64, 0x33,
	0xb7, 0xe0, 0x0a, 0x29, 0x6c, 0x7a, 0x29, 0xc8, 0x60, 0x5b, 0x5b, 0x54, 0xcb, 0xbb, 0x73, 0x41,
	0x8d, 0x7e, 0x12, 0x3e, 0xbd, 0x79, 0x96, 0xf9, 0xbe, 0x52, 0x45, 0xa6, 0x5d, 0xa5, 0xe9, 0x7f,
	0xc1, 0x09, 0xd4, 0xa2, 0x90, 0x15, 0x40, 0x01, 0x26, 0x1b, 0xf4, 0x85, 0x29, 0x0c, 0xc5, 0x4a,
	0x2d, 0x94, 0x73, 0xf4, 0xcf, 0xb8, 0x36, 0xb4, 0x77, 0x33, 0xc7, 0x2e, 0xc0, 0xb4, 0x09, 0xce,
	0x5c, 0xbf, 0x9a, 0x97, 0xce, 0x08, 0x67, 0x81, 0xdf, 0x88, 0x65, 0xbc, 0x08, 0xf3, 0xe7, 0x03,
	0x5f, 0x8d, 0x28, 0xc7, 0x84, 0xee, 0x43, 0x96, 0x45, 0x06, 0xc3, 0xb0, 0x16, 0xc2, 0x3b, 0x7d,
	0x2c, 0x78, 0xfd, 0xf4, 0xfc, 0x3c, 0xd7, 0xe5, 0x1c, 0xfd, 0x75, 0x3a, 0xda, 0x42, 0x33, 0xa2,
	0x7e, 0x1d, 0x62, 0x56, 0xcf, 0x01, 0xa3, 0xe1, 0xb4, 0x31, 0x2e, 0x8f, 0xeb, 0xc5, 0x68, 0xdb,
	0xaf, 0xc4, 0x00, 0x5d, 0x02, 0x89, 0xc3, 0x87, 0xa6, 0xe7, 0x0f, 0xa3, 0x79, 0xdf, 0x82, 0xc3,
	0x0a, 0xcc, 0x13, 0x52, 0xd1, 0x39, 0x50, 0x60, 0xc8, 0xa6, 0xca, 0x39, 0xfa, 0x12, 0x34, 0x2c,
	0xdc, 0xc7, 0x01, 0xad, 0x82, 0x7a, 0x39, 0x47, 0xff, 0x80, 0x3e, 0x8a, 0xeb, 0x00, 0x6c, 0x2f,
	0x28, 0xe9, 0x08, 0x14, 0xff, 0xf7, 0x91, 0x6a, 0x1e, 0x62, 0xc2, 0x35, 0x56, 0xfa, 0x9f, 0x11,
	0x76, 0x8d, 0x90, 0x5b, 0x0c, 0xe8, 0x15, 0x10, 0x65, 0x7a, 0x8b, 0x4c, 0x20, 0xa3, 0xa4, 0x7b,
	0x60, 0x55, 0x05, 0x25, 0x17, 0xb9, 0x14, 0x00, 0xb3, 0x06, 0x4e, 0x3f, 0x82, 0x7e, 0x9b, 0x8c,
	0xa2, 0xe5, 0x1c, 0xbd, 0x37, 0x1d, 0x32, 0x80, 0x46, 0xbc, 0xe9, 0x17, 0x42, 0x3c, 0xef, 0x2b,
	0x54, 0x85, 0xeb, 0xa0, 0x6b, 0x1f, 0x46, 0x07, 0x84, 0x05, 0x27, 0xc3, 0xed, 0x76, 0x90, 0x1d,
	0x52, 0xcc, 0x72, 0x8e, 0xfe, 0x16, 0xad, 0xb2, 0xa0, 0x79, 0x8d, 0xf9, 0x0a, 0xb9, 0xd5, 0xeb,
	0x11, 0xe5, 0x42, 0x2a, 0x1d, 0x32, 0x06, 0x4d, 0x5f, 0x60, 0xe8, 0x6c, 0xbc, 0x79, 0xfa, 0x22,
	0x24, 0x05, 0x05, 0x26, 0x99, 0x4b, 0x6f, 0xc4, 0xa5, 0x8c, 0x0b, 0xd9, 0xf4, 0xc2, 0xf7, 0x20,
	0xb5, 0x18, 0x0d, 0x2b, 0x8a, 0xf4, 0xc7, 0x66, 0x07, 0x3e, 0x73, 0x44, 0x50, 0x9b, 0xd6, 0x79,
	0xcd, 0x25, 0xa3, 0xef, 0x83, 0xa0, 0xd9, 0x0d, 0x16, 0xcb, 0xe9, 0xab, 0xd2, 0xad, 0x60, 0x31,
	0xca, 0x99, 0xcb, 0x35, 0x3d, 0xc7, 0x3a, 0x99, 0x9c, 0x78, 0x90, 0x49, 0xa7, 0xc6, 0xf4, 0x82,
	0x37, 0xad, 0x27, 0x84, 0x07, 0xcb, 0xb4, 0x99, 0x3b, 0x12, 0x08, 0x17, 0x48, 0x98, 0x47, 0xef,
	0x08, 0xb9, 0x0d, 0x66, 0x1b, 0xf1, 0x02, 0x3e, 0x98, 0x41, 0xfa, 0x2b, 0xdc, 0x10, 0x51, 0xe9,
	0xcb, 0x90, 0x42, 0x9a, 0xa2, 0x59, 0x39, 0x47, 0x7f, 0x07, 0x14, 0x72, 0x68, 0x52, 0x7a, 0xc0,
	0xae, 0x6c, 0x9e, 0xaf, 0x70, 0x69, 0x37, 0xe8, 0x79, 0xb8, 0x6a, 0xe1, 0xf9, 0xd0, 0x46, 0x7f,
	0x84, 0x66, 0x5c, 0xa8, 0x06, 0xda, 0xae, 0xd2, 0xeb, 0xc0, 0x8a, 0x06, 0x9b, 0x48, 0x8e, 0xe1,
	0xe9, 0x91, 0xa0, 0xaf, 0x18, 0xe6, 0xd1, 0xbc, 0xcb, 0x39, 0xfa, 0x6d, 0xc3, 0xaa, 0x5d, 0x85,
	0x59, 0xa3, 0xd1, 0xe1, 0x87, 0x52, 0x21, 0xcc, 0x38, 0x80, 0xaa, 0xf4, 0x23, 0x51, 0xa4, 0x5a,
	0xe4, 0x6e, 0xf8, 0xed, 0xaf, 0x02, 0x10, 0x6f, 0xc6, 0x20, 0x10, 0x91, 0xab, 0x47, 0x81, 0x71,
	0x44, 0x01, 0x9e, 0x0e, 0x03, 0x32, 0xcd, 0x08, 0x9f, 0x1f, 0x62, 0x8b, 0xa2, 0x82, 0x82, 0x8d,
	0xfc, 0xe1, 0x34, 0xa4, 0xac, 0xcc, 0xaf, 0x2a, 0x57, 0xd8, 0xe1, 0x82, 0xdf, 0x09, 0xdc, 0xd4,
	0xca, 0x3b, 0x81, 0xeb, 0xb7, 0xc0, 0x19, 0x3d, 0x17, 0x29, 0x5c, 0xe0, 0x2b, 0x93, 0x62, 0xd0,
	0xb3, 0x01, 0xbf, 0xf3, 0xad, 0xc5, 0xd9, 0x72, 0x8e, 0xde, 0x87, 0x72, 0x05, 0xff, 0x4f, 0xc4,
	0x1f, 0xfa, 0x7f, 0x53, 0x60, 0xca, 0x78, 0x51, 0xba, 0x75, 0xdf, 0xf4, 0x8b, 0xc8, 0xbf, 0xa7,
	0x94, 0x77, 0x7e, 0xc0, 0xe9, 0xbb, 0x71, 0x7f, 0x11, 0x5f, 0x82, 0x2c, 0x8d, 0xfe, 0x12, 0x93,
	0x39, 0x88, 0xa4, 0x42, 0x56, 0xc6, 0x99, 0x6d, 0xd8, 0xf6, 0x5b, 0x43, 0xdb, 0x71, 0x9b, 0x91,
	0xef, 0x27, 0x4d, 0x5b, 0x2b, 0x73, 0x19, 0x70, 0x7a, 0xad, 0x51, 0x5d, 0x14, 0x71, 0x5f, 0x84,
	0xbe, 0x3b, 0x6d, 0x73, 0x26, 0x93, 0xbe, 0x7b, 0x53, 0x1a, 0xa1, 0xc9, 0x04, 0x2a, 0xe3, 0xf8,
	0xcf, 0x8c, 0x3d, 0x36, 0x52, 0xcd, 0xef, 0x51, 0xed, 0xb0, 0xf9, 0x1a, 0xb2, 0x1c, 0x0e, 0x82,
	0xa6, 0x55, 0x6b, 0x1f, 0xd9, 0x13, 0x6f, 0xc7, 0xcb, 0x3b, 0x0e, 0x10, 0xa0, 0xa6, 0xae, 0xe9,
	0x8b, 0x31, 0xe1, 0x38, 0x5c, 0x55, 0x2e, 0xf7, 0x98, 0x1b, 0xba, 0xe5, 0x97, 0x10, 0x26, 0x57,
	0x66, 0x74, 0xe5, 0x1c, 0xfd, 0x19, 0x5a, 0x40, 0xc2, 0xeb, 0xca, 0x39, 0x7a, 0x8f, 0xc9, 0x61,
	0x7c, 0x5f, 0x69, 0xc9, 0x1b, 0xf4, 0x0a, 0xc8, 0xe9, 0x88, 0xc9, 0xe9, 0x0a, 0x6e, 0x30, 0x47,
	0xdf, 0x9b, 0xc2, 0x7c, 0xd4, 0x17, 0xf6, 0x02, 0xc2, 0xda, 0x4d, 0x19, 0x6b, 0x98, 0xec, 0x5d,
	0x63, 0x55, 0xe5, 0x1c, 0xbd, 0x2c, 0x83, 0x32, 0x8d, 0x43, 0xb5, 0xf1, 0xcd, 0x17, 0xa6, 0x9b,
	0x1a, 0xc6, 0x98, 0x5b, 0x02, 0x86, 0x70, 0x88, 0x2f, 0x79, 0x51, 0x6e, 0x38, 0x00, 0x12, 0x6c,
	0xaf, 0x0c, 0xd0, 0xbb, 0x51, 0x83, 0x13, 0xca, 0xf3, 0xb9, 0x4b, 0x2f, 0x46, 0xe3, 0x37, 0xd6,
	0x40, 0x7f, 0x86, 0xfe, 0x3b, 0x1e, 0x68, 0x29, 0xfc, 0x40, 0x87, 0xfb, 0xbf, 0x09, 0x4d, 0x01,
	0xd8, 0x1a, 0xf7, 0x3c, 0x64, 0xa7, 0x51, 0x46, 0x7c, 0x19, 0xaa, 0xba, 0xc4, 0x99, 0x0b, 0xa9,
	0x9e, 0x8f, 0xde, 0xe5, 0xd3, 0x6b, 0x31, 0x67, 0x29, 0x54, 0x99, 0xbb, 0x30, 0xa7, 0x98, 0x76,
	0xca, 0x39, 0x7a, 0x3b, 0x26, 0x44, 0x25, 0xa5, 0xe6, 0x31, 0x7a, 0xc4, 0x3c, 0xf0, 0xc5, 0x29,
	0x43, 0xd3, 0x6a, 0xdc, 0x69, 0x18, 0x55, 0x3e, 0x11, 0x42, 0x58, 0x07, 0xb3, 0x2b, 0xe7, 0xe8,
	0x2b, 0x50, 0x08, 0x6d, 0x06, 0x4c, 0x7f, 0x0e, 0x5f, 0x1b, 0x28, 0x82, 0x43, 0xf0, 0x28, 0x2a,
	0xfe, 0x07, 0x98, 0xd5, 0x04, 0x1c, 0x83, 0xcb, 0x4b, 0x56, 0x2f, 0xe9, 0x82, 0x94, 0x91, 0x0e,
	0x9a, 0xa4, 0x05, 0xa9, 0xea, 0x89, 0xa0, 0x88, 0x11, 0xb1, 0x10, 0xee, 0xf3, 0x7a, 0x64, 0x0c,
	0x93, 0xd2, 0x67, 0xb2, 0x22, 0xe6, 0x5c, 0x4e, 0x31, 0xfc, 0x4e, 0x07, 0xbe, 0xcb, 0xc3, 0x8a,
	0xc4, 0x67, 0x90, 0x02, 0xcd, 0x72, 0x97, 0x2f, 0x0a, 0x90, 0x44, 0xf4, 0xbd, 0x2f, 0x63, 0x18,
	0xc0, 0x94, 0x17, 0x37, 0xf1, 0x54, 0x4c, 0x4a, 0x0d, 0xb4, 0x96, 0x73, 0xf4, 0xfb, 0x68, 0xe8,
	0xb8, 0x1f, 0xfc, 0xd5, 0x17, 0xbd, 0xc0, 0xd4, 0x2c, 0x96, 0xb9, 0xb6, 0x85, 0xc7, 0x0f, 0x34,
	0x6a, 0xf4, 0x9d, 0x68, 0x25, 0x05, 0x15, 0x68, 0xbf, 0x0a, 0x39, 0x3a, 0xbd, 0x2a, 0x6d, 0xf5,
	0x91, 0x6e, 0x84, 0x6f, 0xba, 0x13, 0x59, 0x36, 0x16, 0xef, 0x22, 0xdf, 0x78, 0x35, 0xc0, 0x5e,
	0xff, 0xb8, 0xd0, 0xf1, 0x9e, 0x9f, 0x0b, 0x6a, 0x1c, 0x93, 0x5c, 0x57, 0x1a, 0xf4, 0x27, 0xa8,
	0xc6, 0x09, 0xc5, 0xe0, 0x9b, 0xb8, 0xa4, 0x72, 0x8e, 0x5e, 0x89, 0xe2, 0x9b, 0xf1, 0x75, 0x60,
	0x83, 0x6e, 0x9d, 0x32, 0x73, 0x03, 0x4e, 0x7f, 0x81, 0xe9, 0x4f, 0x5e, 0x00, 0x51, 0xf6, 0xe9,
	0xab, 0xd1, 0x76, 0xa7, 0xc2, 0xd3, 0x49, 0xfa, 0x09, 0x74, 0x07, 0x34, 0xef, 0x10, 0xaa, 0xca,
	0x39, 0xfa, 0x46, 0x5c, 0x7c, 0xd2, 0x23, 0x3f, 0x8a, 0xd9, 0xf1, 0x14, 0x97, 0x5e, 0x2b, 0x16,
	0x7e, 0xd2, 0x44, 0x83, 0xaa, 0xaa, 0xd7, 0x41, 0xed, 0xf8, 0x97, 0x41, 0xe8, 0xdb, 0xd0, 0x66,
	0x5a, 0x68, 0x71, 0x39, 0x47, 0xff, 0x88, 0x26, 0x69, 0x42, 0x1f, 0xfd, 0x23, 0x22, 0xe4, 0x94,
	0x70, 0x1c, 0x97, 0x87, 0xdc, 0xf7, 0x00, 0x98, 0x54, 0x59, 0xf0, 0xa5, 0x18, 0xf8, 0x3f, 0x0e,
	0x84, 0xbd, 0x1b, 0xf3, 0x36, 0xfa, 0x30, 0x90, 0x77, 0x9c, 0xb3, 0xd0, 0xaf, 0x61, 0x65, 0x03,
	0x5d, 0x0e, 0x7c, 0x45, 0x29, 0x27, 0xcc, 0x35, 0x3f, 0x8f, 0xd9, 0x57, 0x3e, 0x2a, 0x33, 0x01,
	0x8d, 0x71, 0xf9, 0x32, 0xfd, 0x3a, 0x62, 0x76, 0x54, 0xc3, 0xa1, 0x9f, 0xc3, 0x68, 0xdf, 0x2c,
	0xba, 0x44, 0x21, 0x88, 0x5e, 0x99, 0x86, 0x6c, 0x66, 0x86, 0x33, 0x6d, 0x57, 0x4b, 0xdc, 0x0b,
	0x5c, 0x1f, 0x15, 0x4a, 0x1f, 0x03, 0x02, 0x99, 0x10, 0xd2, 0x09, 0xc2, 0x62, 0xc9, 0xbb, 0xd2,
	0xa6, 0x04, 0xc3, 0x96, 0x84, 0xac, 0x84, 0x71, 0xe9, 0xa2, 0x34, 0xa0, 0x88, 0x29, 0xe0, 0x8c,
	0x9d, 0x1f, 0x88, 0x7a, 0xb3, 0xd0, 0xf5, 0x69, 0xfc, 0x7e, 0x64, 0x1f, 0xf4, 0xb3, 0x98, 0xbc,
	0x1e, 0x14, 0x73, 0x1a, 0x78, 0xec, 0x4b, 0xd0, 0x32, 0x46, 0x82, 0x98, 0xf2, 0xbd, 0x2e, 0x8d,
	0xc6, 0xac, 0xd4, 0x02, 0x1d, 0x02, 0x51, 0x8e, 0x70, 0x07, 0xe8, 0x95, 0xe6, 0x6c, 0x61, 0x9e,
	0x79, 0x3e, 0x7d, 0x59, 0x0a, 0x32, 0x99, 0x51, 0x88, 0xb6, 0xb7, 0x62, 0x1a, 0xd8, 0x81, 0x10,
	0xd2, 0xf7, 0xa3, 0x66, 0x67, 0x38, 0x4b, 0xea, 0xf1, 0x56, 0x24, 0x09, 0x09, 0x02, 0x45, 0x2f,
	0x01, 0x2b, 0xec, 0x2a, 0x00, 0x80, 0xbf, 0x02, 0x36, 0x4f, 0x41, 0x1d, 0x2e, 0xd3, 0x6e, 0x23,
	0x42, 0x98, 0xff, 0x83, 0x68, 0x06, 0xab, 0x31, 0x7b, 0xb9, 0x01, 0x9d, 0x7f, 0x02, 0x6c, 0x18,
	0xd9, 0x0e, 0xd7, 0xf4, 0x02, 0xec, 0x12, 0xa6, 0xab, 0xe5, 0x1c, 0xfd, 0x21, 0xa6, 0x6a, 0xf9,
	0x39, 0x15, 0x98, 0x0c, 0xfb, 0x14, 0x53, 0xe4, 0x69, 0x09, 0x32, 0x7f, 0x31, 0x9e, 0xa6, 0x02,
	0x2d, 0x3c, 0x3f, 0xef, 0xfb, 0x51, 0x58, 0xfa, 0x1f, 0x4d, 0x51, 0x29, 0xcf, 0xa7, 0x77, 0xa5,
	0x4d, 0x1d, 0x0d, 0xf2, 0xdc, 0x62, 0x55, 0xc9, 0xd0, 0x93, 0xef, 0x48, 0x19, 0x5a, 0x3c, 0xae,
	0x14, 0x2c, 0xe0, 0x71, 0xb0, 0x24, 0x24, 0xb8, 0x6e, 0xe0, 0x4d, 0x4b, 0xee, 0xd1, 0xbb, 0x53,
	0xd6, 0x6e, 0xb2, 0x23, 0x51, 0x57, 0x4b, 0x72, 0xb5, 0x67, 0x61, 0xa2, 0x84, 0x21, 0xdb, 0xb8,
	0xf3, 0xa7, 0xd3, 0x26, 0x67, 0x9e, 0x07, 0xeb, 0x6a, 0x2d, 0x6a, 0x5d, 0x8d, 0x0e, 0x13, 0x5d,
	0x54, 0xa2, 0xdf, 0x41, 0xd5, 0x95, 0x95, 0x6b, 0x33, 0xa9, 0xe8, 0x27, 0x91, 0xec, 0x8c, 0x0b,
	0xc9, 0xa4, 0x2d, 0x9a, 0xa8, 0x39, 0x8f, 0x86, 0xcb, 0x00, 0x61, 0x4e, 0x07, 0xc9, 0x1c, 0x54,
	0xf6, 0x82, 0x57, 0x13, 0x7e, 0x95, 0x5e, 0x18, 0xfa, 0x6d, 0x8d, 0x27, 0x8c, 0xf6, 0xb6, 0x94,
	0x75, 0x12, 0xd9, 0x03, 0x8d, 0x79, 0xe9, 0x00, 0x51, 0x43, 0x0f, 0x16, 0x4a, 0xc6, 0x5c, 0xfa,
	0xbf, 0x02, 0xbf, 0x42, 0x76, 0x4a, 0xef, 0x45, 0xac, 0x0e, 0xb3, 0x76, 0x3b, 0x59, 0xd9, 0x7a,
	0x1f, 0x16, 0x0d, 0x46, 0xb9, 0xf4, 0x21, 0x11, 0x7d, 0x25, 0xc6, 0xb4, 0x43, 0x81, 0xaf, 0x91,
	0xc8, 0x4e, 0xca, 0x79, 0xac, 0x85, 0xc2, 0xf6, 0xef, 0x4b, 0x45, 0x35, 0x8c, 0x83, 0xd0, 0x93,
	0xa2, 0x6f, 0xb7, 0x57, 0x12, 0xe8, 0x07, 0x70, 0xa7, 0x21, 0x1b, 0xa3, 0x2f, 0x45, 0x83, 0x9f,
	0xd5, 0xcc, 0x69, 0x7e, 0xf0, 0x2d, 0x19, 0x43, 0x9a, 0xc2, 0xe2, 0x5d, 0x84, 0xe2, 0x2f, 0xc3,
	0x9a, 0xe1, 0x61, 0x3e, 0x97, 0x9c, 0xed, 0x83, 0xc8, 0xc7, 0x43, 0x5f, 0x9f, 0x44, 0x7c, 0x09,
	0x1a, 0xf1, 0x4c, 0x6f, 0x87, 0xdc, 0x65, 0xb0, 0xb5, 0x28, 0x47, 0x77, 0x47, 0xb1, 0x2f, 0xa4,
	0x90, 0xd3, 0x31, 0xc6, 0x2a, 0x44, 0x94, 0x8b, 0x32, 0xd6, 0x1e, 0xb2, 0xc3, 0xc4, 0x5d, 0x98,
	0x69, 0x51, 0xf8, 0x8d, 0xe8, 0x47, 0x12, 0xf4, 0xed, 0x88, 0x7a, 0x11, 0x32, 0x7e, 0x0f, 0x3c,
	0x2a, 0xf3, 0x5c, 0xa5, 0xe8, 0x87, 0xb1, 0x7e, 0x03, 0xb3, 0x1e, 0x66, 0x5e, 0x95, 0xce, 0x80,
	0xa1, 0x42, 0xe0, 0x37, 0x0b, 0x9b, 0x80, 0x95, 0x27, 0x4d, 0xa5, 0x9c, 0xa3, 0xdf, 0xc5, 0x11,
	0x23, 0x4c, 0x4f, 0xeb, 0x62, 0x30, 0x47, 0x6b, 0x56, 0x96, 0x6c, 0x1b, 0xd5, 0x8d, 0x82, 0xcb,
	0x99, 0x04, 0xe7, 0xd7, 0x07, 0x59, 0x20, 0x1d, 0xdd, 0xa0, 0xcf, 0x86, 0xc1, 0xad, 0xa1, 0x98,
	0xfe, 0x1a, 0xd2, 0xe1, 0x41, 0xf8, 0x5c, 0x91, 0x69, 0x3f, 0xd4, 0x77, 0x11, 0xe9, 0xa1, 0x8d,
	0x47, 0xd5, 0x35, 0xcc, 0x8c, 0xce, 0x37, 0xa9, 0x34, 0xb2, 0x61, 0xa3, 0xf2, 0x72, 0x8e, 0xfe,
	0x15, 0x82, 0x7f, 0x5f, 0xb1, 0xda, 0xf0, 0x4c, 0xa5, 0xf0, 0xb5, 0x88, 0x13, 0x66, 0x4b, 0xc8,
	0xa6, 0xde, 0x80, 0xbe, 0x31, 0xaa, 0xec, 0x00, 0x2d, 0x3c, 0xa2, 0x27, 0x3f, 0x0a, 0x0b, 0x2b,
	0x79, 0x67, 0xc4, 0x55, 0xf6, 0x02, 0x3d, 0x23, 0xaa, 0xbc, 0x44, 0xd2, 0x78, 0x5d, 0x26, 0x62,
	0xa3, 0xcc, 0x53, 0x92, 0x3e, 0x1c, 0x35, 0xcb, 0xa5, 0x14, 0x5e, 0x84, 0x97, 0xef, 0xc7, 0x2c,
	0xde, 0xe4, 0x8d, 0x51, 0x72, 0xf6, 0x17, 0x93, 0x60, 0x00, 0x69, 0x59, 0x36, 0x92, 0xb9, 0x1a,
	0x53, 0x83, 0x22, 0x5b, 0x92, 0xb8, 0x89, 0xcf, 0x86, 0x5c, 0x01, 0x68, 0x7f, 0x33, 0x1a, 0xbc,
	0x05, 0x73, 0x83, 0x29, 0x05, 0x4c, 0xe4, 0xe5, 0xc8, 0x44, 0xa6, 0x02, 0x8f, 0x07, 0x35, 0xfa,
	0x66, 0xc3, 0x6a, 0x81, 0xc0, 0x29, 0x5f, 0x2c, 0xf2, 0xd8, 0xd8, 0xa7, 0x50, 0x73, 0xb5, 0x39,
	0xe6, 0x79, 0x0d, 0x7a, 0x0d, 0x46, 0xd6, 0x02, 0xab, 0xd5, 0x2b, 0x5a, 0x05, 0xd2, 0xa1, 0x97,
	0xa3, 0x59, 0x22, 0x5a, 0xaa, 0x3a, 0xbd, 0x0c, 0x09, 0x92, 0xa1, 0x17, 0xc8, 0xbd, 0xec, 0xb0,
	0x9e, 0x6c, 0xf3, 0xe9, 0xf9, 0xc3, 0x4a, 0x7b, 0x55, 0x51, 0xa7, 0x6f, 0xc7, 0x39, 0x9a, 0xc9,
	0x3d, 0xfd, 0x72, 0x93, 0x97, 0x1a, 0x8d, 0x7c, 0xca, 0x94, 0xb9, 0xdc, 0xc0, 0x2b, 0xf1, 0x28,
	0xff, 0xbf, 0x0d, 0xad, 0x3b, 0x62, 0xcc, 0xb1, 0xa9, 0xbe, 0x37, 0x03, 0x5f, 0x44, 0x20, 0xab,
	0x68, 0x56, 0xaf, 0xd2, 0x13, 0x0c, 0x3e, 0x84, 0x48, 0xff, 0x39, 0xc0, 0xe6, 0x6e, 0x5c, 0x00,
	0xed, 0x01, 0x54, 0xc2, 0x09, 0x24, 0xf7, 0x0b, 0x6c, 0x9e, 0xd3, 0x8b, 0x90, 0x0d, 0x01, 0x4d,
	0x01, 0x1b, 0x06, 0x23, 0xdf, 0x6c, 0xed, 0x25, 0xd9, 0x10, 0x05, 0x13, 0x3e, 0x1a, 0x0a, 0xef,
	0x2b, 0x86, 0xba, 0x95, 0xb1, 0x6a, 0xf5, 0x3e, 0xa4, 0xc5, 0x88, 0xb2, 0x11, 0xb0, 0x3e, 0x02,
	0x2c, 0x24, 0xfe, 0xad, 0x39, 0xfd, 0x1a, 0x3a, 0x69, 0x6b, 0x91, 0xe9, 0x57, 0x68, 0x24, 0x21,
	0x55, 0x19, 0xd1, 0x8a, 0x39, 0x36, 0xc4, 0x90, 0x7f, 0xe0, 0x8e, 0x13, 0x2b, 0x29, 0xe7, 0xe8,
	0x6b, 0xb1, 0x82, 0x30, 0xc1, 0xb4, 0x03, 0xc1, 0xc4, 0xec, 0xe7, 0x16, 0xa4, 0x4c, 0xc5, 0xf8,
	0x2f, 0x20, 0xd1, 0x00, 0xf3, 0x61, 0x51, 0xa9, 0xfa, 0x28, 0x6f, 0x8e, 0xbb, 0xaf, 0x32, 0x5d,
	0x63, 0x76, 0x83, 0xbe, 0x26, 0x65, 0x7c, 0x94, 0x35, 0x42, 0x6d, 0xbd, 0x17, 0x57, 0x34, 0xb6,
	0xcc, 0xc0, 0xae, 0xc2, 0x38, 0xf9, 0x07, 0x44, 0xb0, 0x15, 0x65, 0xa6, 0x72, 0x8e, 0xfe, 0x1c,
	0x13, 0x95, 0x96, 0xa8, 0x5a, 0xce, 0xd1, 0x1f, 0x43, 0x62, 0x31, 0x90, 0x97, 0xa2, 0xc6, 0xdc,
	0x99, 0x2a, 0x77, 0x41, 0x30, 0x07, 0xc1, 0x16, 0x67, 0xb8, 0x3b, 0x0f, 0xab, 0x04, 0x49, 0xbc,
	0x35, 0xd5, 0x72, 0x90, 0x60, 0x62, 0xcc, 0xa7, 0x4c, 0x42, 0x09, 0x12, 0x9b, 0x6c, 0x96, 0xd7,
	0x3f, 0x80, 0xe7, 0x37, 0x51, 0x5e, 0x5c, 0x65, 0xfe, 0x14, 0xf7, 0x3c, 0x98, 0xe3, 0x0e, 0x04,
	0xd0, 0x71, 0x57, 0x81, 0x32, 0xe8, 0xc7, 0x0c, 0x8b, 0x5f, 0x10, 0x25, 0xee, 0x01, 0x73, 0x7a,
	0x8f, 0xe1, 0x2c, 0xc0, 0xd7, 0xa2, 0x1a, 0x9a, 0x03, 0x0b, 0x8b, 0xec, 0xd6, 0x44, 0x92, 0x7f,
	0x0b, 0xfe, 0x1e, 0x97, 0x79, 0x4d, 0xdb, 0x93, 0x61, 0x69, 0x86, 0xd8, 0xc5, 0x8b, 0x78, 0xa7,
	0xa9, 0xfc, 0x30, 0xed, 0x70, 0x69, 0x24, 0xfd, 0x71, 0xac, 0xb2, 0x8d, 0xd5, 0xb8, 0xc6, 0x2c,
	0x32, 0x8a, 0x25, 0xcf, 0xc1, 0x03, 0x23, 0x05, 0xe1, 0xc5, 0xcc, 0xf6, 0x0c, 0x68, 0x48, 0xd4,
	0x48, 0xa8, 0x85, 0xe9, 0x6c, 0x55, 0xb8, 0x8e, 0xe6, 0x32, 0x5c, 0xc6, 0x13, 0x8c, 0xcf, 0xc7,
	0x84, 0x92, 0xbe, 0x04, 0x45, 0x71, 0x90, 0x2d, 0xf0, 0x24, 0x1f, 0xf8, 0x18, 0x42, 0xcc, 0x4c,
	0x43, 0xb2, 0x8a, 0xaa, 0x04, 0x9c, 0xbe, 0xc7, 0x94, 0xde, 0x6b, 0x75, 0x57, 0x35, 0x30, 0x09,
	0xaf, 0x70, 0x59, 0x69, 0xd0, 0xff, 0x08, 0x9f, 0x4c, 0x14, 0x35, 0xe9, 0x36, 0x44, 0xa6, 0x28,
	0xa0, 0xd3, 0x3f, 0xa3, 0xda, 0x9f, 0xa5, 0xe6, 0x22, 0xab, 0xbe, 0x27, 0x84, 0x02, 0xe0, 0x19,
	0xcd, 0x78, 0xf1, 0x61, 0xac, 0xc0, 0x4e, 0x31, 0xcf, 0xa3, 0x3f, 0x45, 0x4e, 0x7f, 0x50, 0x80,
	0xa5, 0xea, 0x30, 0x31, 0x78, 0x1a, 0x88, 0xa9, 0x15, 0xcd, 0xe8, 0xff, 0x42, 0x25, 0xe4, 0xeb,
	0xf5, 0xf0, 0xcc, 0xe1, 0xf3, 0xe8, 0xb9, 0x07, 0x94, 0x3b, 0x0f, 0x4c, 0xda, 0xe3, 0xf4, 0x3a,
	0xe4, 0x42, 0x45, 0x25, 0x1d, 0xfa, 0xf1, 0x74, 0x7c, 0xdc, 0x23, 0x16, 0xf9, 0x61, 0xa5, 0x17,
	0xca, 0x39, 0xfa, 0xd5, 0x34, 0x66, 0xb9, 0xbc, 0x22, 0x3c, 0xf3, 0x03, 0xae, 0x98, 0xeb, 0xbd,
	0xc9, 0x98, 0x55, 0x2d, 0xf0, 0x30, 0xf3, 0x46, 0x17, 0x7b, 0x1e, 0x58, 0xeb, 0x4c, 0x30, 0xb7,
	0xc4, 0x1a, 0x11, 0x19, 0xbb, 0xde, 0xcc, 0x2a, 0x16, 0x01, 0x2b, 0x42, 0x66, 0x4d, 0x2f, 0x45,
	0xa7, 0x0a, 0x03, 0x45, 0x73, 0x83, 0x37, 0x64, 0x20, 0xc8, 0x1d, 0x16, 0x12, 0x52, 0x7e, 0x0f,
	0x13, 0xad, 0x88, 0x1a, 0x98, 0xa3, 0xcc, 0xbf, 0xa5, 0x5a, 0x22, 0x26, 0x1e, 0x77, 0x95, 0x73,
	0xf4, 0x55, 0x78, 0xe0, 0x33, 0xa2, 0xf9, 0x12, 0x0c, 0x94, 0x58, 0xe7, 0xb6, 0x03, 0xb7, 0x8e,
	0xdf, 0x3a, 0x09, 0x86, 0xb4, 0xce, 0x53, 0xce, 0xd1, 0x17, 0x64, 0x4c, 0xc9, 0x05, 0x2c, 0xe7,
	0x03, 0x58, 0xf8, 0x05, 0xfa, 0x13, 0xfe, 0x7d, 0x34, 0xfa, 0x4a, 0xcc, 0xc5, 0x27, 0x16, 0x99,
	0x1d, 0xa3, 0xea, 0x0b, 0x52, 0x58, 0x3a, 0x14, 0xb2, 0xe2, 0x72, 0xf3, 0xeb, 0xb3, 0x26, 0x9d,
	0xfe, 0x26, 0x9a, 0x76, 0x32, 0x0b, 0xa0, 0xfb, 0x61, 0xf5, 0x79, 0xcf, 0xe3, 0x9e, 0x17, 0x6f,
	0xef, 0x6d, 0x88, 0xf7, 0xc0, 0x15, 0x27, 0x98, 0xeb, 0xd2, 0x37, 0x22, 0x33, 0x3a, 0xc0, 0xd5,
	0x4c, 0x95, 0xd5, 0x39, 0xfd, 0x0d, 0xae, 0xe2, 0xa0, 0x38, 0x3f, 0x50, 0xe1, 0xe1, 0xc1, 0x27,
	0x10, 0x3b, 0x4c, 0x7d, 0x10, 0xc1, 0xe2, 0xf9, 0x08, 0x57, 0x60, 0x79, 0xf3, 0x30, 0xc1, 0x6d,
	0xcd, 0x7a, 0xa2, 0xb1, 0x80, 0xa7, 0xe3, 0x29, 0x16, 0xa4, 0x3c, 0x10, 0x4f, 0xbe, 0x80, 0xab,
	0x4a, 0xea, 0x93, 0x22, 0x68, 0x25, 0xd2, 0xdf, 0x72, 0x8e, 0xde, 0x88, 0x45, 0xf8, 0x96, 0xd8,
	0x49, 0xcf, 0x02, 0xd9, 0x4c, 0x60, 0xc8, 0xb9, 0x24, 0x15, 0x66, 0x0e, 0x5c, 0x2f, 0x2a, 0xa1,
	0xe9, 0xcd, 0x69, 0x20, 0x0d, 0x9d, 0x4e, 0x47, 0xca, 0x39, 0x7a, 0x09, 0x24, 0xb1, 0xd6, 0x38,
	0xf3, 0x7c, 0xc8, 0xf4, 0x12, 0x47, 0x76, 0x75, 0x70, 0x00, 0x73, 0xb0, 0x65, 0x62, 0xf1, 0x7f,
	0x03, 0xf9, 0x1e, 0xd0, 0xca, 0xe6, 0xd1, 0x61, 0xd9, 0xcd, 0xa9, 0xc8, 0x27, 0xcc, 0x5e, 0x7e,
	0x9f, 0x3a, 0xf5, 0x3c, 0xb2, 0x7b, 0xf5, 0xbf, 0x7f, 0x8d, 0xe7, 0x23, 0x58, 0x0e, 0xa8, 0x57,
	0xb9, 0x86, 0x54, 0xb4, 0x8f, 0x74, 0xa3, 0x0a, 0x68, 0x13, 0xef, 0x7c, 0xee, 0x18, 0x0f, 0xeb,
	0xc2, 0x23, 0x17, 0x61, 0xac, 0x0f, 0xe5, 0x12, 0x1e, 0xa8, 0xe2, 0x7c, 0xf4, 0x61, 0xff, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0x9f, 0xf2, 0x9b, 0x49, 0xb6, 0x67, 0x00, 0x00,
}
