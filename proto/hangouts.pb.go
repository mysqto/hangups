//
//
//hangouts.proto - Unofficial, reverse engineered Protocol Buffers for Google's
//Hangouts chat protocol.
//
//Originally based on Darryl Pogue's reversed engineered proto file from an early
//version of Hangouts for Android: https://gist.github.com/dpogue/5692114
//
//Field and message name should generally match those used by Google, with the
//major exception that "Client" prefixes have been removed.
//

// proto2 is required because we need to be able to serialize default values:

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: hangouts.proto

package hangouts

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Describes which Hangouts client is active.
type ActiveClientState int32

const (
	// No client is active.
	ActiveClientState_ACTIVE_CLIENT_STATE_NO_ACTIVE ActiveClientState = 0
	// This is the active client.
	ActiveClientState_ACTIVE_CLIENT_STATE_IS_ACTIVE ActiveClientState = 1
	// Other client is active.
	ActiveClientState_ACTIVE_CLIENT_STATE_OTHER_ACTIVE ActiveClientState = 2
)

// Enum value maps for ActiveClientState.
var (
	ActiveClientState_name = map[int32]string{
		0: "ACTIVE_CLIENT_STATE_NO_ACTIVE",
		1: "ACTIVE_CLIENT_STATE_IS_ACTIVE",
		2: "ACTIVE_CLIENT_STATE_OTHER_ACTIVE",
	}
	ActiveClientState_value = map[string]int32{
		"ACTIVE_CLIENT_STATE_NO_ACTIVE":    0,
		"ACTIVE_CLIENT_STATE_IS_ACTIVE":    1,
		"ACTIVE_CLIENT_STATE_OTHER_ACTIVE": 2,
	}
)

func (x ActiveClientState) Enum() *ActiveClientState {
	p := new(ActiveClientState)
	*p = x
	return p
}

func (x ActiveClientState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActiveClientState) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[0].Descriptor()
}

func (ActiveClientState) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[0]
}

func (x ActiveClientState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActiveClientState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActiveClientState(num)
	return nil
}

// Deprecated: Use ActiveClientState.Descriptor instead.
func (ActiveClientState) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{0}
}

type FocusType int32

const (
	FocusType_FOCUS_TYPE_UNKNOWN   FocusType = 0
	FocusType_FOCUS_TYPE_FOCUSED   FocusType = 1
	FocusType_FOCUS_TYPE_UNFOCUSED FocusType = 2
)

// Enum value maps for FocusType.
var (
	FocusType_name = map[int32]string{
		0: "FOCUS_TYPE_UNKNOWN",
		1: "FOCUS_TYPE_FOCUSED",
		2: "FOCUS_TYPE_UNFOCUSED",
	}
	FocusType_value = map[string]int32{
		"FOCUS_TYPE_UNKNOWN":   0,
		"FOCUS_TYPE_FOCUSED":   1,
		"FOCUS_TYPE_UNFOCUSED": 2,
	}
)

func (x FocusType) Enum() *FocusType {
	p := new(FocusType)
	*p = x
	return p
}

func (x FocusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FocusType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[1].Descriptor()
}

func (FocusType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[1]
}

func (x FocusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FocusType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FocusType(num)
	return nil
}

// Deprecated: Use FocusType.Descriptor instead.
func (FocusType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{1}
}

type FocusDevice int32

const (
	FocusDevice_FOCUS_DEVICE_UNSPECIFIED FocusDevice = 0
	FocusDevice_FOCUS_DEVICE_DESKTOP     FocusDevice = 20
	FocusDevice_FOCUS_DEVICE_MOBILE      FocusDevice = 300
)

// Enum value maps for FocusDevice.
var (
	FocusDevice_name = map[int32]string{
		0:   "FOCUS_DEVICE_UNSPECIFIED",
		20:  "FOCUS_DEVICE_DESKTOP",
		300: "FOCUS_DEVICE_MOBILE",
	}
	FocusDevice_value = map[string]int32{
		"FOCUS_DEVICE_UNSPECIFIED": 0,
		"FOCUS_DEVICE_DESKTOP":     20,
		"FOCUS_DEVICE_MOBILE":      300,
	}
)

func (x FocusDevice) Enum() *FocusDevice {
	p := new(FocusDevice)
	*p = x
	return p
}

func (x FocusDevice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FocusDevice) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[2].Descriptor()
}

func (FocusDevice) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[2]
}

func (x FocusDevice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FocusDevice) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FocusDevice(num)
	return nil
}

// Deprecated: Use FocusDevice.Descriptor instead.
func (FocusDevice) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{2}
}

type TypingType int32

const (
	TypingType_TYPING_TYPE_UNKNOWN TypingType = 0
	// Started typing.
	TypingType_TYPING_TYPE_STARTED TypingType = 1
	// Stopped typing with inputted text.
	TypingType_TYPING_TYPE_PAUSED TypingType = 2
	// Stopped typing with no inputted text.
	TypingType_TYPING_TYPE_STOPPED TypingType = 3
)

// Enum value maps for TypingType.
var (
	TypingType_name = map[int32]string{
		0: "TYPING_TYPE_UNKNOWN",
		1: "TYPING_TYPE_STARTED",
		2: "TYPING_TYPE_PAUSED",
		3: "TYPING_TYPE_STOPPED",
	}
	TypingType_value = map[string]int32{
		"TYPING_TYPE_UNKNOWN": 0,
		"TYPING_TYPE_STARTED": 1,
		"TYPING_TYPE_PAUSED":  2,
		"TYPING_TYPE_STOPPED": 3,
	}
)

func (x TypingType) Enum() *TypingType {
	p := new(TypingType)
	*p = x
	return p
}

func (x TypingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypingType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[3].Descriptor()
}

func (TypingType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[3]
}

func (x TypingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TypingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TypingType(num)
	return nil
}

// Deprecated: Use TypingType.Descriptor instead.
func (TypingType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{3}
}

type ClientPresenceStateType int32

const (
	ClientPresenceStateType_CLIENT_PRESENCE_STATE_UNKNOWN        ClientPresenceStateType = 0
	ClientPresenceStateType_CLIENT_PRESENCE_STATE_NONE           ClientPresenceStateType = 1
	ClientPresenceStateType_CLIENT_PRESENCE_STATE_DESKTOP_IDLE   ClientPresenceStateType = 30
	ClientPresenceStateType_CLIENT_PRESENCE_STATE_DESKTOP_ACTIVE ClientPresenceStateType = 40
)

// Enum value maps for ClientPresenceStateType.
var (
	ClientPresenceStateType_name = map[int32]string{
		0:  "CLIENT_PRESENCE_STATE_UNKNOWN",
		1:  "CLIENT_PRESENCE_STATE_NONE",
		30: "CLIENT_PRESENCE_STATE_DESKTOP_IDLE",
		40: "CLIENT_PRESENCE_STATE_DESKTOP_ACTIVE",
	}
	ClientPresenceStateType_value = map[string]int32{
		"CLIENT_PRESENCE_STATE_UNKNOWN":        0,
		"CLIENT_PRESENCE_STATE_NONE":           1,
		"CLIENT_PRESENCE_STATE_DESKTOP_IDLE":   30,
		"CLIENT_PRESENCE_STATE_DESKTOP_ACTIVE": 40,
	}
)

func (x ClientPresenceStateType) Enum() *ClientPresenceStateType {
	p := new(ClientPresenceStateType)
	*p = x
	return p
}

func (x ClientPresenceStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientPresenceStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[4].Descriptor()
}

func (ClientPresenceStateType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[4]
}

func (x ClientPresenceStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientPresenceStateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientPresenceStateType(num)
	return nil
}

// Deprecated: Use ClientPresenceStateType.Descriptor instead.
func (ClientPresenceStateType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{4}
}

type NotificationLevel int32

const (
	NotificationLevel_NOTIFICATION_LEVEL_UNKNOWN NotificationLevel = 0
	// Notifications are disabled.
	NotificationLevel_NOTIFICATION_LEVEL_QUIET NotificationLevel = 10
	// Notifications are enabled.
	NotificationLevel_NOTIFICATION_LEVEL_RING NotificationLevel = 30
)

// Enum value maps for NotificationLevel.
var (
	NotificationLevel_name = map[int32]string{
		0:  "NOTIFICATION_LEVEL_UNKNOWN",
		10: "NOTIFICATION_LEVEL_QUIET",
		30: "NOTIFICATION_LEVEL_RING",
	}
	NotificationLevel_value = map[string]int32{
		"NOTIFICATION_LEVEL_UNKNOWN": 0,
		"NOTIFICATION_LEVEL_QUIET":   10,
		"NOTIFICATION_LEVEL_RING":    30,
	}
)

func (x NotificationLevel) Enum() *NotificationLevel {
	p := new(NotificationLevel)
	*p = x
	return p
}

func (x NotificationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[5].Descriptor()
}

func (NotificationLevel) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[5]
}

func (x NotificationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NotificationLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NotificationLevel(num)
	return nil
}

// Deprecated: Use NotificationLevel.Descriptor instead.
func (NotificationLevel) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{5}
}

type SegmentType int32

const (
	// Segment is text.
	SegmentType_SEGMENT_TYPE_TEXT SegmentType = 0
	// Segment is a line break.
	SegmentType_SEGMENT_TYPE_LINE_BREAK SegmentType = 1
	// Segment is hyperlinked text.
	SegmentType_SEGMENT_TYPE_LINK SegmentType = 2
)

// Enum value maps for SegmentType.
var (
	SegmentType_name = map[int32]string{
		0: "SEGMENT_TYPE_TEXT",
		1: "SEGMENT_TYPE_LINE_BREAK",
		2: "SEGMENT_TYPE_LINK",
	}
	SegmentType_value = map[string]int32{
		"SEGMENT_TYPE_TEXT":       0,
		"SEGMENT_TYPE_LINE_BREAK": 1,
		"SEGMENT_TYPE_LINK":       2,
	}
)

func (x SegmentType) Enum() *SegmentType {
	p := new(SegmentType)
	*p = x
	return p
}

func (x SegmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[6].Descriptor()
}

func (SegmentType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[6]
}

func (x SegmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SegmentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SegmentType(num)
	return nil
}

// Deprecated: Use SegmentType.Descriptor instead.
func (SegmentType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{6}
}

// A type of embedded item.
type ItemType int32

const (
	ItemType_ITEM_TYPE_THING ItemType = 0
	// Google Plus photo.
	ItemType_ITEM_TYPE_PLUS_PHOTO ItemType = 249
	ItemType_ITEM_TYPE_PLACE      ItemType = 335
	// Google Map place.
	ItemType_ITEM_TYPE_PLACE_V2 ItemType = 340
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0:   "ITEM_TYPE_THING",
		249: "ITEM_TYPE_PLUS_PHOTO",
		335: "ITEM_TYPE_PLACE",
		340: "ITEM_TYPE_PLACE_V2",
	}
	ItemType_value = map[string]int32{
		"ITEM_TYPE_THING":      0,
		"ITEM_TYPE_PLUS_PHOTO": 249,
		"ITEM_TYPE_PLACE":      335,
		"ITEM_TYPE_PLACE_V2":   340,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[7].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[7]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ItemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ItemType(num)
	return nil
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{7}
}

type MembershipChangeType int32

const (
	MembershipChangeType_MEMBERSHIP_CHANGE_TYPE_JOIN  MembershipChangeType = 1
	MembershipChangeType_MEMBERSHIP_CHANGE_TYPE_LEAVE MembershipChangeType = 2
)

// Enum value maps for MembershipChangeType.
var (
	MembershipChangeType_name = map[int32]string{
		1: "MEMBERSHIP_CHANGE_TYPE_JOIN",
		2: "MEMBERSHIP_CHANGE_TYPE_LEAVE",
	}
	MembershipChangeType_value = map[string]int32{
		"MEMBERSHIP_CHANGE_TYPE_JOIN":  1,
		"MEMBERSHIP_CHANGE_TYPE_LEAVE": 2,
	}
)

func (x MembershipChangeType) Enum() *MembershipChangeType {
	p := new(MembershipChangeType)
	*p = x
	return p
}

func (x MembershipChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[8].Descriptor()
}

func (MembershipChangeType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[8]
}

func (x MembershipChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MembershipChangeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MembershipChangeType(num)
	return nil
}

// Deprecated: Use MembershipChangeType.Descriptor instead.
func (MembershipChangeType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{8}
}

type HangoutEventType int32

const (
	HangoutEventType_HANGOUT_EVENT_TYPE_UNKNOWN     HangoutEventType = 0
	HangoutEventType_HANGOUT_EVENT_TYPE_START       HangoutEventType = 1
	HangoutEventType_HANGOUT_EVENT_TYPE_END         HangoutEventType = 2
	HangoutEventType_HANGOUT_EVENT_TYPE_JOIN        HangoutEventType = 3
	HangoutEventType_HANGOUT_EVENT_TYPE_LEAVE       HangoutEventType = 4
	HangoutEventType_HANGOUT_EVENT_TYPE_COMING_SOON HangoutEventType = 5
	HangoutEventType_HANGOUT_EVENT_TYPE_ONGOING     HangoutEventType = 6
)

// Enum value maps for HangoutEventType.
var (
	HangoutEventType_name = map[int32]string{
		0: "HANGOUT_EVENT_TYPE_UNKNOWN",
		1: "HANGOUT_EVENT_TYPE_START",
		2: "HANGOUT_EVENT_TYPE_END",
		3: "HANGOUT_EVENT_TYPE_JOIN",
		4: "HANGOUT_EVENT_TYPE_LEAVE",
		5: "HANGOUT_EVENT_TYPE_COMING_SOON",
		6: "HANGOUT_EVENT_TYPE_ONGOING",
	}
	HangoutEventType_value = map[string]int32{
		"HANGOUT_EVENT_TYPE_UNKNOWN":     0,
		"HANGOUT_EVENT_TYPE_START":       1,
		"HANGOUT_EVENT_TYPE_END":         2,
		"HANGOUT_EVENT_TYPE_JOIN":        3,
		"HANGOUT_EVENT_TYPE_LEAVE":       4,
		"HANGOUT_EVENT_TYPE_COMING_SOON": 5,
		"HANGOUT_EVENT_TYPE_ONGOING":     6,
	}
)

func (x HangoutEventType) Enum() *HangoutEventType {
	p := new(HangoutEventType)
	*p = x
	return p
}

func (x HangoutEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HangoutEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[9].Descriptor()
}

func (HangoutEventType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[9]
}

func (x HangoutEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HangoutEventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HangoutEventType(num)
	return nil
}

// Deprecated: Use HangoutEventType.Descriptor instead.
func (HangoutEventType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{9}
}

// Whether the OTR toggle is available to the user.
type OffTheRecordToggle int32

const (
	OffTheRecordToggle_OFF_THE_RECORD_TOGGLE_UNKNOWN  OffTheRecordToggle = 0
	OffTheRecordToggle_OFF_THE_RECORD_TOGGLE_ENABLED  OffTheRecordToggle = 1
	OffTheRecordToggle_OFF_THE_RECORD_TOGGLE_DISABLED OffTheRecordToggle = 2
)

// Enum value maps for OffTheRecordToggle.
var (
	OffTheRecordToggle_name = map[int32]string{
		0: "OFF_THE_RECORD_TOGGLE_UNKNOWN",
		1: "OFF_THE_RECORD_TOGGLE_ENABLED",
		2: "OFF_THE_RECORD_TOGGLE_DISABLED",
	}
	OffTheRecordToggle_value = map[string]int32{
		"OFF_THE_RECORD_TOGGLE_UNKNOWN":  0,
		"OFF_THE_RECORD_TOGGLE_ENABLED":  1,
		"OFF_THE_RECORD_TOGGLE_DISABLED": 2,
	}
)

func (x OffTheRecordToggle) Enum() *OffTheRecordToggle {
	p := new(OffTheRecordToggle)
	*p = x
	return p
}

func (x OffTheRecordToggle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OffTheRecordToggle) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[10].Descriptor()
}

func (OffTheRecordToggle) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[10]
}

func (x OffTheRecordToggle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OffTheRecordToggle) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OffTheRecordToggle(num)
	return nil
}

// Deprecated: Use OffTheRecordToggle.Descriptor instead.
func (OffTheRecordToggle) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{10}
}

type OffTheRecordStatus int32

const (
	OffTheRecordStatus_OFF_THE_RECORD_STATUS_UNKNOWN OffTheRecordStatus = 0
	// Conversation is off-the-record (history disabled).
	OffTheRecordStatus_OFF_THE_RECORD_STATUS_OFF_THE_RECORD OffTheRecordStatus = 1
	// Conversation is on-the-record (history enabled).
	OffTheRecordStatus_OFF_THE_RECORD_STATUS_ON_THE_RECORD OffTheRecordStatus = 2
)

// Enum value maps for OffTheRecordStatus.
var (
	OffTheRecordStatus_name = map[int32]string{
		0: "OFF_THE_RECORD_STATUS_UNKNOWN",
		1: "OFF_THE_RECORD_STATUS_OFF_THE_RECORD",
		2: "OFF_THE_RECORD_STATUS_ON_THE_RECORD",
	}
	OffTheRecordStatus_value = map[string]int32{
		"OFF_THE_RECORD_STATUS_UNKNOWN":        0,
		"OFF_THE_RECORD_STATUS_OFF_THE_RECORD": 1,
		"OFF_THE_RECORD_STATUS_ON_THE_RECORD":  2,
	}
)

func (x OffTheRecordStatus) Enum() *OffTheRecordStatus {
	p := new(OffTheRecordStatus)
	*p = x
	return p
}

func (x OffTheRecordStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OffTheRecordStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[11].Descriptor()
}

func (OffTheRecordStatus) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[11]
}

func (x OffTheRecordStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OffTheRecordStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OffTheRecordStatus(num)
	return nil
}

// Deprecated: Use OffTheRecordStatus.Descriptor instead.
func (OffTheRecordStatus) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{11}
}

type SourceType int32

const (
	SourceType_SOURCE_TYPE_UNKNOWN SourceType = 0
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "SOURCE_TYPE_UNKNOWN",
	}
	SourceType_value = map[string]int32{
		"SOURCE_TYPE_UNKNOWN": 0,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[12].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[12]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SourceType(num)
	return nil
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{12}
}

type EventType int32

const (
	EventType_EVENT_TYPE_UNKNOWN                         EventType = 0
	EventType_EVENT_TYPE_REGULAR_CHAT_MESSAGE            EventType = 1
	EventType_EVENT_TYPE_SMS                             EventType = 2
	EventType_EVENT_TYPE_VOICEMAIL                       EventType = 3
	EventType_EVENT_TYPE_ADD_USER                        EventType = 4
	EventType_EVENT_TYPE_REMOVE_USER                     EventType = 5
	EventType_EVENT_TYPE_CONVERSATION_RENAME             EventType = 6
	EventType_EVENT_TYPE_HANGOUT                         EventType = 7
	EventType_EVENT_TYPE_PHONE_CALL                      EventType = 8
	EventType_EVENT_TYPE_OTR_MODIFICATION                EventType = 9
	EventType_EVENT_TYPE_PLAN_MUTATION                   EventType = 10
	EventType_EVENT_TYPE_MMS                             EventType = 11
	EventType_EVENT_TYPE_DEPRECATED_12                   EventType = 12
	EventType_EVENT_TYPE_OBSERVED_EVENT                  EventType = 13
	EventType_EVENT_TYPE_GROUP_LINK_SHARING_MODIFICATION EventType = 14
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "EVENT_TYPE_UNKNOWN",
		1:  "EVENT_TYPE_REGULAR_CHAT_MESSAGE",
		2:  "EVENT_TYPE_SMS",
		3:  "EVENT_TYPE_VOICEMAIL",
		4:  "EVENT_TYPE_ADD_USER",
		5:  "EVENT_TYPE_REMOVE_USER",
		6:  "EVENT_TYPE_CONVERSATION_RENAME",
		7:  "EVENT_TYPE_HANGOUT",
		8:  "EVENT_TYPE_PHONE_CALL",
		9:  "EVENT_TYPE_OTR_MODIFICATION",
		10: "EVENT_TYPE_PLAN_MUTATION",
		11: "EVENT_TYPE_MMS",
		12: "EVENT_TYPE_DEPRECATED_12",
		13: "EVENT_TYPE_OBSERVED_EVENT",
		14: "EVENT_TYPE_GROUP_LINK_SHARING_MODIFICATION",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNKNOWN":                         0,
		"EVENT_TYPE_REGULAR_CHAT_MESSAGE":            1,
		"EVENT_TYPE_SMS":                             2,
		"EVENT_TYPE_VOICEMAIL":                       3,
		"EVENT_TYPE_ADD_USER":                        4,
		"EVENT_TYPE_REMOVE_USER":                     5,
		"EVENT_TYPE_CONVERSATION_RENAME":             6,
		"EVENT_TYPE_HANGOUT":                         7,
		"EVENT_TYPE_PHONE_CALL":                      8,
		"EVENT_TYPE_OTR_MODIFICATION":                9,
		"EVENT_TYPE_PLAN_MUTATION":                   10,
		"EVENT_TYPE_MMS":                             11,
		"EVENT_TYPE_DEPRECATED_12":                   12,
		"EVENT_TYPE_OBSERVED_EVENT":                  13,
		"EVENT_TYPE_GROUP_LINK_SHARING_MODIFICATION": 14,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[13].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[13]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventType(num)
	return nil
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{13}
}

type ConversationType int32

const (
	ConversationType_CONVERSATION_TYPE_UNKNOWN ConversationType = 0
	// Conversation is one-to-one (only 2 participants).
	ConversationType_CONVERSATION_TYPE_ONE_TO_ONE ConversationType = 1
	// Conversation is group (any number of participants).
	ConversationType_CONVERSATION_TYPE_GROUP ConversationType = 2
)

// Enum value maps for ConversationType.
var (
	ConversationType_name = map[int32]string{
		0: "CONVERSATION_TYPE_UNKNOWN",
		1: "CONVERSATION_TYPE_ONE_TO_ONE",
		2: "CONVERSATION_TYPE_GROUP",
	}
	ConversationType_value = map[string]int32{
		"CONVERSATION_TYPE_UNKNOWN":    0,
		"CONVERSATION_TYPE_ONE_TO_ONE": 1,
		"CONVERSATION_TYPE_GROUP":      2,
	}
)

func (x ConversationType) Enum() *ConversationType {
	p := new(ConversationType)
	*p = x
	return p
}

func (x ConversationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[14].Descriptor()
}

func (ConversationType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[14]
}

func (x ConversationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConversationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConversationType(num)
	return nil
}

// Deprecated: Use ConversationType.Descriptor instead.
func (ConversationType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{14}
}

type ConversationStatus int32

const (
	ConversationStatus_CONVERSATION_STATUS_UNKNOWN ConversationStatus = 0
	// User is invited to conversation.
	ConversationStatus_CONVERSATION_STATUS_INVITED ConversationStatus = 1
	// User is participating in conversation.
	ConversationStatus_CONVERSATION_STATUS_ACTIVE ConversationStatus = 2
	// User has left conversation.
	ConversationStatus_CONVERSATION_STATUS_LEFT ConversationStatus = 3
)

// Enum value maps for ConversationStatus.
var (
	ConversationStatus_name = map[int32]string{
		0: "CONVERSATION_STATUS_UNKNOWN",
		1: "CONVERSATION_STATUS_INVITED",
		2: "CONVERSATION_STATUS_ACTIVE",
		3: "CONVERSATION_STATUS_LEFT",
	}
	ConversationStatus_value = map[string]int32{
		"CONVERSATION_STATUS_UNKNOWN": 0,
		"CONVERSATION_STATUS_INVITED": 1,
		"CONVERSATION_STATUS_ACTIVE":  2,
		"CONVERSATION_STATUS_LEFT":    3,
	}
)

func (x ConversationStatus) Enum() *ConversationStatus {
	p := new(ConversationStatus)
	*p = x
	return p
}

func (x ConversationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[15].Descriptor()
}

func (ConversationStatus) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[15]
}

func (x ConversationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConversationStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConversationStatus(num)
	return nil
}

// Deprecated: Use ConversationStatus.Descriptor instead.
func (ConversationStatus) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{15}
}

type ConversationView int32

const (
	ConversationView_CONVERSATION_VIEW_UNKNOWN ConversationView = 0
	// Conversation is in inbox.
	ConversationView_CONVERSATION_VIEW_INBOX ConversationView = 1
	// Conversation has been archived.
	ConversationView_CONVERSATION_VIEW_ARCHIVED ConversationView = 2
)

// Enum value maps for ConversationView.
var (
	ConversationView_name = map[int32]string{
		0: "CONVERSATION_VIEW_UNKNOWN",
		1: "CONVERSATION_VIEW_INBOX",
		2: "CONVERSATION_VIEW_ARCHIVED",
	}
	ConversationView_value = map[string]int32{
		"CONVERSATION_VIEW_UNKNOWN":  0,
		"CONVERSATION_VIEW_INBOX":    1,
		"CONVERSATION_VIEW_ARCHIVED": 2,
	}
)

func (x ConversationView) Enum() *ConversationView {
	p := new(ConversationView)
	*p = x
	return p
}

func (x ConversationView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationView) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[16].Descriptor()
}

func (ConversationView) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[16]
}

func (x ConversationView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConversationView) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConversationView(num)
	return nil
}

// Deprecated: Use ConversationView.Descriptor instead.
func (ConversationView) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{16}
}

type DeliveryMediumType int32

const (
	DeliveryMediumType_DELIVERY_MEDIUM_UNKNOWN      DeliveryMediumType = 0
	DeliveryMediumType_DELIVERY_MEDIUM_BABEL        DeliveryMediumType = 1
	DeliveryMediumType_DELIVERY_MEDIUM_GOOGLE_VOICE DeliveryMediumType = 2
	DeliveryMediumType_DELIVERY_MEDIUM_LOCAL_SMS    DeliveryMediumType = 3
)

// Enum value maps for DeliveryMediumType.
var (
	DeliveryMediumType_name = map[int32]string{
		0: "DELIVERY_MEDIUM_UNKNOWN",
		1: "DELIVERY_MEDIUM_BABEL",
		2: "DELIVERY_MEDIUM_GOOGLE_VOICE",
		3: "DELIVERY_MEDIUM_LOCAL_SMS",
	}
	DeliveryMediumType_value = map[string]int32{
		"DELIVERY_MEDIUM_UNKNOWN":      0,
		"DELIVERY_MEDIUM_BABEL":        1,
		"DELIVERY_MEDIUM_GOOGLE_VOICE": 2,
		"DELIVERY_MEDIUM_LOCAL_SMS":    3,
	}
)

func (x DeliveryMediumType) Enum() *DeliveryMediumType {
	p := new(DeliveryMediumType)
	*p = x
	return p
}

func (x DeliveryMediumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryMediumType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[17].Descriptor()
}

func (DeliveryMediumType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[17]
}

func (x DeliveryMediumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeliveryMediumType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeliveryMediumType(num)
	return nil
}

// Deprecated: Use DeliveryMediumType.Descriptor instead.
func (DeliveryMediumType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{17}
}

type InvitationAffinity int32

const (
	InvitationAffinity_INVITE_AFFINITY_UNKNOWN InvitationAffinity = 0
	InvitationAffinity_INVITE_AFFINITY_HIGH    InvitationAffinity = 1
	InvitationAffinity_INVITE_AFFINITY_LOW     InvitationAffinity = 2
)

// Enum value maps for InvitationAffinity.
var (
	InvitationAffinity_name = map[int32]string{
		0: "INVITE_AFFINITY_UNKNOWN",
		1: "INVITE_AFFINITY_HIGH",
		2: "INVITE_AFFINITY_LOW",
	}
	InvitationAffinity_value = map[string]int32{
		"INVITE_AFFINITY_UNKNOWN": 0,
		"INVITE_AFFINITY_HIGH":    1,
		"INVITE_AFFINITY_LOW":     2,
	}
)

func (x InvitationAffinity) Enum() *InvitationAffinity {
	p := new(InvitationAffinity)
	*p = x
	return p
}

func (x InvitationAffinity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvitationAffinity) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[18].Descriptor()
}

func (InvitationAffinity) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[18]
}

func (x InvitationAffinity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InvitationAffinity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InvitationAffinity(num)
	return nil
}

// Deprecated: Use InvitationAffinity.Descriptor instead.
func (InvitationAffinity) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{18}
}

type ParticipantType int32

const (
	ParticipantType_PARTICIPANT_TYPE_UNKNOWN      ParticipantType = 0
	ParticipantType_PARTICIPANT_TYPE_GAIA         ParticipantType = 2
	ParticipantType_PARTICIPANT_TYPE_GOOGLE_VOICE ParticipantType = 3
)

// Enum value maps for ParticipantType.
var (
	ParticipantType_name = map[int32]string{
		0: "PARTICIPANT_TYPE_UNKNOWN",
		2: "PARTICIPANT_TYPE_GAIA",
		3: "PARTICIPANT_TYPE_GOOGLE_VOICE",
	}
	ParticipantType_value = map[string]int32{
		"PARTICIPANT_TYPE_UNKNOWN":      0,
		"PARTICIPANT_TYPE_GAIA":         2,
		"PARTICIPANT_TYPE_GOOGLE_VOICE": 3,
	}
)

func (x ParticipantType) Enum() *ParticipantType {
	p := new(ParticipantType)
	*p = x
	return p
}

func (x ParticipantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[19].Descriptor()
}

func (ParticipantType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[19]
}

func (x ParticipantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ParticipantType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ParticipantType(num)
	return nil
}

// Deprecated: Use ParticipantType.Descriptor instead.
func (ParticipantType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{19}
}

type InvitationStatus int32

const (
	InvitationStatus_INVITATION_STATUS_UNKNOWN  InvitationStatus = 0
	InvitationStatus_INVITATION_STATUS_PENDING  InvitationStatus = 1
	InvitationStatus_INVITATION_STATUS_ACCEPTED InvitationStatus = 2
)

// Enum value maps for InvitationStatus.
var (
	InvitationStatus_name = map[int32]string{
		0: "INVITATION_STATUS_UNKNOWN",
		1: "INVITATION_STATUS_PENDING",
		2: "INVITATION_STATUS_ACCEPTED",
	}
	InvitationStatus_value = map[string]int32{
		"INVITATION_STATUS_UNKNOWN":  0,
		"INVITATION_STATUS_PENDING":  1,
		"INVITATION_STATUS_ACCEPTED": 2,
	}
)

func (x InvitationStatus) Enum() *InvitationStatus {
	p := new(InvitationStatus)
	*p = x
	return p
}

func (x InvitationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvitationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[20].Descriptor()
}

func (InvitationStatus) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[20]
}

func (x InvitationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InvitationStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InvitationStatus(num)
	return nil
}

// Deprecated: Use InvitationStatus.Descriptor instead.
func (InvitationStatus) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{20}
}

type ForceHistory int32

const (
	ForceHistory_FORCE_HISTORY_UNKNOWN ForceHistory = 0
	ForceHistory_FORCE_HISTORY_NO      ForceHistory = 1
)

// Enum value maps for ForceHistory.
var (
	ForceHistory_name = map[int32]string{
		0: "FORCE_HISTORY_UNKNOWN",
		1: "FORCE_HISTORY_NO",
	}
	ForceHistory_value = map[string]int32{
		"FORCE_HISTORY_UNKNOWN": 0,
		"FORCE_HISTORY_NO":      1,
	}
)

func (x ForceHistory) Enum() *ForceHistory {
	p := new(ForceHistory)
	*p = x
	return p
}

func (x ForceHistory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForceHistory) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[21].Descriptor()
}

func (ForceHistory) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[21]
}

func (x ForceHistory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ForceHistory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ForceHistory(num)
	return nil
}

// Deprecated: Use ForceHistory.Descriptor instead.
func (ForceHistory) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{21}
}

type NetworkType int32

const (
	NetworkType_NETWORK_TYPE_UNKNOWN      NetworkType = 0
	NetworkType_NETWORK_TYPE_BABEL        NetworkType = 1
	NetworkType_NETWORK_TYPE_GOOGLE_VOICE NetworkType = 2
)

// Enum value maps for NetworkType.
var (
	NetworkType_name = map[int32]string{
		0: "NETWORK_TYPE_UNKNOWN",
		1: "NETWORK_TYPE_BABEL",
		2: "NETWORK_TYPE_GOOGLE_VOICE",
	}
	NetworkType_value = map[string]int32{
		"NETWORK_TYPE_UNKNOWN":      0,
		"NETWORK_TYPE_BABEL":        1,
		"NETWORK_TYPE_GOOGLE_VOICE": 2,
	}
)

func (x NetworkType) Enum() *NetworkType {
	p := new(NetworkType)
	*p = x
	return p
}

func (x NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[22].Descriptor()
}

func (NetworkType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[22]
}

func (x NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NetworkType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NetworkType(num)
	return nil
}

// Deprecated: Use NetworkType.Descriptor instead.
func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{22}
}

type BlockState int32

const (
	BlockState_BLOCK_STATE_UNKNOWN BlockState = 0
	BlockState_BLOCK_STATE_BLOCK   BlockState = 1
	BlockState_BLOCK_STATE_UNBLOCK BlockState = 2
)

// Enum value maps for BlockState.
var (
	BlockState_name = map[int32]string{
		0: "BLOCK_STATE_UNKNOWN",
		1: "BLOCK_STATE_BLOCK",
		2: "BLOCK_STATE_UNBLOCK",
	}
	BlockState_value = map[string]int32{
		"BLOCK_STATE_UNKNOWN": 0,
		"BLOCK_STATE_BLOCK":   1,
		"BLOCK_STATE_UNBLOCK": 2,
	}
)

func (x BlockState) Enum() *BlockState {
	p := new(BlockState)
	*p = x
	return p
}

func (x BlockState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockState) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[23].Descriptor()
}

func (BlockState) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[23]
}

func (x BlockState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BlockState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BlockState(num)
	return nil
}

// Deprecated: Use BlockState.Descriptor instead.
func (BlockState) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{23}
}

type ReplyToInviteType int32

const (
	ReplyToInviteType_REPLY_TO_INVITE_TYPE_UNKNOWN ReplyToInviteType = 0
	ReplyToInviteType_REPLY_TO_INVITE_TYPE_ACCEPT  ReplyToInviteType = 1
	ReplyToInviteType_REPLY_TO_INVITE_TYPE_DECLINE ReplyToInviteType = 2
)

// Enum value maps for ReplyToInviteType.
var (
	ReplyToInviteType_name = map[int32]string{
		0: "REPLY_TO_INVITE_TYPE_UNKNOWN",
		1: "REPLY_TO_INVITE_TYPE_ACCEPT",
		2: "REPLY_TO_INVITE_TYPE_DECLINE",
	}
	ReplyToInviteType_value = map[string]int32{
		"REPLY_TO_INVITE_TYPE_UNKNOWN": 0,
		"REPLY_TO_INVITE_TYPE_ACCEPT":  1,
		"REPLY_TO_INVITE_TYPE_DECLINE": 2,
	}
)

func (x ReplyToInviteType) Enum() *ReplyToInviteType {
	p := new(ReplyToInviteType)
	*p = x
	return p
}

func (x ReplyToInviteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplyToInviteType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[24].Descriptor()
}

func (ReplyToInviteType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[24]
}

func (x ReplyToInviteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReplyToInviteType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReplyToInviteType(num)
	return nil
}

// Deprecated: Use ReplyToInviteType.Descriptor instead.
func (ReplyToInviteType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{24}
}

// Identifies the client.
type ClientId int32

const (
	ClientId_CLIENT_ID_UNKNOWN ClientId = 0
	// Hangouts app for Android.
	ClientId_CLIENT_ID_ANDROID ClientId = 1
	// Hangouts app for iOS.
	ClientId_CLIENT_ID_IOS ClientId = 2
	// Hangouts Chrome extension.
	ClientId_CLIENT_ID_CHROME ClientId = 3
	// Hangouts web interface in Google Plus.
	ClientId_CLIENT_ID_WEB_GPLUS ClientId = 5
	// Hangouts web interface in Gmail.
	ClientId_CLIENT_ID_WEB_GMAIL ClientId = 6
	// Hangouts Chrome app ("ultraviolet").
	ClientId_CLIENT_ID_ULTRAVIOLET ClientId = 13
	// Hangouts web app (https://hangouts.google.com).
	ClientId_CLIENT_ID_WEB_HANGOUTS ClientId = 44
)

// Enum value maps for ClientId.
var (
	ClientId_name = map[int32]string{
		0:  "CLIENT_ID_UNKNOWN",
		1:  "CLIENT_ID_ANDROID",
		2:  "CLIENT_ID_IOS",
		3:  "CLIENT_ID_CHROME",
		5:  "CLIENT_ID_WEB_GPLUS",
		6:  "CLIENT_ID_WEB_GMAIL",
		13: "CLIENT_ID_ULTRAVIOLET",
		44: "CLIENT_ID_WEB_HANGOUTS",
	}
	ClientId_value = map[string]int32{
		"CLIENT_ID_UNKNOWN":      0,
		"CLIENT_ID_ANDROID":      1,
		"CLIENT_ID_IOS":          2,
		"CLIENT_ID_CHROME":       3,
		"CLIENT_ID_WEB_GPLUS":    5,
		"CLIENT_ID_WEB_GMAIL":    6,
		"CLIENT_ID_ULTRAVIOLET":  13,
		"CLIENT_ID_WEB_HANGOUTS": 44,
	}
)

func (x ClientId) Enum() *ClientId {
	p := new(ClientId)
	*p = x
	return p
}

func (x ClientId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientId) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[25].Descriptor()
}

func (ClientId) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[25]
}

func (x ClientId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientId) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientId(num)
	return nil
}

// Deprecated: Use ClientId.Descriptor instead.
func (ClientId) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{25}
}

// Build type of the client.
type ClientBuildType int32

const (
	ClientBuildType_BUILD_TYPE_UNKNOWN ClientBuildType = 0
	// Web app (not used anymore?).
	ClientBuildType_BUILD_TYPE_PRODUCTION_WEB ClientBuildType = 1
	// Native app.
	ClientBuildType_BUILD_TYPE_PRODUCTION_APP ClientBuildType = 3
)

// Enum value maps for ClientBuildType.
var (
	ClientBuildType_name = map[int32]string{
		0: "BUILD_TYPE_UNKNOWN",
		1: "BUILD_TYPE_PRODUCTION_WEB",
		3: "BUILD_TYPE_PRODUCTION_APP",
	}
	ClientBuildType_value = map[string]int32{
		"BUILD_TYPE_UNKNOWN":        0,
		"BUILD_TYPE_PRODUCTION_WEB": 1,
		"BUILD_TYPE_PRODUCTION_APP": 3,
	}
)

func (x ClientBuildType) Enum() *ClientBuildType {
	p := new(ClientBuildType)
	*p = x
	return p
}

func (x ClientBuildType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientBuildType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[26].Descriptor()
}

func (ClientBuildType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[26]
}

func (x ClientBuildType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientBuildType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientBuildType(num)
	return nil
}

// Deprecated: Use ClientBuildType.Descriptor instead.
func (ClientBuildType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{26}
}

// Status of the response from the server to the client.
type ResponseStatus int32

const (
	ResponseStatus_RESPONSE_STATUS_UNKNOWN          ResponseStatus = 0
	ResponseStatus_RESPONSE_STATUS_OK               ResponseStatus = 1
	ResponseStatus_RESPONSE_STATUS_UNEXPECTED_ERROR ResponseStatus = 3
	ResponseStatus_RESPONSE_STATUS_INVALID_REQUEST  ResponseStatus = 4
)

// Enum value maps for ResponseStatus.
var (
	ResponseStatus_name = map[int32]string{
		0: "RESPONSE_STATUS_UNKNOWN",
		1: "RESPONSE_STATUS_OK",
		3: "RESPONSE_STATUS_UNEXPECTED_ERROR",
		4: "RESPONSE_STATUS_INVALID_REQUEST",
	}
	ResponseStatus_value = map[string]int32{
		"RESPONSE_STATUS_UNKNOWN":          0,
		"RESPONSE_STATUS_OK":               1,
		"RESPONSE_STATUS_UNEXPECTED_ERROR": 3,
		"RESPONSE_STATUS_INVALID_REQUEST":  4,
	}
)

func (x ResponseStatus) Enum() *ResponseStatus {
	p := new(ResponseStatus)
	*p = x
	return p
}

func (x ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[27].Descriptor()
}

func (ResponseStatus) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[27]
}

func (x ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResponseStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResponseStatus(num)
	return nil
}

// Deprecated: Use ResponseStatus.Descriptor instead.
func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{27}
}

// Status of EntityProperties.photo_url.
type PhotoUrlStatus int32

const (
	PhotoUrlStatus_PHOTO_URL_STATUS_UNKNOWN PhotoUrlStatus = 0
	// URL is a placeholder.
	PhotoUrlStatus_PHOTO_URL_STATUS_PLACEHOLDER PhotoUrlStatus = 1
	// URL is a photo set by the user.
	PhotoUrlStatus_PHOTO_URL_STATUS_USER_PHOTO PhotoUrlStatus = 2
)

// Enum value maps for PhotoUrlStatus.
var (
	PhotoUrlStatus_name = map[int32]string{
		0: "PHOTO_URL_STATUS_UNKNOWN",
		1: "PHOTO_URL_STATUS_PLACEHOLDER",
		2: "PHOTO_URL_STATUS_USER_PHOTO",
	}
	PhotoUrlStatus_value = map[string]int32{
		"PHOTO_URL_STATUS_UNKNOWN":     0,
		"PHOTO_URL_STATUS_PLACEHOLDER": 1,
		"PHOTO_URL_STATUS_USER_PHOTO":  2,
	}
)

func (x PhotoUrlStatus) Enum() *PhotoUrlStatus {
	p := new(PhotoUrlStatus)
	*p = x
	return p
}

func (x PhotoUrlStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhotoUrlStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[28].Descriptor()
}

func (PhotoUrlStatus) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[28]
}

func (x PhotoUrlStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PhotoUrlStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PhotoUrlStatus(num)
	return nil
}

// Deprecated: Use PhotoUrlStatus.Descriptor instead.
func (PhotoUrlStatus) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{28}
}

type Gender int32

const (
	Gender_GENDER_UNKNOWN Gender = 0
	Gender_GENDER_MALE    Gender = 1
	Gender_GENDER_FEMALE  Gender = 2
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_UNKNOWN",
		1: "GENDER_MALE",
		2: "GENDER_FEMALE",
	}
	Gender_value = map[string]int32{
		"GENDER_UNKNOWN": 0,
		"GENDER_MALE":    1,
		"GENDER_FEMALE":  2,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[29].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[29]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Gender) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Gender(num)
	return nil
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{29}
}

type ProfileType int32

const (
	ProfileType_PROFILE_TYPE_NONE    ProfileType = 0
	ProfileType_PROFILE_TYPE_ES_USER ProfileType = 1
)

// Enum value maps for ProfileType.
var (
	ProfileType_name = map[int32]string{
		0: "PROFILE_TYPE_NONE",
		1: "PROFILE_TYPE_ES_USER",
	}
	ProfileType_value = map[string]int32{
		"PROFILE_TYPE_NONE":    0,
		"PROFILE_TYPE_ES_USER": 1,
	}
)

func (x ProfileType) Enum() *ProfileType {
	p := new(ProfileType)
	*p = x
	return p
}

func (x ProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[30].Descriptor()
}

func (ProfileType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[30]
}

func (x ProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProfileType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProfileType(num)
	return nil
}

// Deprecated: Use ProfileType.Descriptor instead.
func (ProfileType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{30}
}

// A type of binary configuration option.
type ConfigurationBitType int32

const (
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN                               ConfigurationBitType = 0
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_1                             ConfigurationBitType = 1
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_2                             ConfigurationBitType = 2
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_3                             ConfigurationBitType = 3
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_4                             ConfigurationBitType = 4
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_5                             ConfigurationBitType = 5
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_6                             ConfigurationBitType = 6
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_7                             ConfigurationBitType = 7
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_8                             ConfigurationBitType = 8
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_9                             ConfigurationBitType = 9
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_10                            ConfigurationBitType = 10
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_11                            ConfigurationBitType = 11
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_12                            ConfigurationBitType = 12
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_13                            ConfigurationBitType = 13
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_14                            ConfigurationBitType = 14
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_15                            ConfigurationBitType = 15
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_16                            ConfigurationBitType = 16
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_17                            ConfigurationBitType = 17
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_18                            ConfigurationBitType = 18
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_19                            ConfigurationBitType = 19
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_20                            ConfigurationBitType = 20
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_21                            ConfigurationBitType = 21
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_22                            ConfigurationBitType = 22
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_23                            ConfigurationBitType = 23
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_24                            ConfigurationBitType = 24
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_25                            ConfigurationBitType = 25
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_26                            ConfigurationBitType = 26
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_27                            ConfigurationBitType = 27
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_28                            ConfigurationBitType = 28
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_29                            ConfigurationBitType = 29
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_30                            ConfigurationBitType = 30
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_31                            ConfigurationBitType = 31
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_32                            ConfigurationBitType = 32
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_33                            ConfigurationBitType = 33
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_DESKTOP_AUTO_EMOJI_CONVERSION_ENABLED ConfigurationBitType = 34
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_35                            ConfigurationBitType = 35
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN_36                            ConfigurationBitType = 36
	ConfigurationBitType_CONFIGURATION_BIT_TYPE_DESKTOP_COMPACT_MODE_ENABLED          ConfigurationBitType = 38
)

// Enum value maps for ConfigurationBitType.
var (
	ConfigurationBitType_name = map[int32]string{
		0:  "CONFIGURATION_BIT_TYPE_UNKNOWN",
		1:  "CONFIGURATION_BIT_TYPE_UNKNOWN_1",
		2:  "CONFIGURATION_BIT_TYPE_UNKNOWN_2",
		3:  "CONFIGURATION_BIT_TYPE_UNKNOWN_3",
		4:  "CONFIGURATION_BIT_TYPE_UNKNOWN_4",
		5:  "CONFIGURATION_BIT_TYPE_UNKNOWN_5",
		6:  "CONFIGURATION_BIT_TYPE_UNKNOWN_6",
		7:  "CONFIGURATION_BIT_TYPE_UNKNOWN_7",
		8:  "CONFIGURATION_BIT_TYPE_UNKNOWN_8",
		9:  "CONFIGURATION_BIT_TYPE_UNKNOWN_9",
		10: "CONFIGURATION_BIT_TYPE_UNKNOWN_10",
		11: "CONFIGURATION_BIT_TYPE_UNKNOWN_11",
		12: "CONFIGURATION_BIT_TYPE_UNKNOWN_12",
		13: "CONFIGURATION_BIT_TYPE_UNKNOWN_13",
		14: "CONFIGURATION_BIT_TYPE_UNKNOWN_14",
		15: "CONFIGURATION_BIT_TYPE_UNKNOWN_15",
		16: "CONFIGURATION_BIT_TYPE_UNKNOWN_16",
		17: "CONFIGURATION_BIT_TYPE_UNKNOWN_17",
		18: "CONFIGURATION_BIT_TYPE_UNKNOWN_18",
		19: "CONFIGURATION_BIT_TYPE_UNKNOWN_19",
		20: "CONFIGURATION_BIT_TYPE_UNKNOWN_20",
		21: "CONFIGURATION_BIT_TYPE_UNKNOWN_21",
		22: "CONFIGURATION_BIT_TYPE_UNKNOWN_22",
		23: "CONFIGURATION_BIT_TYPE_UNKNOWN_23",
		24: "CONFIGURATION_BIT_TYPE_UNKNOWN_24",
		25: "CONFIGURATION_BIT_TYPE_UNKNOWN_25",
		26: "CONFIGURATION_BIT_TYPE_UNKNOWN_26",
		27: "CONFIGURATION_BIT_TYPE_UNKNOWN_27",
		28: "CONFIGURATION_BIT_TYPE_UNKNOWN_28",
		29: "CONFIGURATION_BIT_TYPE_UNKNOWN_29",
		30: "CONFIGURATION_BIT_TYPE_UNKNOWN_30",
		31: "CONFIGURATION_BIT_TYPE_UNKNOWN_31",
		32: "CONFIGURATION_BIT_TYPE_UNKNOWN_32",
		33: "CONFIGURATION_BIT_TYPE_UNKNOWN_33",
		34: "CONFIGURATION_BIT_TYPE_DESKTOP_AUTO_EMOJI_CONVERSION_ENABLED",
		35: "CONFIGURATION_BIT_TYPE_UNKNOWN_35",
		36: "CONFIGURATION_BIT_TYPE_UNKNOWN_36",
		38: "CONFIGURATION_BIT_TYPE_DESKTOP_COMPACT_MODE_ENABLED",
	}
	ConfigurationBitType_value = map[string]int32{
		"CONFIGURATION_BIT_TYPE_UNKNOWN":                               0,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_1":                             1,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_2":                             2,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_3":                             3,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_4":                             4,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_5":                             5,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_6":                             6,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_7":                             7,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_8":                             8,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_9":                             9,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_10":                            10,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_11":                            11,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_12":                            12,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_13":                            13,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_14":                            14,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_15":                            15,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_16":                            16,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_17":                            17,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_18":                            18,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_19":                            19,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_20":                            20,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_21":                            21,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_22":                            22,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_23":                            23,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_24":                            24,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_25":                            25,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_26":                            26,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_27":                            27,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_28":                            28,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_29":                            29,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_30":                            30,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_31":                            31,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_32":                            32,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_33":                            33,
		"CONFIGURATION_BIT_TYPE_DESKTOP_AUTO_EMOJI_CONVERSION_ENABLED": 34,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_35":                            35,
		"CONFIGURATION_BIT_TYPE_UNKNOWN_36":                            36,
		"CONFIGURATION_BIT_TYPE_DESKTOP_COMPACT_MODE_ENABLED":          38,
	}
)

func (x ConfigurationBitType) Enum() *ConfigurationBitType {
	p := new(ConfigurationBitType)
	*p = x
	return p
}

func (x ConfigurationBitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationBitType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[31].Descriptor()
}

func (ConfigurationBitType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[31]
}

func (x ConfigurationBitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConfigurationBitType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConfigurationBitType(num)
	return nil
}

// Deprecated: Use ConfigurationBitType.Descriptor instead.
func (ConfigurationBitType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{31}
}

type RichPresenceType int32

const (
	RichPresenceType_RICH_PRESENCE_TYPE_UNKNOWN       RichPresenceType = 0
	RichPresenceType_RICH_PRESENCE_TYPE_IN_CALL_STATE RichPresenceType = 1
	RichPresenceType_RICH_PRESENCE_TYPE_UNKNOWN_3     RichPresenceType = 3
	RichPresenceType_RICH_PRESENCE_TYPE_UNKNOWN_4     RichPresenceType = 4
	RichPresenceType_RICH_PRESENCE_TYPE_UNKNOWN_5     RichPresenceType = 5
	RichPresenceType_RICH_PRESENCE_TYPE_DEVICE        RichPresenceType = 2
	RichPresenceType_RICH_PRESENCE_TYPE_LAST_SEEN     RichPresenceType = 6
)

// Enum value maps for RichPresenceType.
var (
	RichPresenceType_name = map[int32]string{
		0: "RICH_PRESENCE_TYPE_UNKNOWN",
		1: "RICH_PRESENCE_TYPE_IN_CALL_STATE",
		3: "RICH_PRESENCE_TYPE_UNKNOWN_3",
		4: "RICH_PRESENCE_TYPE_UNKNOWN_4",
		5: "RICH_PRESENCE_TYPE_UNKNOWN_5",
		2: "RICH_PRESENCE_TYPE_DEVICE",
		6: "RICH_PRESENCE_TYPE_LAST_SEEN",
	}
	RichPresenceType_value = map[string]int32{
		"RICH_PRESENCE_TYPE_UNKNOWN":       0,
		"RICH_PRESENCE_TYPE_IN_CALL_STATE": 1,
		"RICH_PRESENCE_TYPE_UNKNOWN_3":     3,
		"RICH_PRESENCE_TYPE_UNKNOWN_4":     4,
		"RICH_PRESENCE_TYPE_UNKNOWN_5":     5,
		"RICH_PRESENCE_TYPE_DEVICE":        2,
		"RICH_PRESENCE_TYPE_LAST_SEEN":     6,
	}
)

func (x RichPresenceType) Enum() *RichPresenceType {
	p := new(RichPresenceType)
	*p = x
	return p
}

func (x RichPresenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RichPresenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[32].Descriptor()
}

func (RichPresenceType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[32]
}

func (x RichPresenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RichPresenceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RichPresenceType(num)
	return nil
}

// Deprecated: Use RichPresenceType.Descriptor instead.
func (RichPresenceType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{32}
}

type FieldMask int32

const (
	FieldMask_FIELD_MASK_REACHABLE FieldMask = 1
	FieldMask_FIELD_MASK_AVAILABLE FieldMask = 2
	FieldMask_FIELD_MASK_MOOD      FieldMask = 3
	FieldMask_FIELD_MASK_IN_CALL   FieldMask = 6
	FieldMask_FIELD_MASK_DEVICE    FieldMask = 7
	FieldMask_FIELD_MASK_LAST_SEEN FieldMask = 10
)

// Enum value maps for FieldMask.
var (
	FieldMask_name = map[int32]string{
		1:  "FIELD_MASK_REACHABLE",
		2:  "FIELD_MASK_AVAILABLE",
		3:  "FIELD_MASK_MOOD",
		6:  "FIELD_MASK_IN_CALL",
		7:  "FIELD_MASK_DEVICE",
		10: "FIELD_MASK_LAST_SEEN",
	}
	FieldMask_value = map[string]int32{
		"FIELD_MASK_REACHABLE": 1,
		"FIELD_MASK_AVAILABLE": 2,
		"FIELD_MASK_MOOD":      3,
		"FIELD_MASK_IN_CALL":   6,
		"FIELD_MASK_DEVICE":    7,
		"FIELD_MASK_LAST_SEEN": 10,
	}
)

func (x FieldMask) Enum() *FieldMask {
	p := new(FieldMask)
	*p = x
	return p
}

func (x FieldMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldMask) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[33].Descriptor()
}

func (FieldMask) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[33]
}

func (x FieldMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FieldMask) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FieldMask(num)
	return nil
}

// Deprecated: Use FieldMask.Descriptor instead.
func (FieldMask) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{33}
}

type DeleteType int32

const (
	DeleteType_DELETE_TYPE_UNKNOWN     DeleteType = 0
	DeleteType_DELETE_TYPE_UPPER_BOUND DeleteType = 1
)

// Enum value maps for DeleteType.
var (
	DeleteType_name = map[int32]string{
		0: "DELETE_TYPE_UNKNOWN",
		1: "DELETE_TYPE_UPPER_BOUND",
	}
	DeleteType_value = map[string]int32{
		"DELETE_TYPE_UNKNOWN":     0,
		"DELETE_TYPE_UPPER_BOUND": 1,
	}
)

func (x DeleteType) Enum() *DeleteType {
	p := new(DeleteType)
	*p = x
	return p
}

func (x DeleteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[34].Descriptor()
}

func (DeleteType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[34]
}

func (x DeleteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeleteType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeleteType(num)
	return nil
}

// Deprecated: Use DeleteType.Descriptor instead.
func (DeleteType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{34}
}

type SyncFilter int32

const (
	SyncFilter_SYNC_FILTER_UNKNOWN  SyncFilter = 0
	SyncFilter_SYNC_FILTER_INBOX    SyncFilter = 1
	SyncFilter_SYNC_FILTER_ARCHIVED SyncFilter = 2
)

// Enum value maps for SyncFilter.
var (
	SyncFilter_name = map[int32]string{
		0: "SYNC_FILTER_UNKNOWN",
		1: "SYNC_FILTER_INBOX",
		2: "SYNC_FILTER_ARCHIVED",
	}
	SyncFilter_value = map[string]int32{
		"SYNC_FILTER_UNKNOWN":  0,
		"SYNC_FILTER_INBOX":    1,
		"SYNC_FILTER_ARCHIVED": 2,
	}
)

func (x SyncFilter) Enum() *SyncFilter {
	p := new(SyncFilter)
	*p = x
	return p
}

func (x SyncFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[35].Descriptor()
}

func (SyncFilter) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[35]
}

func (x SyncFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SyncFilter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SyncFilter(num)
	return nil
}

// Deprecated: Use SyncFilter.Descriptor instead.
func (SyncFilter) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{35}
}

type SoundState int32

const (
	SoundState_SOUND_STATE_UNKNOWN SoundState = 0
	SoundState_SOUND_STATE_ON      SoundState = 1
	SoundState_SOUND_STATE_OFF     SoundState = 2
)

// Enum value maps for SoundState.
var (
	SoundState_name = map[int32]string{
		0: "SOUND_STATE_UNKNOWN",
		1: "SOUND_STATE_ON",
		2: "SOUND_STATE_OFF",
	}
	SoundState_value = map[string]int32{
		"SOUND_STATE_UNKNOWN": 0,
		"SOUND_STATE_ON":      1,
		"SOUND_STATE_OFF":     2,
	}
)

func (x SoundState) Enum() *SoundState {
	p := new(SoundState)
	*p = x
	return p
}

func (x SoundState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoundState) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[36].Descriptor()
}

func (SoundState) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[36]
}

func (x SoundState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SoundState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SoundState(num)
	return nil
}

// Deprecated: Use SoundState.Descriptor instead.
func (SoundState) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{36}
}

type CallerIdSettingsMask int32

const (
	CallerIdSettingsMask_CALLER_ID_SETTINGS_MASK_UNKNOWN  CallerIdSettingsMask = 0
	CallerIdSettingsMask_CALLER_ID_SETTINGS_MASK_PROVIDED CallerIdSettingsMask = 1
)

// Enum value maps for CallerIdSettingsMask.
var (
	CallerIdSettingsMask_name = map[int32]string{
		0: "CALLER_ID_SETTINGS_MASK_UNKNOWN",
		1: "CALLER_ID_SETTINGS_MASK_PROVIDED",
	}
	CallerIdSettingsMask_value = map[string]int32{
		"CALLER_ID_SETTINGS_MASK_UNKNOWN":  0,
		"CALLER_ID_SETTINGS_MASK_PROVIDED": 1,
	}
)

func (x CallerIdSettingsMask) Enum() *CallerIdSettingsMask {
	p := new(CallerIdSettingsMask)
	*p = x
	return p
}

func (x CallerIdSettingsMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallerIdSettingsMask) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[37].Descriptor()
}

func (CallerIdSettingsMask) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[37]
}

func (x CallerIdSettingsMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CallerIdSettingsMask) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CallerIdSettingsMask(num)
	return nil
}

// Deprecated: Use CallerIdSettingsMask.Descriptor instead.
func (CallerIdSettingsMask) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{37}
}

type PhoneVerificationStatus int32

const (
	PhoneVerificationStatus_PHONE_VERIFICATION_STATUS_UNKNOWN  PhoneVerificationStatus = 0
	PhoneVerificationStatus_PHONE_VERIFICATION_STATUS_VERIFIED PhoneVerificationStatus = 1
)

// Enum value maps for PhoneVerificationStatus.
var (
	PhoneVerificationStatus_name = map[int32]string{
		0: "PHONE_VERIFICATION_STATUS_UNKNOWN",
		1: "PHONE_VERIFICATION_STATUS_VERIFIED",
	}
	PhoneVerificationStatus_value = map[string]int32{
		"PHONE_VERIFICATION_STATUS_UNKNOWN":  0,
		"PHONE_VERIFICATION_STATUS_VERIFIED": 1,
	}
)

func (x PhoneVerificationStatus) Enum() *PhoneVerificationStatus {
	p := new(PhoneVerificationStatus)
	*p = x
	return p
}

func (x PhoneVerificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneVerificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[38].Descriptor()
}

func (PhoneVerificationStatus) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[38]
}

func (x PhoneVerificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PhoneVerificationStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PhoneVerificationStatus(num)
	return nil
}

// Deprecated: Use PhoneVerificationStatus.Descriptor instead.
func (PhoneVerificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{38}
}

type PhoneDiscoverabilityStatus int32

const (
	PhoneDiscoverabilityStatus_PHONE_DISCOVERABILITY_STATUS_UNKNOWN                       PhoneDiscoverabilityStatus = 0
	PhoneDiscoverabilityStatus_PHONE_DISCOVERABILITY_STATUS_OPTED_IN_BUT_NOT_DISCOVERABLE PhoneDiscoverabilityStatus = 2
)

// Enum value maps for PhoneDiscoverabilityStatus.
var (
	PhoneDiscoverabilityStatus_name = map[int32]string{
		0: "PHONE_DISCOVERABILITY_STATUS_UNKNOWN",
		2: "PHONE_DISCOVERABILITY_STATUS_OPTED_IN_BUT_NOT_DISCOVERABLE",
	}
	PhoneDiscoverabilityStatus_value = map[string]int32{
		"PHONE_DISCOVERABILITY_STATUS_UNKNOWN":                       0,
		"PHONE_DISCOVERABILITY_STATUS_OPTED_IN_BUT_NOT_DISCOVERABLE": 2,
	}
)

func (x PhoneDiscoverabilityStatus) Enum() *PhoneDiscoverabilityStatus {
	p := new(PhoneDiscoverabilityStatus)
	*p = x
	return p
}

func (x PhoneDiscoverabilityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneDiscoverabilityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[39].Descriptor()
}

func (PhoneDiscoverabilityStatus) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[39]
}

func (x PhoneDiscoverabilityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PhoneDiscoverabilityStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PhoneDiscoverabilityStatus(num)
	return nil
}

// Deprecated: Use PhoneDiscoverabilityStatus.Descriptor instead.
func (PhoneDiscoverabilityStatus) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{39}
}

type PhoneValidationResult int32

const (
	PhoneValidationResult_PHONE_VALIDATION_RESULT_IS_POSSIBLE PhoneValidationResult = 0
)

// Enum value maps for PhoneValidationResult.
var (
	PhoneValidationResult_name = map[int32]string{
		0: "PHONE_VALIDATION_RESULT_IS_POSSIBLE",
	}
	PhoneValidationResult_value = map[string]int32{
		"PHONE_VALIDATION_RESULT_IS_POSSIBLE": 0,
	}
)

func (x PhoneValidationResult) Enum() *PhoneValidationResult {
	p := new(PhoneValidationResult)
	*p = x
	return p
}

func (x PhoneValidationResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneValidationResult) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[40].Descriptor()
}

func (PhoneValidationResult) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[40]
}

func (x PhoneValidationResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PhoneValidationResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PhoneValidationResult(num)
	return nil
}

// Deprecated: Use PhoneValidationResult.Descriptor instead.
func (PhoneValidationResult) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{40}
}

type OffnetworkAddressType int32

const (
	OffnetworkAddressType_OFFNETWORK_ADDRESS_TYPE_UNKNOWN OffnetworkAddressType = 0
	OffnetworkAddressType_OFFNETWORK_ADDRESS_TYPE_EMAIL   OffnetworkAddressType = 1
)

// Enum value maps for OffnetworkAddressType.
var (
	OffnetworkAddressType_name = map[int32]string{
		0: "OFFNETWORK_ADDRESS_TYPE_UNKNOWN",
		1: "OFFNETWORK_ADDRESS_TYPE_EMAIL",
	}
	OffnetworkAddressType_value = map[string]int32{
		"OFFNETWORK_ADDRESS_TYPE_UNKNOWN": 0,
		"OFFNETWORK_ADDRESS_TYPE_EMAIL":   1,
	}
)

func (x OffnetworkAddressType) Enum() *OffnetworkAddressType {
	p := new(OffnetworkAddressType)
	*p = x
	return p
}

func (x OffnetworkAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OffnetworkAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[41].Descriptor()
}

func (OffnetworkAddressType) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[41]
}

func (x OffnetworkAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OffnetworkAddressType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OffnetworkAddressType(num)
	return nil
}

// Deprecated: Use OffnetworkAddressType.Descriptor instead.
func (OffnetworkAddressType) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{41}
}

type GroupLinkSharingStatus int32

const (
	GroupLinkSharingStatus_GROUP_LINK_SHARING_STATUS_UNKNOWN GroupLinkSharingStatus = 0
	GroupLinkSharingStatus_GROUP_LINK_SHARING_STATUS_ON      GroupLinkSharingStatus = 1
	GroupLinkSharingStatus_GROUP_LINK_SHARING_STATUS_OFF     GroupLinkSharingStatus = 2
)

// Enum value maps for GroupLinkSharingStatus.
var (
	GroupLinkSharingStatus_name = map[int32]string{
		0: "GROUP_LINK_SHARING_STATUS_UNKNOWN",
		1: "GROUP_LINK_SHARING_STATUS_ON",
		2: "GROUP_LINK_SHARING_STATUS_OFF",
	}
	GroupLinkSharingStatus_value = map[string]int32{
		"GROUP_LINK_SHARING_STATUS_UNKNOWN": 0,
		"GROUP_LINK_SHARING_STATUS_ON":      1,
		"GROUP_LINK_SHARING_STATUS_OFF":     2,
	}
)

func (x GroupLinkSharingStatus) Enum() *GroupLinkSharingStatus {
	p := new(GroupLinkSharingStatus)
	*p = x
	return p
}

func (x GroupLinkSharingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupLinkSharingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[42].Descriptor()
}

func (GroupLinkSharingStatus) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[42]
}

func (x GroupLinkSharingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GroupLinkSharingStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GroupLinkSharingStatus(num)
	return nil
}

// Deprecated: Use GroupLinkSharingStatus.Descriptor instead.
func (GroupLinkSharingStatus) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{42}
}

type Entity_PastHangoutState int32

const (
	Entity_PAST_HANGOUT_STATE_UNKNOWN          Entity_PastHangoutState = 0
	Entity_PAST_HANGOUT_STATE_HAD_PAST_HANGOUT Entity_PastHangoutState = 1
	Entity_PAST_HANGOUT_STATE_NO_PAST_HANGOUT  Entity_PastHangoutState = 2
)

// Enum value maps for Entity_PastHangoutState.
var (
	Entity_PastHangoutState_name = map[int32]string{
		0: "PAST_HANGOUT_STATE_UNKNOWN",
		1: "PAST_HANGOUT_STATE_HAD_PAST_HANGOUT",
		2: "PAST_HANGOUT_STATE_NO_PAST_HANGOUT",
	}
	Entity_PastHangoutState_value = map[string]int32{
		"PAST_HANGOUT_STATE_UNKNOWN":          0,
		"PAST_HANGOUT_STATE_HAD_PAST_HANGOUT": 1,
		"PAST_HANGOUT_STATE_NO_PAST_HANGOUT":  2,
	}
)

func (x Entity_PastHangoutState) Enum() *Entity_PastHangoutState {
	p := new(Entity_PastHangoutState)
	*p = x
	return p
}

func (x Entity_PastHangoutState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Entity_PastHangoutState) Descriptor() protoreflect.EnumDescriptor {
	return file_hangouts_proto_enumTypes[43].Descriptor()
}

func (Entity_PastHangoutState) Type() protoreflect.EnumType {
	return &file_hangouts_proto_enumTypes[43]
}

func (x Entity_PastHangoutState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Entity_PastHangoutState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Entity_PastHangoutState(num)
	return nil
}

// Deprecated: Use Entity_PastHangoutState.Descriptor instead.
func (Entity_PastHangoutState) EnumDescriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{38, 0}
}

// The state of do-not-disturb mode. Not to be confused with DndSetting, which
// is used to change the state of do-not-disturb mode.
type DoNotDisturbSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether do-not-disturb mode is enabled.
	DoNotDisturb *bool `protobuf:"varint,1,opt,name=do_not_disturb,json=doNotDisturb" json:"do_not_disturb,omitempty"`
	// Timestamp when do-not-disturb mode expires.
	ExpirationTimestamp *uint64 `protobuf:"varint,2,opt,name=expiration_timestamp,json=expirationTimestamp" json:"expiration_timestamp,omitempty"`
	// Timestamp when this setting was applied. Not present when this message
	// comes from a notification.
	Version *uint64 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (x *DoNotDisturbSetting) Reset() {
	*x = DoNotDisturbSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoNotDisturbSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoNotDisturbSetting) ProtoMessage() {}

func (x *DoNotDisturbSetting) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoNotDisturbSetting.ProtoReflect.Descriptor instead.
func (*DoNotDisturbSetting) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{0}
}

func (x *DoNotDisturbSetting) GetDoNotDisturb() bool {
	if x != nil && x.DoNotDisturb != nil {
		return *x.DoNotDisturb
	}
	return false
}

func (x *DoNotDisturbSetting) GetExpirationTimestamp() uint64 {
	if x != nil && x.ExpirationTimestamp != nil {
		return *x.ExpirationTimestamp
	}
	return 0
}

func (x *DoNotDisturbSetting) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type NotificationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DndSettings *DoNotDisturbSetting `protobuf:"bytes,1,opt,name=dnd_settings,json=dndSettings" json:"dnd_settings,omitempty"`
}

func (x *NotificationSettings) Reset() {
	*x = NotificationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationSettings) ProtoMessage() {}

func (x *NotificationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationSettings.ProtoReflect.Descriptor instead.
func (*NotificationSettings) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{1}
}

func (x *NotificationSettings) GetDndSettings() *DoNotDisturbSetting {
	if x != nil {
		return x.DndSettings
	}
	return nil
}

// Identifies a conversation.
type ConversationId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for a conversation.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *ConversationId) Reset() {
	*x = ConversationId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationId) ProtoMessage() {}

func (x *ConversationId) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationId.ProtoReflect.Descriptor instead.
func (*ConversationId) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{2}
}

func (x *ConversationId) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// Identifies a user.
type ParticipantId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for a user's Google account.
	GaiaId *string `protobuf:"bytes,1,opt,name=gaia_id,json=gaiaId" json:"gaia_id,omitempty"`
	// Seems to always be the same as gaia_id.
	ChatId *string `protobuf:"bytes,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
}

func (x *ParticipantId) Reset() {
	*x = ParticipantId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantId) ProtoMessage() {}

func (x *ParticipantId) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantId.ProtoReflect.Descriptor instead.
func (*ParticipantId) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{3}
}

func (x *ParticipantId) GetGaiaId() string {
	if x != nil && x.GaiaId != nil {
		return *x.GaiaId
	}
	return ""
}

func (x *ParticipantId) GetChatId() string {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return ""
}

// Indicates whether Hangouts is active (running in the foreground) on
// different types of devices.
type DeviceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if a mobile phone is active.
	Mobile *bool `protobuf:"varint,1,opt,name=mobile" json:"mobile,omitempty"`
	// True if a desktop or laptop is active.
	Desktop *bool `protobuf:"varint,2,opt,name=desktop" json:"desktop,omitempty"`
	// True if a tablet is active.
	Tablet *bool `protobuf:"varint,3,opt,name=tablet" json:"tablet,omitempty"`
}

func (x *DeviceStatus) Reset() {
	*x = DeviceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatus) ProtoMessage() {}

func (x *DeviceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatus.ProtoReflect.Descriptor instead.
func (*DeviceStatus) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceStatus) GetMobile() bool {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return false
}

func (x *DeviceStatus) GetDesktop() bool {
	if x != nil && x.Desktop != nil {
		return *x.Desktop
	}
	return false
}

func (x *DeviceStatus) GetTablet() bool {
	if x != nil && x.Tablet != nil {
		return *x.Tablet
	}
	return false
}

type LastSeen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastSeenTimestampUsec *uint64 `protobuf:"varint,1,opt,name=last_seen_timestamp_usec,json=lastSeenTimestampUsec" json:"last_seen_timestamp_usec,omitempty"`
	UsecSinceLastSeen     *uint64 `protobuf:"varint,2,opt,name=usec_since_last_seen,json=usecSinceLastSeen" json:"usec_since_last_seen,omitempty"`
}

func (x *LastSeen) Reset() {
	*x = LastSeen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastSeen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastSeen) ProtoMessage() {}

func (x *LastSeen) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastSeen.ProtoReflect.Descriptor instead.
func (*LastSeen) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{5}
}

func (x *LastSeen) GetLastSeenTimestampUsec() uint64 {
	if x != nil && x.LastSeenTimestampUsec != nil {
		return *x.LastSeenTimestampUsec
	}
	return 0
}

func (x *LastSeen) GetUsecSinceLastSeen() uint64 {
	if x != nil && x.UsecSinceLastSeen != nil {
		return *x.UsecSinceLastSeen
	}
	return 0
}

type Presence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reachable    *bool         `protobuf:"varint,1,opt,name=reachable" json:"reachable,omitempty"`
	Available    *bool         `protobuf:"varint,2,opt,name=available" json:"available,omitempty"`
	DeviceStatus *DeviceStatus `protobuf:"bytes,6,opt,name=device_status,json=deviceStatus" json:"device_status,omitempty"`
	MoodMessage  *MoodMessage  `protobuf:"bytes,9,opt,name=mood_message,json=moodMessage" json:"mood_message,omitempty"`
	LastSeen     *LastSeen     `protobuf:"bytes,10,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
}

func (x *Presence) Reset() {
	*x = Presence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presence) ProtoMessage() {}

func (x *Presence) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presence.ProtoReflect.Descriptor instead.
func (*Presence) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{6}
}

func (x *Presence) GetReachable() bool {
	if x != nil && x.Reachable != nil {
		return *x.Reachable
	}
	return false
}

func (x *Presence) GetAvailable() bool {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return false
}

func (x *Presence) GetDeviceStatus() *DeviceStatus {
	if x != nil {
		return x.DeviceStatus
	}
	return nil
}

func (x *Presence) GetMoodMessage() *MoodMessage {
	if x != nil {
		return x.MoodMessage
	}
	return nil
}

func (x *Presence) GetLastSeen() *LastSeen {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

type PresenceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   *ParticipantId `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Presence *Presence      `protobuf:"bytes,2,opt,name=presence" json:"presence,omitempty"`
}

func (x *PresenceResult) Reset() {
	*x = PresenceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceResult) ProtoMessage() {}

func (x *PresenceResult) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceResult.ProtoReflect.Descriptor instead.
func (*PresenceResult) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{7}
}

func (x *PresenceResult) GetUserId() *ParticipantId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *PresenceResult) GetPresence() *Presence {
	if x != nil {
		return x.Presence
	}
	return nil
}

type ClientIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (client_id in hangups).
	Resource *string `protobuf:"bytes,1,opt,name=resource" json:"resource,omitempty"`
	// unknown (header_id in hangups).
	HeaderId *string `protobuf:"bytes,2,opt,name=header_id,json=headerId" json:"header_id,omitempty"`
}

func (x *ClientIdentifier) Reset() {
	*x = ClientIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientIdentifier) ProtoMessage() {}

func (x *ClientIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientIdentifier.ProtoReflect.Descriptor instead.
func (*ClientIdentifier) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{8}
}

func (x *ClientIdentifier) GetResource() string {
	if x != nil && x.Resource != nil {
		return *x.Resource
	}
	return ""
}

func (x *ClientIdentifier) GetHeaderId() string {
	if x != nil && x.HeaderId != nil {
		return *x.HeaderId
	}
	return ""
}

type ClientPresenceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *ClientIdentifier        `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	State      *ClientPresenceStateType `protobuf:"varint,2,opt,name=state,enum=hangouts.ClientPresenceStateType" json:"state,omitempty"`
}

func (x *ClientPresenceState) Reset() {
	*x = ClientPresenceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientPresenceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPresenceState) ProtoMessage() {}

func (x *ClientPresenceState) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPresenceState.ProtoReflect.Descriptor instead.
func (*ClientPresenceState) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{9}
}

func (x *ClientPresenceState) GetIdentifier() *ClientIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ClientPresenceState) GetState() ClientPresenceStateType {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ClientPresenceStateType_CLIENT_PRESENCE_STATE_UNKNOWN
}

type UserEventState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            *ParticipantId     `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ClientGeneratedId *string            `protobuf:"bytes,2,opt,name=client_generated_id,json=clientGeneratedId" json:"client_generated_id,omitempty"`
	NotificationLevel *NotificationLevel `protobuf:"varint,3,opt,name=notification_level,json=notificationLevel,enum=hangouts.NotificationLevel" json:"notification_level,omitempty"`
}

func (x *UserEventState) Reset() {
	*x = UserEventState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventState) ProtoMessage() {}

func (x *UserEventState) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventState.ProtoReflect.Descriptor instead.
func (*UserEventState) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{10}
}

func (x *UserEventState) GetUserId() *ParticipantId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UserEventState) GetClientGeneratedId() string {
	if x != nil && x.ClientGeneratedId != nil {
		return *x.ClientGeneratedId
	}
	return ""
}

func (x *UserEventState) GetNotificationLevel() NotificationLevel {
	if x != nil && x.NotificationLevel != nil {
		return *x.NotificationLevel
	}
	return NotificationLevel_NOTIFICATION_LEVEL_UNKNOWN
}

type Formatting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bold          *bool `protobuf:"varint,1,opt,name=bold" json:"bold,omitempty"`
	Italic        *bool `protobuf:"varint,2,opt,name=italic" json:"italic,omitempty"`
	Strikethrough *bool `protobuf:"varint,3,opt,name=strikethrough" json:"strikethrough,omitempty"`
	Underline     *bool `protobuf:"varint,4,opt,name=underline" json:"underline,omitempty"`
}

func (x *Formatting) Reset() {
	*x = Formatting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Formatting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Formatting) ProtoMessage() {}

func (x *Formatting) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Formatting.ProtoReflect.Descriptor instead.
func (*Formatting) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{11}
}

func (x *Formatting) GetBold() bool {
	if x != nil && x.Bold != nil {
		return *x.Bold
	}
	return false
}

func (x *Formatting) GetItalic() bool {
	if x != nil && x.Italic != nil {
		return *x.Italic
	}
	return false
}

func (x *Formatting) GetStrikethrough() bool {
	if x != nil && x.Strikethrough != nil {
		return *x.Strikethrough
	}
	return false
}

func (x *Formatting) GetUnderline() bool {
	if x != nil && x.Underline != nil {
		return *x.Underline
	}
	return false
}

type LinkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkTarget *string `protobuf:"bytes,1,opt,name=link_target,json=linkTarget" json:"link_target,omitempty"`
}

func (x *LinkData) Reset() {
	*x = LinkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkData) ProtoMessage() {}

func (x *LinkData) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkData.ProtoReflect.Descriptor instead.
func (*LinkData) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{12}
}

func (x *LinkData) GetLinkTarget() string {
	if x != nil && x.LinkTarget != nil {
		return *x.LinkTarget
	}
	return ""
}

// A segment of a message. Message are broken into segments that may be of
// different types and have different formatting.
type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: This field is required because Hangouts for Chrome misbehaves if it
	// isn't serialized.
	Type *SegmentType `protobuf:"varint,1,req,name=type,enum=hangouts.SegmentType" json:"type,omitempty"`
	// The segment text. For line breaks, may either be empty or contain new line
	// character.
	Text *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	// Formatting for this segment.
	Formatting *Formatting `protobuf:"bytes,3,opt,name=formatting" json:"formatting,omitempty"`
	// Link data for this segment, if it is a link.
	LinkData *LinkData `protobuf:"bytes,4,opt,name=link_data,json=linkData" json:"link_data,omitempty"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{13}
}

func (x *Segment) GetType() SegmentType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SegmentType_SEGMENT_TYPE_TEXT
}

func (x *Segment) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Segment) GetFormatting() *Formatting {
	if x != nil {
		return x.Formatting
	}
	return nil
}

func (x *Segment) GetLinkData() *LinkData {
	if x != nil {
		return x.LinkData
	}
	return nil
}

// An attachment for a chat message.
type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmbedItem *EMEmbedClientItem `protobuf:"bytes,1,opt,name=embed_item,json=embedItem" json:"embed_item,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{14}
}

func (x *Attachment) GetEmbedItem() *EMEmbedClientItem {
	if x != nil {
		return x.EmbedItem
	}
	return nil
}

// Chat message content.
type MessageContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment    []*Segment    `protobuf:"bytes,1,rep,name=segment" json:"segment,omitempty"`
	Attachment []*Attachment `protobuf:"bytes,2,rep,name=attachment" json:"attachment,omitempty"`
}

func (x *MessageContent) Reset() {
	*x = MessageContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageContent) ProtoMessage() {}

func (x *MessageContent) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageContent.ProtoReflect.Descriptor instead.
func (*MessageContent) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{15}
}

func (x *MessageContent) GetSegment() []*Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *MessageContent) GetAttachment() []*Attachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

// Annotation that can be applied to a chat message event. The only known use
// for this is "\me" actions supported by the Chrome client (type 4).
type EventAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Annotation type.
	Type *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	// Optional annotation string value.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *EventAnnotation) Reset() {
	*x = EventAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAnnotation) ProtoMessage() {}

func (x *EventAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAnnotation.ProtoReflect.Descriptor instead.
func (*EventAnnotation) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{16}
}

func (x *EventAnnotation) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *EventAnnotation) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// A chat message in a conversation.
type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional annotation to attach to message.
	Annotation []*EventAnnotation `protobuf:"bytes,2,rep,name=annotation" json:"annotation,omitempty"`
	// The message's content.
	MessageContent *MessageContent `protobuf:"bytes,3,opt,name=message_content,json=messageContent" json:"message_content,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{17}
}

func (x *ChatMessage) GetAnnotation() []*EventAnnotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *ChatMessage) GetMessageContent() *MessageContent {
	if x != nil {
		return x.MessageContent
	}
	return nil
}

type MembershipChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *MembershipChangeType `protobuf:"varint,1,opt,name=type,enum=hangouts.MembershipChangeType" json:"type,omitempty"`
	ParticipantIds []*ParticipantId      `protobuf:"bytes,3,rep,name=participant_ids,json=participantIds" json:"participant_ids,omitempty"`
}

func (x *MembershipChange) Reset() {
	*x = MembershipChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipChange) ProtoMessage() {}

func (x *MembershipChange) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipChange.ProtoReflect.Descriptor instead.
func (*MembershipChange) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{18}
}

func (x *MembershipChange) GetType() MembershipChangeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MembershipChangeType_MEMBERSHIP_CHANGE_TYPE_JOIN
}

func (x *MembershipChange) GetParticipantIds() []*ParticipantId {
	if x != nil {
		return x.ParticipantIds
	}
	return nil
}

type ConversationRename struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewName *string `protobuf:"bytes,1,opt,name=new_name,json=newName" json:"new_name,omitempty"`
	OldName *string `protobuf:"bytes,2,opt,name=old_name,json=oldName" json:"old_name,omitempty"`
}

func (x *ConversationRename) Reset() {
	*x = ConversationRename{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationRename) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationRename) ProtoMessage() {}

func (x *ConversationRename) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationRename.ProtoReflect.Descriptor instead.
func (*ConversationRename) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{19}
}

func (x *ConversationRename) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

func (x *ConversationRename) GetOldName() string {
	if x != nil && x.OldName != nil {
		return *x.OldName
	}
	return ""
}

type HangoutEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType     *HangoutEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,enum=hangouts.HangoutEventType" json:"event_type,omitempty"`
	ParticipantId []*ParticipantId  `protobuf:"bytes,2,rep,name=participant_id,json=participantId" json:"participant_id,omitempty"`
}

func (x *HangoutEvent) Reset() {
	*x = HangoutEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HangoutEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HangoutEvent) ProtoMessage() {}

func (x *HangoutEvent) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HangoutEvent.ProtoReflect.Descriptor instead.
func (*HangoutEvent) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{20}
}

func (x *HangoutEvent) GetEventType() HangoutEventType {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return HangoutEventType_HANGOUT_EVENT_TYPE_UNKNOWN
}

func (x *HangoutEvent) GetParticipantId() []*ParticipantId {
	if x != nil {
		return x.ParticipantId
	}
	return nil
}

type OTRModification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldOtrStatus *OffTheRecordStatus `protobuf:"varint,1,opt,name=old_otr_status,json=oldOtrStatus,enum=hangouts.OffTheRecordStatus" json:"old_otr_status,omitempty"`
	NewOtrStatus *OffTheRecordStatus `protobuf:"varint,2,opt,name=new_otr_status,json=newOtrStatus,enum=hangouts.OffTheRecordStatus" json:"new_otr_status,omitempty"`
	OldOtrToggle *OffTheRecordToggle `protobuf:"varint,3,opt,name=old_otr_toggle,json=oldOtrToggle,enum=hangouts.OffTheRecordToggle" json:"old_otr_toggle,omitempty"`
	NewOtrToggle *OffTheRecordToggle `protobuf:"varint,4,opt,name=new_otr_toggle,json=newOtrToggle,enum=hangouts.OffTheRecordToggle" json:"new_otr_toggle,omitempty"`
}

func (x *OTRModification) Reset() {
	*x = OTRModification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTRModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTRModification) ProtoMessage() {}

func (x *OTRModification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTRModification.ProtoReflect.Descriptor instead.
func (*OTRModification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{21}
}

func (x *OTRModification) GetOldOtrStatus() OffTheRecordStatus {
	if x != nil && x.OldOtrStatus != nil {
		return *x.OldOtrStatus
	}
	return OffTheRecordStatus_OFF_THE_RECORD_STATUS_UNKNOWN
}

func (x *OTRModification) GetNewOtrStatus() OffTheRecordStatus {
	if x != nil && x.NewOtrStatus != nil {
		return *x.NewOtrStatus
	}
	return OffTheRecordStatus_OFF_THE_RECORD_STATUS_UNKNOWN
}

func (x *OTRModification) GetOldOtrToggle() OffTheRecordToggle {
	if x != nil && x.OldOtrToggle != nil {
		return *x.OldOtrToggle
	}
	return OffTheRecordToggle_OFF_THE_RECORD_TOGGLE_UNKNOWN
}

func (x *OTRModification) GetNewOtrToggle() OffTheRecordToggle {
	if x != nil && x.NewOtrToggle != nil {
		return *x.NewOtrToggle
	}
	return OffTheRecordToggle_OFF_THE_RECORD_TOGGLE_UNKNOWN
}

type HashModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateId *string `protobuf:"bytes,1,opt,name=update_id,json=updateId" json:"update_id,omitempty"`
	HashDiff *uint64 `protobuf:"varint,2,opt,name=hash_diff,json=hashDiff" json:"hash_diff,omitempty"`
	Version  *uint64 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
}

func (x *HashModifier) Reset() {
	*x = HashModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashModifier) ProtoMessage() {}

func (x *HashModifier) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashModifier.ProtoReflect.Descriptor instead.
func (*HashModifier) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{22}
}

func (x *HashModifier) GetUpdateId() string {
	if x != nil && x.UpdateId != nil {
		return *x.UpdateId
	}
	return ""
}

func (x *HashModifier) GetHashDiff() uint64 {
	if x != nil && x.HashDiff != nil {
		return *x.HashDiff
	}
	return 0
}

func (x *HashModifier) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

// Event that becomes part of a conversation's history.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the conversation this event belongs to.
	ConversationId *ConversationId `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	// ID of the user that sent this event.
	SenderId *ParticipantId `protobuf:"bytes,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	// Timestamp when the event occurred.
	Timestamp          *uint64             `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	SelfEventState     *UserEventState     `protobuf:"bytes,4,opt,name=self_event_state,json=selfEventState" json:"self_event_state,omitempty"`
	SourceType         *SourceType         `protobuf:"varint,6,opt,name=source_type,json=sourceType,enum=hangouts.SourceType" json:"source_type,omitempty"`
	ChatMessage        *ChatMessage        `protobuf:"bytes,7,opt,name=chat_message,json=chatMessage" json:"chat_message,omitempty"`
	MembershipChange   *MembershipChange   `protobuf:"bytes,9,opt,name=membership_change,json=membershipChange" json:"membership_change,omitempty"`
	ConversationRename *ConversationRename `protobuf:"bytes,10,opt,name=conversation_rename,json=conversationRename" json:"conversation_rename,omitempty"`
	HangoutEvent       *HangoutEvent       `protobuf:"bytes,11,opt,name=hangout_event,json=hangoutEvent" json:"hangout_event,omitempty"`
	// Unique ID for the event.
	EventId               *string             `protobuf:"bytes,12,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ExpirationTimestamp   *uint64             `protobuf:"varint,13,opt,name=expiration_timestamp,json=expirationTimestamp" json:"expiration_timestamp,omitempty"`
	OtrModification       *OTRModification    `protobuf:"bytes,14,opt,name=otr_modification,json=otrModification" json:"otr_modification,omitempty"`
	AdvancesSortTimestamp *bool               `protobuf:"varint,15,opt,name=advances_sort_timestamp,json=advancesSortTimestamp" json:"advances_sort_timestamp,omitempty"`
	OtrStatus             *OffTheRecordStatus `protobuf:"varint,16,opt,name=otr_status,json=otrStatus,enum=hangouts.OffTheRecordStatus" json:"otr_status,omitempty"`
	Persisted             *bool               `protobuf:"varint,17,opt,name=persisted" json:"persisted,omitempty"`
	MediumType            *DeliveryMedium     `protobuf:"bytes,20,opt,name=medium_type,json=mediumType" json:"medium_type,omitempty"`
	// The event's type.
	EventType *EventType `protobuf:"varint,23,opt,name=event_type,json=eventType,enum=hangouts.EventType" json:"event_type,omitempty"`
	// Event version timestamp.
	EventVersion                 *uint64                       `protobuf:"varint,24,opt,name=event_version,json=eventVersion" json:"event_version,omitempty"`
	HashModifier                 *HashModifier                 `protobuf:"bytes,26,opt,name=hash_modifier,json=hashModifier" json:"hash_modifier,omitempty"`
	GroupLinkSharingModification *GroupLinkSharingModification `protobuf:"bytes,31,opt,name=group_link_sharing_modification,json=groupLinkSharingModification" json:"group_link_sharing_modification,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{23}
}

func (x *Event) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *Event) GetSenderId() *ParticipantId {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *Event) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Event) GetSelfEventState() *UserEventState {
	if x != nil {
		return x.SelfEventState
	}
	return nil
}

func (x *Event) GetSourceType() SourceType {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNKNOWN
}

func (x *Event) GetChatMessage() *ChatMessage {
	if x != nil {
		return x.ChatMessage
	}
	return nil
}

func (x *Event) GetMembershipChange() *MembershipChange {
	if x != nil {
		return x.MembershipChange
	}
	return nil
}

func (x *Event) GetConversationRename() *ConversationRename {
	if x != nil {
		return x.ConversationRename
	}
	return nil
}

func (x *Event) GetHangoutEvent() *HangoutEvent {
	if x != nil {
		return x.HangoutEvent
	}
	return nil
}

func (x *Event) GetEventId() string {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return ""
}

func (x *Event) GetExpirationTimestamp() uint64 {
	if x != nil && x.ExpirationTimestamp != nil {
		return *x.ExpirationTimestamp
	}
	return 0
}

func (x *Event) GetOtrModification() *OTRModification {
	if x != nil {
		return x.OtrModification
	}
	return nil
}

func (x *Event) GetAdvancesSortTimestamp() bool {
	if x != nil && x.AdvancesSortTimestamp != nil {
		return *x.AdvancesSortTimestamp
	}
	return false
}

func (x *Event) GetOtrStatus() OffTheRecordStatus {
	if x != nil && x.OtrStatus != nil {
		return *x.OtrStatus
	}
	return OffTheRecordStatus_OFF_THE_RECORD_STATUS_UNKNOWN
}

func (x *Event) GetPersisted() bool {
	if x != nil && x.Persisted != nil {
		return *x.Persisted
	}
	return false
}

func (x *Event) GetMediumType() *DeliveryMedium {
	if x != nil {
		return x.MediumType
	}
	return nil
}

func (x *Event) GetEventType() EventType {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return EventType_EVENT_TYPE_UNKNOWN
}

func (x *Event) GetEventVersion() uint64 {
	if x != nil && x.EventVersion != nil {
		return *x.EventVersion
	}
	return 0
}

func (x *Event) GetHashModifier() *HashModifier {
	if x != nil {
		return x.HashModifier
	}
	return nil
}

func (x *Event) GetGroupLinkSharingModification() *GroupLinkSharingModification {
	if x != nil {
		return x.GroupLinkSharingModification
	}
	return nil
}

type UserReadState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantId *ParticipantId `protobuf:"bytes,1,opt,name=participant_id,json=participantId" json:"participant_id,omitempty"`
	// Timestamp of the user's last read message in the conversation.
	LatestReadTimestamp *uint64 `protobuf:"varint,2,opt,name=latest_read_timestamp,json=latestReadTimestamp" json:"latest_read_timestamp,omitempty"`
}

func (x *UserReadState) Reset() {
	*x = UserReadState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReadState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReadState) ProtoMessage() {}

func (x *UserReadState) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReadState.ProtoReflect.Descriptor instead.
func (*UserReadState) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{24}
}

func (x *UserReadState) GetParticipantId() *ParticipantId {
	if x != nil {
		return x.ParticipantId
	}
	return nil
}

func (x *UserReadState) GetLatestReadTimestamp() uint64 {
	if x != nil && x.LatestReadTimestamp != nil {
		return *x.LatestReadTimestamp
	}
	return 0
}

type DeliveryMedium struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediumType *DeliveryMediumType `protobuf:"varint,1,opt,name=medium_type,json=mediumType,enum=hangouts.DeliveryMediumType" json:"medium_type,omitempty"`
	// Phone number to use for sending Google Voice messages.
	PhoneNumber *PhoneNumber `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
}

func (x *DeliveryMedium) Reset() {
	*x = DeliveryMedium{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryMedium) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryMedium) ProtoMessage() {}

func (x *DeliveryMedium) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryMedium.ProtoReflect.Descriptor instead.
func (*DeliveryMedium) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{25}
}

func (x *DeliveryMedium) GetMediumType() DeliveryMediumType {
	if x != nil && x.MediumType != nil {
		return *x.MediumType
	}
	return DeliveryMediumType_DELIVERY_MEDIUM_UNKNOWN
}

func (x *DeliveryMedium) GetPhoneNumber() *PhoneNumber {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

type DeliveryMediumOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryMedium *DeliveryMedium `protobuf:"bytes,1,opt,name=delivery_medium,json=deliveryMedium" json:"delivery_medium,omitempty"`
	CurrentDefault *bool           `protobuf:"varint,2,opt,name=current_default,json=currentDefault" json:"current_default,omitempty"`
}

func (x *DeliveryMediumOption) Reset() {
	*x = DeliveryMediumOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryMediumOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryMediumOption) ProtoMessage() {}

func (x *DeliveryMediumOption) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryMediumOption.ProtoReflect.Descriptor instead.
func (*DeliveryMediumOption) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{26}
}

func (x *DeliveryMediumOption) GetDeliveryMedium() *DeliveryMedium {
	if x != nil {
		return x.DeliveryMedium
	}
	return nil
}

func (x *DeliveryMediumOption) GetCurrentDefault() bool {
	if x != nil && x.CurrentDefault != nil {
		return *x.CurrentDefault
	}
	return false
}

type UserConversationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientGeneratedId    *string                 `protobuf:"bytes,2,opt,name=client_generated_id,json=clientGeneratedId" json:"client_generated_id,omitempty"`
	SelfReadState        *UserReadState          `protobuf:"bytes,7,opt,name=self_read_state,json=selfReadState" json:"self_read_state,omitempty"`
	Status               *ConversationStatus     `protobuf:"varint,8,opt,name=status,enum=hangouts.ConversationStatus" json:"status,omitempty"`
	NotificationLevel    *NotificationLevel      `protobuf:"varint,9,opt,name=notification_level,json=notificationLevel,enum=hangouts.NotificationLevel" json:"notification_level,omitempty"`
	View                 []ConversationView      `protobuf:"varint,10,rep,name=view,enum=hangouts.ConversationView" json:"view,omitempty"`
	InviterId            *ParticipantId          `protobuf:"bytes,11,opt,name=inviter_id,json=inviterId" json:"inviter_id,omitempty"`
	InviteTimestamp      *uint64                 `protobuf:"varint,12,opt,name=invite_timestamp,json=inviteTimestamp" json:"invite_timestamp,omitempty"`
	SortTimestamp        *uint64                 `protobuf:"varint,13,opt,name=sort_timestamp,json=sortTimestamp" json:"sort_timestamp,omitempty"`
	ActiveTimestamp      *uint64                 `protobuf:"varint,14,opt,name=active_timestamp,json=activeTimestamp" json:"active_timestamp,omitempty"`
	InviteAffinity       *InvitationAffinity     `protobuf:"varint,15,opt,name=invite_affinity,json=inviteAffinity,enum=hangouts.InvitationAffinity" json:"invite_affinity,omitempty"`
	DeliveryMediumOption []*DeliveryMediumOption `protobuf:"bytes,17,rep,name=delivery_medium_option,json=deliveryMediumOption" json:"delivery_medium_option,omitempty"`
}

func (x *UserConversationState) Reset() {
	*x = UserConversationState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConversationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConversationState) ProtoMessage() {}

func (x *UserConversationState) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConversationState.ProtoReflect.Descriptor instead.
func (*UserConversationState) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{27}
}

func (x *UserConversationState) GetClientGeneratedId() string {
	if x != nil && x.ClientGeneratedId != nil {
		return *x.ClientGeneratedId
	}
	return ""
}

func (x *UserConversationState) GetSelfReadState() *UserReadState {
	if x != nil {
		return x.SelfReadState
	}
	return nil
}

func (x *UserConversationState) GetStatus() ConversationStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ConversationStatus_CONVERSATION_STATUS_UNKNOWN
}

func (x *UserConversationState) GetNotificationLevel() NotificationLevel {
	if x != nil && x.NotificationLevel != nil {
		return *x.NotificationLevel
	}
	return NotificationLevel_NOTIFICATION_LEVEL_UNKNOWN
}

func (x *UserConversationState) GetView() []ConversationView {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *UserConversationState) GetInviterId() *ParticipantId {
	if x != nil {
		return x.InviterId
	}
	return nil
}

func (x *UserConversationState) GetInviteTimestamp() uint64 {
	if x != nil && x.InviteTimestamp != nil {
		return *x.InviteTimestamp
	}
	return 0
}

func (x *UserConversationState) GetSortTimestamp() uint64 {
	if x != nil && x.SortTimestamp != nil {
		return *x.SortTimestamp
	}
	return 0
}

func (x *UserConversationState) GetActiveTimestamp() uint64 {
	if x != nil && x.ActiveTimestamp != nil {
		return *x.ActiveTimestamp
	}
	return 0
}

func (x *UserConversationState) GetInviteAffinity() InvitationAffinity {
	if x != nil && x.InviteAffinity != nil {
		return *x.InviteAffinity
	}
	return InvitationAffinity_INVITE_AFFINITY_UNKNOWN
}

func (x *UserConversationState) GetDeliveryMediumOption() []*DeliveryMediumOption {
	if x != nil {
		return x.DeliveryMediumOption
	}
	return nil
}

type ConversationParticipantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *ParticipantId    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	FallbackName        *string           `protobuf:"bytes,2,opt,name=fallback_name,json=fallbackName" json:"fallback_name,omitempty"`
	InvitationStatus    *InvitationStatus `protobuf:"varint,3,opt,name=invitation_status,json=invitationStatus,enum=hangouts.InvitationStatus" json:"invitation_status,omitempty"`
	ParticipantType     *ParticipantType  `protobuf:"varint,5,opt,name=participant_type,json=participantType,enum=hangouts.ParticipantType" json:"participant_type,omitempty"`
	NewInvitationStatus *InvitationStatus `protobuf:"varint,6,opt,name=new_invitation_status,json=newInvitationStatus,enum=hangouts.InvitationStatus" json:"new_invitation_status,omitempty"`
}

func (x *ConversationParticipantData) Reset() {
	*x = ConversationParticipantData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationParticipantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationParticipantData) ProtoMessage() {}

func (x *ConversationParticipantData) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationParticipantData.ProtoReflect.Descriptor instead.
func (*ConversationParticipantData) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{28}
}

func (x *ConversationParticipantData) GetId() *ParticipantId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConversationParticipantData) GetFallbackName() string {
	if x != nil && x.FallbackName != nil {
		return *x.FallbackName
	}
	return ""
}

func (x *ConversationParticipantData) GetInvitationStatus() InvitationStatus {
	if x != nil && x.InvitationStatus != nil {
		return *x.InvitationStatus
	}
	return InvitationStatus_INVITATION_STATUS_UNKNOWN
}

func (x *ConversationParticipantData) GetParticipantType() ParticipantType {
	if x != nil && x.ParticipantType != nil {
		return *x.ParticipantType
	}
	return ParticipantType_PARTICIPANT_TYPE_UNKNOWN
}

func (x *ConversationParticipantData) GetNewInvitationStatus() InvitationStatus {
	if x != nil && x.NewInvitationStatus != nil {
		return *x.NewInvitationStatus
	}
	return InvitationStatus_INVITATION_STATUS_UNKNOWN
}

// A conversation between two or more users.
type Conversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId        *ConversationId        `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Type                  *ConversationType      `protobuf:"varint,2,opt,name=type,enum=hangouts.ConversationType" json:"type,omitempty"`
	Name                  *string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	SelfConversationState *UserConversationState `protobuf:"bytes,4,opt,name=self_conversation_state,json=selfConversationState" json:"self_conversation_state,omitempty"`
	// Read state (watermark position) for every conversation participant.
	ReadState []*UserReadState `protobuf:"bytes,8,rep,name=read_state,json=readState" json:"read_state,omitempty"`
	// True if the conversation has an active Hangout.
	HasActiveHangout *bool `protobuf:"varint,9,opt,name=has_active_hangout,json=hasActiveHangout" json:"has_active_hangout,omitempty"`
	// The conversation's "off the record" status.
	OtrStatus *OffTheRecordStatus `protobuf:"varint,10,opt,name=otr_status,json=otrStatus,enum=hangouts.OffTheRecordStatus" json:"otr_status,omitempty"`
	// Whether the OTR toggle is available to the user for this conversation.
	OtrToggle                    *OffTheRecordToggle            `protobuf:"varint,11,opt,name=otr_toggle,json=otrToggle,enum=hangouts.OffTheRecordToggle" json:"otr_toggle,omitempty"`
	ConversationHistorySupported *bool                          `protobuf:"varint,12,opt,name=conversation_history_supported,json=conversationHistorySupported" json:"conversation_history_supported,omitempty"`
	CurrentParticipant           []*ParticipantId               `protobuf:"bytes,13,rep,name=current_participant,json=currentParticipant" json:"current_participant,omitempty"`
	ParticipantData              []*ConversationParticipantData `protobuf:"bytes,14,rep,name=participant_data,json=participantData" json:"participant_data,omitempty"`
	NetworkType                  []NetworkType                  `protobuf:"varint,18,rep,name=network_type,json=networkType,enum=hangouts.NetworkType" json:"network_type,omitempty"`
	ForceHistoryState            *ForceHistory                  `protobuf:"varint,19,opt,name=force_history_state,json=forceHistoryState,enum=hangouts.ForceHistory" json:"force_history_state,omitempty"`
	GroupLinkSharingStatus       *GroupLinkSharingStatus        `protobuf:"varint,22,opt,name=group_link_sharing_status,json=groupLinkSharingStatus,enum=hangouts.GroupLinkSharingStatus" json:"group_link_sharing_status,omitempty"`
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{29}
}

func (x *Conversation) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *Conversation) GetType() ConversationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ConversationType_CONVERSATION_TYPE_UNKNOWN
}

func (x *Conversation) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Conversation) GetSelfConversationState() *UserConversationState {
	if x != nil {
		return x.SelfConversationState
	}
	return nil
}

func (x *Conversation) GetReadState() []*UserReadState {
	if x != nil {
		return x.ReadState
	}
	return nil
}

func (x *Conversation) GetHasActiveHangout() bool {
	if x != nil && x.HasActiveHangout != nil {
		return *x.HasActiveHangout
	}
	return false
}

func (x *Conversation) GetOtrStatus() OffTheRecordStatus {
	if x != nil && x.OtrStatus != nil {
		return *x.OtrStatus
	}
	return OffTheRecordStatus_OFF_THE_RECORD_STATUS_UNKNOWN
}

func (x *Conversation) GetOtrToggle() OffTheRecordToggle {
	if x != nil && x.OtrToggle != nil {
		return *x.OtrToggle
	}
	return OffTheRecordToggle_OFF_THE_RECORD_TOGGLE_UNKNOWN
}

func (x *Conversation) GetConversationHistorySupported() bool {
	if x != nil && x.ConversationHistorySupported != nil {
		return *x.ConversationHistorySupported
	}
	return false
}

func (x *Conversation) GetCurrentParticipant() []*ParticipantId {
	if x != nil {
		return x.CurrentParticipant
	}
	return nil
}

func (x *Conversation) GetParticipantData() []*ConversationParticipantData {
	if x != nil {
		return x.ParticipantData
	}
	return nil
}

func (x *Conversation) GetNetworkType() []NetworkType {
	if x != nil {
		return x.NetworkType
	}
	return nil
}

func (x *Conversation) GetForceHistoryState() ForceHistory {
	if x != nil && x.ForceHistoryState != nil {
		return *x.ForceHistoryState
	}
	return ForceHistory_FORCE_HISTORY_UNKNOWN
}

func (x *Conversation) GetGroupLinkSharingStatus() GroupLinkSharingStatus {
	if x != nil && x.GroupLinkSharingStatus != nil {
		return *x.GroupLinkSharingStatus
	}
	return GroupLinkSharingStatus_GROUP_LINK_SHARING_STATUS_UNKNOWN
}

type EasterEgg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (x *EasterEgg) Reset() {
	*x = EasterEgg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasterEgg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasterEgg) ProtoMessage() {}

func (x *EasterEgg) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasterEgg.ProtoReflect.Descriptor instead.
func (*EasterEgg) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{30}
}

func (x *EasterEgg) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type BlockStateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantId *ParticipantId `protobuf:"bytes,1,opt,name=participant_id,json=participantId" json:"participant_id,omitempty"`
	NewBlockState *BlockState    `protobuf:"varint,2,opt,name=new_block_state,json=newBlockState,enum=hangouts.BlockState" json:"new_block_state,omitempty"`
}

func (x *BlockStateChange) Reset() {
	*x = BlockStateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStateChange) ProtoMessage() {}

func (x *BlockStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStateChange.ProtoReflect.Descriptor instead.
func (*BlockStateChange) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{31}
}

func (x *BlockStateChange) GetParticipantId() *ParticipantId {
	if x != nil {
		return x.ParticipantId
	}
	return nil
}

func (x *BlockStateChange) GetNewBlockState() BlockState {
	if x != nil && x.NewBlockState != nil {
		return *x.NewBlockState
	}
	return BlockState_BLOCK_STATE_UNKNOWN
}

type Photo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Picasa photo ID.
	PhotoId                    *string `protobuf:"bytes,1,opt,name=photo_id,json=photoId" json:"photo_id,omitempty"`
	DeleteAlbumlessSourcePhoto *bool   `protobuf:"varint,2,opt,name=delete_albumless_source_photo,json=deleteAlbumlessSourcePhoto" json:"delete_albumless_source_photo,omitempty"`
	// Optional Picasa user ID needed for photos from other accounts (eg. stickers).
	UserId *string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Must be true if user_id is specified.
	IsCustomUserId *bool `protobuf:"varint,4,opt,name=is_custom_user_id,json=isCustomUserId" json:"is_custom_user_id,omitempty"`
}

func (x *Photo) Reset() {
	*x = Photo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Photo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Photo) ProtoMessage() {}

func (x *Photo) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Photo.ProtoReflect.Descriptor instead.
func (*Photo) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{32}
}

func (x *Photo) GetPhotoId() string {
	if x != nil && x.PhotoId != nil {
		return *x.PhotoId
	}
	return ""
}

func (x *Photo) GetDeleteAlbumlessSourcePhoto() bool {
	if x != nil && x.DeleteAlbumlessSourcePhoto != nil {
		return *x.DeleteAlbumlessSourcePhoto
	}
	return false
}

func (x *Photo) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *Photo) GetIsCustomUserId() bool {
	if x != nil && x.IsCustomUserId != nil {
		return *x.IsCustomUserId
	}
	return false
}

type ExistingMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Photo *Photo `protobuf:"bytes,1,opt,name=photo" json:"photo,omitempty"`
}

func (x *ExistingMedia) Reset() {
	*x = ExistingMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistingMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistingMedia) ProtoMessage() {}

func (x *ExistingMedia) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistingMedia.ProtoReflect.Descriptor instead.
func (*ExistingMedia) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{33}
}

func (x *ExistingMedia) GetPhoto() *Photo {
	if x != nil {
		return x.Photo
	}
	return nil
}

type EventRequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId    *ConversationId     `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	ClientGeneratedId *uint64             `protobuf:"varint,2,opt,name=client_generated_id,json=clientGeneratedId" json:"client_generated_id,omitempty"`
	ExpectedOtr       *OffTheRecordStatus `protobuf:"varint,3,opt,name=expected_otr,json=expectedOtr,enum=hangouts.OffTheRecordStatus" json:"expected_otr,omitempty"`
	DeliveryMedium    *DeliveryMedium     `protobuf:"bytes,4,opt,name=delivery_medium,json=deliveryMedium" json:"delivery_medium,omitempty"`
	EventType         *EventType          `protobuf:"varint,5,opt,name=event_type,json=eventType,enum=hangouts.EventType" json:"event_type,omitempty"`
}

func (x *EventRequestHeader) Reset() {
	*x = EventRequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequestHeader) ProtoMessage() {}

func (x *EventRequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequestHeader.ProtoReflect.Descriptor instead.
func (*EventRequestHeader) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{34}
}

func (x *EventRequestHeader) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *EventRequestHeader) GetClientGeneratedId() uint64 {
	if x != nil && x.ClientGeneratedId != nil {
		return *x.ClientGeneratedId
	}
	return 0
}

func (x *EventRequestHeader) GetExpectedOtr() OffTheRecordStatus {
	if x != nil && x.ExpectedOtr != nil {
		return *x.ExpectedOtr
	}
	return OffTheRecordStatus_OFF_THE_RECORD_STATUS_UNKNOWN
}

func (x *EventRequestHeader) GetDeliveryMedium() *DeliveryMedium {
	if x != nil {
		return x.DeliveryMedium
	}
	return nil
}

func (x *EventRequestHeader) GetEventType() EventType {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return EventType_EVENT_TYPE_UNKNOWN
}

// The client and device version.
type ClientVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the client.
	ClientId *ClientId `protobuf:"varint,1,opt,name=client_id,json=clientId,enum=hangouts.ClientId" json:"client_id,omitempty"`
	// The client build type.
	BuildType *ClientBuildType `protobuf:"varint,2,opt,name=build_type,json=buildType,enum=hangouts.ClientBuildType" json:"build_type,omitempty"`
	// Client version.
	MajorVersion *string `protobuf:"bytes,3,opt,name=major_version,json=majorVersion" json:"major_version,omitempty"`
	// Client version timestamp.
	VersionTimestamp *uint64 `protobuf:"varint,4,opt,name=version_timestamp,json=versionTimestamp" json:"version_timestamp,omitempty"`
	// OS version string (for native apps).
	DeviceOsVersion *string `protobuf:"bytes,5,opt,name=device_os_version,json=deviceOsVersion" json:"device_os_version,omitempty"`
	// Device hardware name (for native apps).
	DeviceHardware *string `protobuf:"bytes,6,opt,name=device_hardware,json=deviceHardware" json:"device_hardware,omitempty"`
}

func (x *ClientVersion) Reset() {
	*x = ClientVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientVersion) ProtoMessage() {}

func (x *ClientVersion) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientVersion.ProtoReflect.Descriptor instead.
func (*ClientVersion) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{35}
}

func (x *ClientVersion) GetClientId() ClientId {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ClientId_CLIENT_ID_UNKNOWN
}

func (x *ClientVersion) GetBuildType() ClientBuildType {
	if x != nil && x.BuildType != nil {
		return *x.BuildType
	}
	return ClientBuildType_BUILD_TYPE_UNKNOWN
}

func (x *ClientVersion) GetMajorVersion() string {
	if x != nil && x.MajorVersion != nil {
		return *x.MajorVersion
	}
	return ""
}

func (x *ClientVersion) GetVersionTimestamp() uint64 {
	if x != nil && x.VersionTimestamp != nil {
		return *x.VersionTimestamp
	}
	return 0
}

func (x *ClientVersion) GetDeviceOsVersion() string {
	if x != nil && x.DeviceOsVersion != nil {
		return *x.DeviceOsVersion
	}
	return ""
}

func (x *ClientVersion) GetDeviceHardware() string {
	if x != nil && x.DeviceHardware != nil {
		return *x.DeviceHardware
	}
	return ""
}

// Header for requests from the client to the server.
type RequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion    *ClientVersion    `protobuf:"bytes,1,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	ClientIdentifier *ClientIdentifier `protobuf:"bytes,2,opt,name=client_identifier,json=clientIdentifier" json:"client_identifier,omitempty"`
	LanguageCode     *string           `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
}

func (x *RequestHeader) Reset() {
	*x = RequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHeader) ProtoMessage() {}

func (x *RequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHeader.ProtoReflect.Descriptor instead.
func (*RequestHeader) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{36}
}

func (x *RequestHeader) GetClientVersion() *ClientVersion {
	if x != nil {
		return x.ClientVersion
	}
	return nil
}

func (x *RequestHeader) GetClientIdentifier() *ClientIdentifier {
	if x != nil {
		return x.ClientIdentifier
	}
	return nil
}

func (x *RequestHeader) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

// Header for responses from the server to the client.
type ResponseHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *ResponseStatus `protobuf:"varint,1,opt,name=status,enum=hangouts.ResponseStatus" json:"status,omitempty"`
	ErrorDescription  *string         `protobuf:"bytes,2,opt,name=error_description,json=errorDescription" json:"error_description,omitempty"`
	DebugUrl          *string         `protobuf:"bytes,3,opt,name=debug_url,json=debugUrl" json:"debug_url,omitempty"`
	RequestTraceId    *string         `protobuf:"bytes,4,opt,name=request_trace_id,json=requestTraceId" json:"request_trace_id,omitempty"`
	CurrentServerTime *uint64         `protobuf:"varint,5,opt,name=current_server_time,json=currentServerTime" json:"current_server_time,omitempty"`
}

func (x *ResponseHeader) Reset() {
	*x = ResponseHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseHeader) ProtoMessage() {}

func (x *ResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseHeader.ProtoReflect.Descriptor instead.
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{37}
}

func (x *ResponseHeader) GetStatus() ResponseStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ResponseStatus_RESPONSE_STATUS_UNKNOWN
}

func (x *ResponseHeader) GetErrorDescription() string {
	if x != nil && x.ErrorDescription != nil {
		return *x.ErrorDescription
	}
	return ""
}

func (x *ResponseHeader) GetDebugUrl() string {
	if x != nil && x.DebugUrl != nil {
		return *x.DebugUrl
	}
	return ""
}

func (x *ResponseHeader) GetRequestTraceId() string {
	if x != nil && x.RequestTraceId != nil {
		return *x.RequestTraceId
	}
	return ""
}

func (x *ResponseHeader) GetCurrentServerTime() uint64 {
	if x != nil && x.CurrentServerTime != nil {
		return *x.CurrentServerTime
	}
	return 0
}

// A user that can participate in conversations.
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's ID.
	Id *ParticipantId `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
	// Optional user presence status.
	Presence *Presence `protobuf:"bytes,8,opt,name=presence" json:"presence,omitempty"`
	// Optional user properties.
	Properties          *EntityProperties        `protobuf:"bytes,10,opt,name=properties" json:"properties,omitempty"`
	EntityType          *ParticipantType         `protobuf:"varint,13,opt,name=entity_type,json=entityType,enum=hangouts.ParticipantType" json:"entity_type,omitempty"`
	HadPastHangoutState *Entity_PastHangoutState `protobuf:"varint,16,opt,name=had_past_hangout_state,json=hadPastHangoutState,enum=hangouts.Entity_PastHangoutState" json:"had_past_hangout_state,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{38}
}

func (x *Entity) GetId() *ParticipantId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Entity) GetPresence() *Presence {
	if x != nil {
		return x.Presence
	}
	return nil
}

func (x *Entity) GetProperties() *EntityProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Entity) GetEntityType() ParticipantType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return ParticipantType_PARTICIPANT_TYPE_UNKNOWN
}

func (x *Entity) GetHadPastHangoutState() Entity_PastHangoutState {
	if x != nil && x.HadPastHangoutState != nil {
		return *x.HadPastHangoutState
	}
	return Entity_PAST_HANGOUT_STATE_UNKNOWN
}

type EntityProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *ProfileType `protobuf:"varint,1,opt,name=type,enum=hangouts.ProfileType" json:"type,omitempty"`
	DisplayName *string      `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	FirstName   *string      `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	// Photo URL with protocol scheme omitted (eg.
	// "//lh.googleusercontent.com/...").
	PhotoUrl       *string         `protobuf:"bytes,4,opt,name=photo_url,json=photoUrl" json:"photo_url,omitempty"`
	Email          []string        `protobuf:"bytes,5,rep,name=email" json:"email,omitempty"`
	Phone          []string        `protobuf:"bytes,6,rep,name=phone" json:"phone,omitempty"`
	InUsersDomain  *bool           `protobuf:"varint,10,opt,name=in_users_domain,json=inUsersDomain" json:"in_users_domain,omitempty"`
	Gender         *Gender         `protobuf:"varint,11,opt,name=gender,enum=hangouts.Gender" json:"gender,omitempty"`
	PhotoUrlStatus *PhotoUrlStatus `protobuf:"varint,12,opt,name=photo_url_status,json=photoUrlStatus,enum=hangouts.PhotoUrlStatus" json:"photo_url_status,omitempty"`
	CanonicalEmail *string         `protobuf:"bytes,15,opt,name=canonical_email,json=canonicalEmail" json:"canonical_email,omitempty"`
}

func (x *EntityProperties) Reset() {
	*x = EntityProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityProperties) ProtoMessage() {}

func (x *EntityProperties) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityProperties.ProtoReflect.Descriptor instead.
func (*EntityProperties) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{39}
}

func (x *EntityProperties) GetType() ProfileType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ProfileType_PROFILE_TYPE_NONE
}

func (x *EntityProperties) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *EntityProperties) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *EntityProperties) GetPhotoUrl() string {
	if x != nil && x.PhotoUrl != nil {
		return *x.PhotoUrl
	}
	return ""
}

func (x *EntityProperties) GetEmail() []string {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *EntityProperties) GetPhone() []string {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *EntityProperties) GetInUsersDomain() bool {
	if x != nil && x.InUsersDomain != nil {
		return *x.InUsersDomain
	}
	return false
}

func (x *EntityProperties) GetGender() Gender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Gender_GENDER_UNKNOWN
}

func (x *EntityProperties) GetPhotoUrlStatus() PhotoUrlStatus {
	if x != nil && x.PhotoUrlStatus != nil {
		return *x.PhotoUrlStatus
	}
	return PhotoUrlStatus_PHOTO_URL_STATUS_UNKNOWN
}

func (x *EntityProperties) GetCanonicalEmail() string {
	if x != nil && x.CanonicalEmail != nil {
		return *x.CanonicalEmail
	}
	return ""
}

// State of a conversation and recent events.
type ConversationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId         *ConversationId         `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Conversation           *Conversation           `protobuf:"bytes,2,opt,name=conversation" json:"conversation,omitempty"`
	Event                  []*Event                `protobuf:"bytes,3,rep,name=event" json:"event,omitempty"`
	EventContinuationToken *EventContinuationToken `protobuf:"bytes,5,opt,name=event_continuation_token,json=eventContinuationToken" json:"event_continuation_token,omitempty"`
}

func (x *ConversationState) Reset() {
	*x = ConversationState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationState) ProtoMessage() {}

func (x *ConversationState) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationState.ProtoReflect.Descriptor instead.
func (*ConversationState) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{40}
}

func (x *ConversationState) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *ConversationState) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *ConversationState) GetEvent() []*Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ConversationState) GetEventContinuationToken() *EventContinuationToken {
	if x != nil {
		return x.EventContinuationToken
	}
	return nil
}

// Token that allows retrieving more events from a position in a conversation.
// Specifying event_timestamp is sufficient.
type EventContinuationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId                  *string `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	StorageContinuationToken []byte  `protobuf:"bytes,2,opt,name=storage_continuation_token,json=storageContinuationToken" json:"storage_continuation_token,omitempty"`
	EventTimestamp           *uint64 `protobuf:"varint,3,opt,name=event_timestamp,json=eventTimestamp" json:"event_timestamp,omitempty"`
}

func (x *EventContinuationToken) Reset() {
	*x = EventContinuationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventContinuationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventContinuationToken) ProtoMessage() {}

func (x *EventContinuationToken) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventContinuationToken.ProtoReflect.Descriptor instead.
func (*EventContinuationToken) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{41}
}

func (x *EventContinuationToken) GetEventId() string {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return ""
}

func (x *EventContinuationToken) GetStorageContinuationToken() []byte {
	if x != nil {
		return x.StorageContinuationToken
	}
	return nil
}

func (x *EventContinuationToken) GetEventTimestamp() uint64 {
	if x != nil && x.EventTimestamp != nil {
		return *x.EventTimestamp
	}
	return 0
}

// Specifies an entity to lookup by one of its properties.
type EntityLookupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GaiaId *string `protobuf:"bytes,1,opt,name=gaia_id,json=gaiaId" json:"gaia_id,omitempty"`
	Email  *string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	// Phone number as string (eg. "+15551234567").
	Phone *string `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	// Whether create a gaia_id for off-network contacts (eg. Google Voice contacts).
	CreateOffnetworkGaia *bool `protobuf:"varint,6,opt,name=create_offnetwork_gaia,json=createOffnetworkGaia" json:"create_offnetwork_gaia,omitempty"`
}

func (x *EntityLookupSpec) Reset() {
	*x = EntityLookupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityLookupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLookupSpec) ProtoMessage() {}

func (x *EntityLookupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLookupSpec.ProtoReflect.Descriptor instead.
func (*EntityLookupSpec) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{42}
}

func (x *EntityLookupSpec) GetGaiaId() string {
	if x != nil && x.GaiaId != nil {
		return *x.GaiaId
	}
	return ""
}

func (x *EntityLookupSpec) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *EntityLookupSpec) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *EntityLookupSpec) GetCreateOffnetworkGaia() bool {
	if x != nil && x.CreateOffnetworkGaia != nil {
		return *x.CreateOffnetworkGaia
	}
	return false
}

type ConfigurationBit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigurationBitType *ConfigurationBitType `protobuf:"varint,1,opt,name=configuration_bit_type,json=configurationBitType,enum=hangouts.ConfigurationBitType" json:"configuration_bit_type,omitempty"`
	Value                *bool                 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *ConfigurationBit) Reset() {
	*x = ConfigurationBit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationBit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationBit) ProtoMessage() {}

func (x *ConfigurationBit) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationBit.ProtoReflect.Descriptor instead.
func (*ConfigurationBit) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{43}
}

func (x *ConfigurationBit) GetConfigurationBitType() ConfigurationBitType {
	if x != nil && x.ConfigurationBitType != nil {
		return *x.ConfigurationBitType
	}
	return ConfigurationBitType_CONFIGURATION_BIT_TYPE_UNKNOWN
}

func (x *ConfigurationBit) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

type RichPresenceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRichPresenceEnabledState []*RichPresenceEnabledState `protobuf:"bytes,3,rep,name=get_rich_presence_enabled_state,json=getRichPresenceEnabledState" json:"get_rich_presence_enabled_state,omitempty"`
}

func (x *RichPresenceState) Reset() {
	*x = RichPresenceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichPresenceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichPresenceState) ProtoMessage() {}

func (x *RichPresenceState) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichPresenceState.ProtoReflect.Descriptor instead.
func (*RichPresenceState) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{44}
}

func (x *RichPresenceState) GetGetRichPresenceEnabledState() []*RichPresenceEnabledState {
	if x != nil {
		return x.GetRichPresenceEnabledState
	}
	return nil
}

type RichPresenceEnabledState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *RichPresenceType `protobuf:"varint,1,opt,name=type,enum=hangouts.RichPresenceType" json:"type,omitempty"`
	Enabled *bool             `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
}

func (x *RichPresenceEnabledState) Reset() {
	*x = RichPresenceEnabledState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichPresenceEnabledState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichPresenceEnabledState) ProtoMessage() {}

func (x *RichPresenceEnabledState) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichPresenceEnabledState.ProtoReflect.Descriptor instead.
func (*RichPresenceEnabledState) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{45}
}

func (x *RichPresenceEnabledState) GetType() RichPresenceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return RichPresenceType_RICH_PRESENCE_TYPE_UNKNOWN
}

func (x *RichPresenceEnabledState) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type DesktopOffSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State of "desktop off" setting.
	DesktopOff *bool `protobuf:"varint,1,opt,name=desktop_off,json=desktopOff" json:"desktop_off,omitempty"`
}

func (x *DesktopOffSetting) Reset() {
	*x = DesktopOffSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesktopOffSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesktopOffSetting) ProtoMessage() {}

func (x *DesktopOffSetting) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesktopOffSetting.ProtoReflect.Descriptor instead.
func (*DesktopOffSetting) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{46}
}

func (x *DesktopOffSetting) GetDesktopOff() bool {
	if x != nil && x.DesktopOff != nil {
		return *x.DesktopOff
	}
	return false
}

type DesktopOffState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether Hangouts desktop is signed off or on.
	DesktopOff *bool   `protobuf:"varint,1,opt,name=desktop_off,json=desktopOff" json:"desktop_off,omitempty"`
	Version    *uint64 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (x *DesktopOffState) Reset() {
	*x = DesktopOffState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesktopOffState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesktopOffState) ProtoMessage() {}

func (x *DesktopOffState) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesktopOffState.ProtoReflect.Descriptor instead.
func (*DesktopOffState) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{47}
}

func (x *DesktopOffState) GetDesktopOff() bool {
	if x != nil && x.DesktopOff != nil {
		return *x.DesktopOff
	}
	return false
}

func (x *DesktopOffState) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

// Enable or disable do-not-disturb mode. Not to be confused with
// DoNotDisturbSetting, which is used to indicate the state of do-not-disturb
// mode.
type DndSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to enable or disable do-not-disturb mode.
	DoNotDisturb *bool `protobuf:"varint,1,opt,name=do_not_disturb,json=doNotDisturb" json:"do_not_disturb,omitempty"`
	// Do not disturb expiration in seconds.
	TimeoutSecs *uint64 `protobuf:"varint,2,opt,name=timeout_secs,json=timeoutSecs" json:"timeout_secs,omitempty"`
}

func (x *DndSetting) Reset() {
	*x = DndSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DndSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DndSetting) ProtoMessage() {}

func (x *DndSetting) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DndSetting.ProtoReflect.Descriptor instead.
func (*DndSetting) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{48}
}

func (x *DndSetting) GetDoNotDisturb() bool {
	if x != nil && x.DoNotDisturb != nil {
		return *x.DoNotDisturb
	}
	return false
}

func (x *DndSetting) GetTimeoutSecs() uint64 {
	if x != nil && x.TimeoutSecs != nil {
		return *x.TimeoutSecs
	}
	return 0
}

type PresenceStateSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeoutSecs *uint64                  `protobuf:"varint,1,opt,name=timeout_secs,json=timeoutSecs" json:"timeout_secs,omitempty"`
	Type        *ClientPresenceStateType `protobuf:"varint,2,opt,name=type,enum=hangouts.ClientPresenceStateType" json:"type,omitempty"`
}

func (x *PresenceStateSetting) Reset() {
	*x = PresenceStateSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceStateSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceStateSetting) ProtoMessage() {}

func (x *PresenceStateSetting) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceStateSetting.ProtoReflect.Descriptor instead.
func (*PresenceStateSetting) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{49}
}

func (x *PresenceStateSetting) GetTimeoutSecs() uint64 {
	if x != nil && x.TimeoutSecs != nil {
		return *x.TimeoutSecs
	}
	return 0
}

func (x *PresenceStateSetting) GetType() ClientPresenceStateType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ClientPresenceStateType_CLIENT_PRESENCE_STATE_UNKNOWN
}

type MoodMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoodContent *MoodContent `protobuf:"bytes,1,opt,name=mood_content,json=moodContent" json:"mood_content,omitempty"`
}

func (x *MoodMessage) Reset() {
	*x = MoodMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoodMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoodMessage) ProtoMessage() {}

func (x *MoodMessage) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoodMessage.ProtoReflect.Descriptor instead.
func (*MoodMessage) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{50}
}

func (x *MoodMessage) GetMoodContent() *MoodContent {
	if x != nil {
		return x.MoodContent
	}
	return nil
}

type MoodContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment []*Segment `protobuf:"bytes,1,rep,name=segment" json:"segment,omitempty"`
}

func (x *MoodContent) Reset() {
	*x = MoodContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoodContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoodContent) ProtoMessage() {}

func (x *MoodContent) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoodContent.ProtoReflect.Descriptor instead.
func (*MoodContent) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{51}
}

func (x *MoodContent) GetSegment() []*Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

// The user's mood message.
type MoodSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoodMessage *MoodMessage `protobuf:"bytes,1,opt,name=mood_message,json=moodMessage" json:"mood_message,omitempty"`
}

func (x *MoodSetting) Reset() {
	*x = MoodSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoodSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoodSetting) ProtoMessage() {}

func (x *MoodSetting) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoodSetting.ProtoReflect.Descriptor instead.
func (*MoodSetting) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{52}
}

func (x *MoodSetting) GetMoodMessage() *MoodMessage {
	if x != nil {
		return x.MoodMessage
	}
	return nil
}

type MoodState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoodSetting *MoodSetting `protobuf:"bytes,4,opt,name=mood_setting,json=moodSetting" json:"mood_setting,omitempty"`
}

func (x *MoodState) Reset() {
	*x = MoodState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoodState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoodState) ProtoMessage() {}

func (x *MoodState) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoodState.ProtoReflect.Descriptor instead.
func (*MoodState) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{53}
}

func (x *MoodState) GetMoodSetting() *MoodSetting {
	if x != nil {
		return x.MoodSetting
	}
	return nil
}

type DeleteAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteActionTimestamp     *uint64     `protobuf:"varint,1,opt,name=delete_action_timestamp,json=deleteActionTimestamp" json:"delete_action_timestamp,omitempty"`
	DeleteUpperBoundTimestamp *uint64     `protobuf:"varint,2,opt,name=delete_upper_bound_timestamp,json=deleteUpperBoundTimestamp" json:"delete_upper_bound_timestamp,omitempty"`
	DeleteType                *DeleteType `protobuf:"varint,3,opt,name=delete_type,json=deleteType,enum=hangouts.DeleteType" json:"delete_type,omitempty"`
}

func (x *DeleteAction) Reset() {
	*x = DeleteAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAction) ProtoMessage() {}

func (x *DeleteAction) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAction.ProtoReflect.Descriptor instead.
func (*DeleteAction) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteAction) GetDeleteActionTimestamp() uint64 {
	if x != nil && x.DeleteActionTimestamp != nil {
		return *x.DeleteActionTimestamp
	}
	return 0
}

func (x *DeleteAction) GetDeleteUpperBoundTimestamp() uint64 {
	if x != nil && x.DeleteUpperBoundTimestamp != nil {
		return *x.DeleteUpperBoundTimestamp
	}
	return 0
}

func (x *DeleteAction) GetDeleteType() DeleteType {
	if x != nil && x.DeleteType != nil {
		return *x.DeleteType
	}
	return DeleteType_DELETE_TYPE_UNKNOWN
}

type InviteeID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GaiaId       *string `protobuf:"bytes,1,opt,name=gaia_id,json=gaiaId" json:"gaia_id,omitempty"`
	FallbackName *string `protobuf:"bytes,4,opt,name=fallback_name,json=fallbackName" json:"fallback_name,omitempty"`
}

func (x *InviteeID) Reset() {
	*x = InviteeID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteeID) ProtoMessage() {}

func (x *InviteeID) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteeID.ProtoReflect.Descriptor instead.
func (*InviteeID) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{55}
}

func (x *InviteeID) GetGaiaId() string {
	if x != nil && x.GaiaId != nil {
		return *x.GaiaId
	}
	return ""
}

func (x *InviteeID) GetFallbackName() string {
	if x != nil && x.FallbackName != nil {
		return *x.FallbackName
	}
	return ""
}

// Describes a user's country.
type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Abbreviated region code (eg. "CA").
	RegionCode *string `protobuf:"bytes,1,opt,name=region_code,json=regionCode" json:"region_code,omitempty"`
	// Country's calling code (eg. "1").
	CountryCode *uint64 `protobuf:"varint,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{56}
}

func (x *Country) GetRegionCode() string {
	if x != nil && x.RegionCode != nil {
		return *x.RegionCode
	}
	return ""
}

func (x *Country) GetCountryCode() uint64 {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return 0
}

// Sound settings in the desktop Hangouts client.
type DesktopSoundSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to play sound for incoming messages.
	DesktopSoundState *SoundState `protobuf:"varint,1,opt,name=desktop_sound_state,json=desktopSoundState,enum=hangouts.SoundState" json:"desktop_sound_state,omitempty"`
	// Whether to ring for incoming calls.
	DesktopRingSoundState *SoundState `protobuf:"varint,2,opt,name=desktop_ring_sound_state,json=desktopRingSoundState,enum=hangouts.SoundState" json:"desktop_ring_sound_state,omitempty"`
}

func (x *DesktopSoundSetting) Reset() {
	*x = DesktopSoundSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesktopSoundSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesktopSoundSetting) ProtoMessage() {}

func (x *DesktopSoundSetting) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesktopSoundSetting.ProtoReflect.Descriptor instead.
func (*DesktopSoundSetting) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{57}
}

func (x *DesktopSoundSetting) GetDesktopSoundState() SoundState {
	if x != nil && x.DesktopSoundState != nil {
		return *x.DesktopSoundState
	}
	return SoundState_SOUND_STATE_UNKNOWN
}

func (x *DesktopSoundSetting) GetDesktopRingSoundState() SoundState {
	if x != nil && x.DesktopRingSoundState != nil {
		return *x.DesktopRingSoundState
	}
	return SoundState_SOUND_STATE_UNKNOWN
}

type PhoneData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone                []*Phone              `protobuf:"bytes,1,rep,name=phone" json:"phone,omitempty"`
	CallerIdSettingsMask *CallerIdSettingsMask `protobuf:"varint,3,opt,name=caller_id_settings_mask,json=callerIdSettingsMask,enum=hangouts.CallerIdSettingsMask" json:"caller_id_settings_mask,omitempty"`
}

func (x *PhoneData) Reset() {
	*x = PhoneData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneData) ProtoMessage() {}

func (x *PhoneData) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneData.ProtoReflect.Descriptor instead.
func (*PhoneData) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{58}
}

func (x *PhoneData) GetPhone() []*Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *PhoneData) GetCallerIdSettingsMask() CallerIdSettingsMask {
	if x != nil && x.CallerIdSettingsMask != nil {
		return *x.CallerIdSettingsMask
	}
	return CallerIdSettingsMask_CALLER_ID_SETTINGS_MASK_UNKNOWN
}

type Phone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber           *PhoneNumber                `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	GoogleVoice           *bool                       `protobuf:"varint,2,opt,name=google_voice,json=googleVoice" json:"google_voice,omitempty"`
	VerificationStatus    *PhoneVerificationStatus    `protobuf:"varint,3,opt,name=verification_status,json=verificationStatus,enum=hangouts.PhoneVerificationStatus" json:"verification_status,omitempty"`
	Discoverable          *bool                       `protobuf:"varint,4,opt,name=discoverable" json:"discoverable,omitempty"`
	DiscoverabilityStatus *PhoneDiscoverabilityStatus `protobuf:"varint,5,opt,name=discoverability_status,json=discoverabilityStatus,enum=hangouts.PhoneDiscoverabilityStatus" json:"discoverability_status,omitempty"`
	Primary               *bool                       `protobuf:"varint,6,opt,name=primary" json:"primary,omitempty"`
}

func (x *Phone) Reset() {
	*x = Phone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Phone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Phone) ProtoMessage() {}

func (x *Phone) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Phone.ProtoReflect.Descriptor instead.
func (*Phone) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{59}
}

func (x *Phone) GetPhoneNumber() *PhoneNumber {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *Phone) GetGoogleVoice() bool {
	if x != nil && x.GoogleVoice != nil {
		return *x.GoogleVoice
	}
	return false
}

func (x *Phone) GetVerificationStatus() PhoneVerificationStatus {
	if x != nil && x.VerificationStatus != nil {
		return *x.VerificationStatus
	}
	return PhoneVerificationStatus_PHONE_VERIFICATION_STATUS_UNKNOWN
}

func (x *Phone) GetDiscoverable() bool {
	if x != nil && x.Discoverable != nil {
		return *x.Discoverable
	}
	return false
}

func (x *Phone) GetDiscoverabilityStatus() PhoneDiscoverabilityStatus {
	if x != nil && x.DiscoverabilityStatus != nil {
		return *x.DiscoverabilityStatus
	}
	return PhoneDiscoverabilityStatus_PHONE_DISCOVERABILITY_STATUS_UNKNOWN
}

func (x *Phone) GetPrimary() bool {
	if x != nil && x.Primary != nil {
		return *x.Primary
	}
	return false
}

type I18NData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NationalNumber      *string                `protobuf:"bytes,1,opt,name=national_number,json=nationalNumber" json:"national_number,omitempty"`
	InternationalNumber *string                `protobuf:"bytes,2,opt,name=international_number,json=internationalNumber" json:"international_number,omitempty"`
	CountryCode         *uint64                `protobuf:"varint,3,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	RegionCode          *string                `protobuf:"bytes,4,opt,name=region_code,json=regionCode" json:"region_code,omitempty"`
	IsValid             *bool                  `protobuf:"varint,5,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	ValidationResult    *PhoneValidationResult `protobuf:"varint,6,opt,name=validation_result,json=validationResult,enum=hangouts.PhoneValidationResult" json:"validation_result,omitempty"`
}

func (x *I18NData) Reset() {
	*x = I18NData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *I18NData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I18NData) ProtoMessage() {}

func (x *I18NData) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I18NData.ProtoReflect.Descriptor instead.
func (*I18NData) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{60}
}

func (x *I18NData) GetNationalNumber() string {
	if x != nil && x.NationalNumber != nil {
		return *x.NationalNumber
	}
	return ""
}

func (x *I18NData) GetInternationalNumber() string {
	if x != nil && x.InternationalNumber != nil {
		return *x.InternationalNumber
	}
	return ""
}

func (x *I18NData) GetCountryCode() uint64 {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return 0
}

func (x *I18NData) GetRegionCode() string {
	if x != nil && x.RegionCode != nil {
		return *x.RegionCode
	}
	return ""
}

func (x *I18NData) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *I18NData) GetValidationResult() PhoneValidationResult {
	if x != nil && x.ValidationResult != nil {
		return *x.ValidationResult
	}
	return PhoneValidationResult_PHONE_VALIDATION_RESULT_IS_POSSIBLE
}

type PhoneNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Phone number as string (eg. "+15551234567").
	E164     *string   `protobuf:"bytes,1,opt,name=e164" json:"e164,omitempty"`
	I18NData *I18NData `protobuf:"bytes,2,opt,name=i18n_data,json=i18nData" json:"i18n_data,omitempty"`
}

func (x *PhoneNumber) Reset() {
	*x = PhoneNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneNumber) ProtoMessage() {}

func (x *PhoneNumber) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneNumber.ProtoReflect.Descriptor instead.
func (*PhoneNumber) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{61}
}

func (x *PhoneNumber) GetE164() string {
	if x != nil && x.E164 != nil {
		return *x.E164
	}
	return ""
}

func (x *PhoneNumber) GetI18NData() *I18NData {
	if x != nil {
		return x.I18NData
	}
	return nil
}

type SuggestedContactGroupHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of results to return from this group.
	MaxResults *uint64 `protobuf:"varint,1,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	// An optional 4-byte hash. If this matches the server's hash, no results
	// will be sent.
	Hash []byte `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
}

func (x *SuggestedContactGroupHash) Reset() {
	*x = SuggestedContactGroupHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedContactGroupHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedContactGroupHash) ProtoMessage() {}

func (x *SuggestedContactGroupHash) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedContactGroupHash.ProtoReflect.Descriptor instead.
func (*SuggestedContactGroupHash) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{62}
}

func (x *SuggestedContactGroupHash) GetMaxResults() uint64 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *SuggestedContactGroupHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type SuggestedContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contact's entity.
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
	// The contact's invitation status.
	InvitationStatus *InvitationStatus `protobuf:"varint,2,opt,name=invitation_status,json=invitationStatus,enum=hangouts.InvitationStatus" json:"invitation_status,omitempty"`
}

func (x *SuggestedContact) Reset() {
	*x = SuggestedContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedContact) ProtoMessage() {}

func (x *SuggestedContact) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedContact.ProtoReflect.Descriptor instead.
func (*SuggestedContact) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{63}
}

func (x *SuggestedContact) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SuggestedContact) GetInvitationStatus() InvitationStatus {
	if x != nil && x.InvitationStatus != nil {
		return *x.InvitationStatus
	}
	return InvitationStatus_INVITATION_STATUS_UNKNOWN
}

type SuggestedContactGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the request's hash matched and no contacts will be included.
	HashMatched *bool `protobuf:"varint,1,opt,name=hash_matched,json=hashMatched" json:"hash_matched,omitempty"`
	// A 4-byte hash which can be used in subsequent requests.
	Hash []byte `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	// List of contacts in this group.
	Contact []*SuggestedContact `protobuf:"bytes,3,rep,name=contact" json:"contact,omitempty"`
}

func (x *SuggestedContactGroup) Reset() {
	*x = SuggestedContactGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedContactGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedContactGroup) ProtoMessage() {}

func (x *SuggestedContactGroup) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedContactGroup.ProtoReflect.Descriptor instead.
func (*SuggestedContactGroup) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{64}
}

func (x *SuggestedContactGroup) GetHashMatched() bool {
	if x != nil && x.HashMatched != nil {
		return *x.HashMatched
	}
	return false
}

func (x *SuggestedContactGroup) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *SuggestedContactGroup) GetContact() []*SuggestedContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type GroupLinkSharingModification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewStatus *GroupLinkSharingStatus `protobuf:"varint,1,opt,name=new_status,json=newStatus,enum=hangouts.GroupLinkSharingStatus" json:"new_status,omitempty"`
}

func (x *GroupLinkSharingModification) Reset() {
	*x = GroupLinkSharingModification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLinkSharingModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLinkSharingModification) ProtoMessage() {}

func (x *GroupLinkSharingModification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLinkSharingModification.ProtoReflect.Descriptor instead.
func (*GroupLinkSharingModification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{65}
}

func (x *GroupLinkSharingModification) GetNewStatus() GroupLinkSharingStatus {
	if x != nil && x.NewStatus != nil {
		return *x.NewStatus
	}
	return GroupLinkSharingStatus_GROUP_LINK_SHARING_STATUS_UNKNOWN
}

// Pushed from the server to the client to notify it of state changes. Includes
// exactly one type of notification, and optionally updates the attributes of a
// conversation.
type StateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateUpdateHeader *StateUpdateHeader `protobuf:"bytes,1,opt,name=state_update_header,json=stateUpdateHeader" json:"state_update_header,omitempty"`
	// If set, includes conversation attributes that have been updated by the
	// notification.
	Conversation *Conversation `protobuf:"bytes,13,opt,name=conversation" json:"conversation,omitempty"`
	// Types that are assignable to StateUpdate:
	//	*StateUpdate_ConversationNotification
	//	*StateUpdate_EventNotification
	//	*StateUpdate_FocusNotification
	//	*StateUpdate_TypingNotification
	//	*StateUpdate_NotificationLevelNotification
	//	*StateUpdate_ReplyToInviteNotification
	//	*StateUpdate_WatermarkNotification
	//	*StateUpdate_ViewModification
	//	*StateUpdate_EasterEggNotification
	//	*StateUpdate_SelfPresenceNotification
	//	*StateUpdate_DeleteNotification
	//	*StateUpdate_PresenceNotification
	//	*StateUpdate_BlockNotification
	//	*StateUpdate_NotificationSettingNotification
	//	*StateUpdate_RichPresenceEnabledStateNotification
	StateUpdate isStateUpdate_StateUpdate `protobuf_oneof:"state_update"`
}

func (x *StateUpdate) Reset() {
	*x = StateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateUpdate) ProtoMessage() {}

func (x *StateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateUpdate.ProtoReflect.Descriptor instead.
func (*StateUpdate) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{66}
}

func (x *StateUpdate) GetStateUpdateHeader() *StateUpdateHeader {
	if x != nil {
		return x.StateUpdateHeader
	}
	return nil
}

func (x *StateUpdate) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (m *StateUpdate) GetStateUpdate() isStateUpdate_StateUpdate {
	if m != nil {
		return m.StateUpdate
	}
	return nil
}

func (x *StateUpdate) GetConversationNotification() *ConversationNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_ConversationNotification); ok {
		return x.ConversationNotification
	}
	return nil
}

func (x *StateUpdate) GetEventNotification() *EventNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_EventNotification); ok {
		return x.EventNotification
	}
	return nil
}

func (x *StateUpdate) GetFocusNotification() *SetFocusNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_FocusNotification); ok {
		return x.FocusNotification
	}
	return nil
}

func (x *StateUpdate) GetTypingNotification() *SetTypingNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_TypingNotification); ok {
		return x.TypingNotification
	}
	return nil
}

func (x *StateUpdate) GetNotificationLevelNotification() *SetConversationNotificationLevelNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_NotificationLevelNotification); ok {
		return x.NotificationLevelNotification
	}
	return nil
}

func (x *StateUpdate) GetReplyToInviteNotification() *ReplyToInviteNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_ReplyToInviteNotification); ok {
		return x.ReplyToInviteNotification
	}
	return nil
}

func (x *StateUpdate) GetWatermarkNotification() *WatermarkNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_WatermarkNotification); ok {
		return x.WatermarkNotification
	}
	return nil
}

func (x *StateUpdate) GetViewModification() *ConversationViewModification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_ViewModification); ok {
		return x.ViewModification
	}
	return nil
}

func (x *StateUpdate) GetEasterEggNotification() *EasterEggNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_EasterEggNotification); ok {
		return x.EasterEggNotification
	}
	return nil
}

func (x *StateUpdate) GetSelfPresenceNotification() *SelfPresenceNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_SelfPresenceNotification); ok {
		return x.SelfPresenceNotification
	}
	return nil
}

func (x *StateUpdate) GetDeleteNotification() *DeleteActionNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_DeleteNotification); ok {
		return x.DeleteNotification
	}
	return nil
}

func (x *StateUpdate) GetPresenceNotification() *PresenceNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_PresenceNotification); ok {
		return x.PresenceNotification
	}
	return nil
}

func (x *StateUpdate) GetBlockNotification() *BlockNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_BlockNotification); ok {
		return x.BlockNotification
	}
	return nil
}

func (x *StateUpdate) GetNotificationSettingNotification() *SetNotificationSettingNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_NotificationSettingNotification); ok {
		return x.NotificationSettingNotification
	}
	return nil
}

func (x *StateUpdate) GetRichPresenceEnabledStateNotification() *RichPresenceEnabledStateNotification {
	if x, ok := x.GetStateUpdate().(*StateUpdate_RichPresenceEnabledStateNotification); ok {
		return x.RichPresenceEnabledStateNotification
	}
	return nil
}

type isStateUpdate_StateUpdate interface {
	isStateUpdate_StateUpdate()
}

type StateUpdate_ConversationNotification struct {
	ConversationNotification *ConversationNotification `protobuf:"bytes,2,opt,name=conversation_notification,json=conversationNotification,oneof"`
}

type StateUpdate_EventNotification struct {
	EventNotification *EventNotification `protobuf:"bytes,3,opt,name=event_notification,json=eventNotification,oneof"`
}

type StateUpdate_FocusNotification struct {
	FocusNotification *SetFocusNotification `protobuf:"bytes,4,opt,name=focus_notification,json=focusNotification,oneof"`
}

type StateUpdate_TypingNotification struct {
	TypingNotification *SetTypingNotification `protobuf:"bytes,5,opt,name=typing_notification,json=typingNotification,oneof"`
}

type StateUpdate_NotificationLevelNotification struct {
	NotificationLevelNotification *SetConversationNotificationLevelNotification `protobuf:"bytes,6,opt,name=notification_level_notification,json=notificationLevelNotification,oneof"`
}

type StateUpdate_ReplyToInviteNotification struct {
	ReplyToInviteNotification *ReplyToInviteNotification `protobuf:"bytes,7,opt,name=reply_to_invite_notification,json=replyToInviteNotification,oneof"`
}

type StateUpdate_WatermarkNotification struct {
	WatermarkNotification *WatermarkNotification `protobuf:"bytes,8,opt,name=watermark_notification,json=watermarkNotification,oneof"`
}

type StateUpdate_ViewModification struct {
	ViewModification *ConversationViewModification `protobuf:"bytes,11,opt,name=view_modification,json=viewModification,oneof"`
}

type StateUpdate_EasterEggNotification struct {
	EasterEggNotification *EasterEggNotification `protobuf:"bytes,12,opt,name=easter_egg_notification,json=easterEggNotification,oneof"`
}

type StateUpdate_SelfPresenceNotification struct {
	SelfPresenceNotification *SelfPresenceNotification `protobuf:"bytes,14,opt,name=self_presence_notification,json=selfPresenceNotification,oneof"`
}

type StateUpdate_DeleteNotification struct {
	DeleteNotification *DeleteActionNotification `protobuf:"bytes,15,opt,name=delete_notification,json=deleteNotification,oneof"`
}

type StateUpdate_PresenceNotification struct {
	PresenceNotification *PresenceNotification `protobuf:"bytes,16,opt,name=presence_notification,json=presenceNotification,oneof"`
}

type StateUpdate_BlockNotification struct {
	BlockNotification *BlockNotification `protobuf:"bytes,17,opt,name=block_notification,json=blockNotification,oneof"`
}

type StateUpdate_NotificationSettingNotification struct {
	NotificationSettingNotification *SetNotificationSettingNotification `protobuf:"bytes,19,opt,name=notification_setting_notification,json=notificationSettingNotification,oneof"`
}

type StateUpdate_RichPresenceEnabledStateNotification struct {
	RichPresenceEnabledStateNotification *RichPresenceEnabledStateNotification `protobuf:"bytes,20,opt,name=rich_presence_enabled_state_notification,json=richPresenceEnabledStateNotification,oneof"`
}

func (*StateUpdate_ConversationNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_EventNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_FocusNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_TypingNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_NotificationLevelNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_ReplyToInviteNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_WatermarkNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_ViewModification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_EasterEggNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_SelfPresenceNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_DeleteNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_PresenceNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_BlockNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_NotificationSettingNotification) isStateUpdate_StateUpdate() {}

func (*StateUpdate_RichPresenceEnabledStateNotification) isStateUpdate_StateUpdate() {}

// Header for StateUpdate messages.
type StateUpdateHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveClientState    *ActiveClientState    `protobuf:"varint,1,opt,name=active_client_state,json=activeClientState,enum=hangouts.ActiveClientState" json:"active_client_state,omitempty"`
	RequestTraceId       *string               `protobuf:"bytes,3,opt,name=request_trace_id,json=requestTraceId" json:"request_trace_id,omitempty"`
	NotificationSettings *NotificationSettings `protobuf:"bytes,4,opt,name=notification_settings,json=notificationSettings" json:"notification_settings,omitempty"`
	CurrentServerTime    *uint64               `protobuf:"varint,5,opt,name=current_server_time,json=currentServerTime" json:"current_server_time,omitempty"`
}

func (x *StateUpdateHeader) Reset() {
	*x = StateUpdateHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateUpdateHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateUpdateHeader) ProtoMessage() {}

func (x *StateUpdateHeader) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateUpdateHeader.ProtoReflect.Descriptor instead.
func (*StateUpdateHeader) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{67}
}

func (x *StateUpdateHeader) GetActiveClientState() ActiveClientState {
	if x != nil && x.ActiveClientState != nil {
		return *x.ActiveClientState
	}
	return ActiveClientState_ACTIVE_CLIENT_STATE_NO_ACTIVE
}

func (x *StateUpdateHeader) GetRequestTraceId() string {
	if x != nil && x.RequestTraceId != nil {
		return *x.RequestTraceId
	}
	return ""
}

func (x *StateUpdateHeader) GetNotificationSettings() *NotificationSettings {
	if x != nil {
		return x.NotificationSettings
	}
	return nil
}

func (x *StateUpdateHeader) GetCurrentServerTime() uint64 {
	if x != nil && x.CurrentServerTime != nil {
		return *x.CurrentServerTime
	}
	return 0
}

// List of StateUpdate messages to allow pushing multiple notifications from
// the server to the client simultaneously.
type BatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateUpdate []*StateUpdate `protobuf:"bytes,1,rep,name=state_update,json=stateUpdate" json:"state_update,omitempty"`
}

func (x *BatchUpdate) Reset() {
	*x = BatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdate) ProtoMessage() {}

func (x *BatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdate.ProtoReflect.Descriptor instead.
func (*BatchUpdate) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{68}
}

func (x *BatchUpdate) GetStateUpdate() []*StateUpdate {
	if x != nil {
		return x.StateUpdate
	}
	return nil
}

type ConversationNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversation *Conversation `protobuf:"bytes,1,opt,name=conversation" json:"conversation,omitempty"`
}

func (x *ConversationNotification) Reset() {
	*x = ConversationNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationNotification) ProtoMessage() {}

func (x *ConversationNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationNotification.ProtoReflect.Descriptor instead.
func (*ConversationNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{69}
}

func (x *ConversationNotification) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

type EventNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (x *EventNotification) Reset() {
	*x = EventNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNotification) ProtoMessage() {}

func (x *EventNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNotification.ProtoReflect.Descriptor instead.
func (*EventNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{70}
}

func (x *EventNotification) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type SetFocusNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId *ConversationId `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	SenderId       *ParticipantId  `protobuf:"bytes,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	Timestamp      *uint64         `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Type           *FocusType      `protobuf:"varint,4,opt,name=type,enum=hangouts.FocusType" json:"type,omitempty"`
	Device         *FocusDevice    `protobuf:"varint,5,opt,name=device,enum=hangouts.FocusDevice" json:"device,omitempty"`
}

func (x *SetFocusNotification) Reset() {
	*x = SetFocusNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFocusNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFocusNotification) ProtoMessage() {}

func (x *SetFocusNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFocusNotification.ProtoReflect.Descriptor instead.
func (*SetFocusNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{71}
}

func (x *SetFocusNotification) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *SetFocusNotification) GetSenderId() *ParticipantId {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *SetFocusNotification) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *SetFocusNotification) GetType() FocusType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FocusType_FOCUS_TYPE_UNKNOWN
}

func (x *SetFocusNotification) GetDevice() FocusDevice {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return FocusDevice_FOCUS_DEVICE_UNSPECIFIED
}

type SetTypingNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId *ConversationId `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	SenderId       *ParticipantId  `protobuf:"bytes,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	Timestamp      *uint64         `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Type           *TypingType     `protobuf:"varint,4,opt,name=type,enum=hangouts.TypingType" json:"type,omitempty"`
}

func (x *SetTypingNotification) Reset() {
	*x = SetTypingNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTypingNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTypingNotification) ProtoMessage() {}

func (x *SetTypingNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTypingNotification.ProtoReflect.Descriptor instead.
func (*SetTypingNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{72}
}

func (x *SetTypingNotification) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *SetTypingNotification) GetSenderId() *ParticipantId {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *SetTypingNotification) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *SetTypingNotification) GetType() TypingType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TypingType_TYPING_TYPE_UNKNOWN
}

type SetConversationNotificationLevelNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId *ConversationId    `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Level          *NotificationLevel `protobuf:"varint,2,opt,name=level,enum=hangouts.NotificationLevel" json:"level,omitempty"`
	Timestamp      *uint64            `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *SetConversationNotificationLevelNotification) Reset() {
	*x = SetConversationNotificationLevelNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationNotificationLevelNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationNotificationLevelNotification) ProtoMessage() {}

func (x *SetConversationNotificationLevelNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationNotificationLevelNotification.ProtoReflect.Descriptor instead.
func (*SetConversationNotificationLevelNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{73}
}

func (x *SetConversationNotificationLevelNotification) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *SetConversationNotificationLevelNotification) GetLevel() NotificationLevel {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return NotificationLevel_NOTIFICATION_LEVEL_UNKNOWN
}

func (x *SetConversationNotificationLevelNotification) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type ReplyToInviteNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId *ConversationId    `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Type           *ReplyToInviteType `protobuf:"varint,2,opt,name=type,enum=hangouts.ReplyToInviteType" json:"type,omitempty"`
}

func (x *ReplyToInviteNotification) Reset() {
	*x = ReplyToInviteNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyToInviteNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyToInviteNotification) ProtoMessage() {}

func (x *ReplyToInviteNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyToInviteNotification.ProtoReflect.Descriptor instead.
func (*ReplyToInviteNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{74}
}

func (x *ReplyToInviteNotification) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *ReplyToInviteNotification) GetType() ReplyToInviteType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ReplyToInviteType_REPLY_TO_INVITE_TYPE_UNKNOWN
}

type WatermarkNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId            *ParticipantId  `protobuf:"bytes,1,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	ConversationId      *ConversationId `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	LatestReadTimestamp *uint64         `protobuf:"varint,3,opt,name=latest_read_timestamp,json=latestReadTimestamp" json:"latest_read_timestamp,omitempty"`
}

func (x *WatermarkNotification) Reset() {
	*x = WatermarkNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatermarkNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatermarkNotification) ProtoMessage() {}

func (x *WatermarkNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatermarkNotification.ProtoReflect.Descriptor instead.
func (*WatermarkNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{75}
}

func (x *WatermarkNotification) GetSenderId() *ParticipantId {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *WatermarkNotification) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *WatermarkNotification) GetLatestReadTimestamp() uint64 {
	if x != nil && x.LatestReadTimestamp != nil {
		return *x.LatestReadTimestamp
	}
	return 0
}

type ConversationViewModification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId *ConversationId   `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	OldView        *ConversationView `protobuf:"varint,2,opt,name=old_view,json=oldView,enum=hangouts.ConversationView" json:"old_view,omitempty"`
	NewView        *ConversationView `protobuf:"varint,3,opt,name=new_view,json=newView,enum=hangouts.ConversationView" json:"new_view,omitempty"`
}

func (x *ConversationViewModification) Reset() {
	*x = ConversationViewModification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationViewModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationViewModification) ProtoMessage() {}

func (x *ConversationViewModification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationViewModification.ProtoReflect.Descriptor instead.
func (*ConversationViewModification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{76}
}

func (x *ConversationViewModification) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *ConversationViewModification) GetOldView() ConversationView {
	if x != nil && x.OldView != nil {
		return *x.OldView
	}
	return ConversationView_CONVERSATION_VIEW_UNKNOWN
}

func (x *ConversationViewModification) GetNewView() ConversationView {
	if x != nil && x.NewView != nil {
		return *x.NewView
	}
	return ConversationView_CONVERSATION_VIEW_UNKNOWN
}

type EasterEggNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId       *ParticipantId  `protobuf:"bytes,1,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	ConversationId *ConversationId `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	EasterEgg      *EasterEgg      `protobuf:"bytes,3,opt,name=easter_egg,json=easterEgg" json:"easter_egg,omitempty"`
}

func (x *EasterEggNotification) Reset() {
	*x = EasterEggNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasterEggNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasterEggNotification) ProtoMessage() {}

func (x *EasterEggNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasterEggNotification.ProtoReflect.Descriptor instead.
func (*EasterEggNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{77}
}

func (x *EasterEggNotification) GetSenderId() *ParticipantId {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *EasterEggNotification) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *EasterEggNotification) GetEasterEgg() *EasterEgg {
	if x != nil {
		return x.EasterEgg
	}
	return nil
}

// Notifies the status of other clients and mood.
type SelfPresenceNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientPresenceState *ClientPresenceState `protobuf:"bytes,1,opt,name=client_presence_state,json=clientPresenceState" json:"client_presence_state,omitempty"`
	DoNotDisturbSetting *DoNotDisturbSetting `protobuf:"bytes,3,opt,name=do_not_disturb_setting,json=doNotDisturbSetting" json:"do_not_disturb_setting,omitempty"`
	DesktopOffSetting   *DesktopOffSetting   `protobuf:"bytes,4,opt,name=desktop_off_setting,json=desktopOffSetting" json:"desktop_off_setting,omitempty"`
	DesktopOffState     *DesktopOffState     `protobuf:"bytes,5,opt,name=desktop_off_state,json=desktopOffState" json:"desktop_off_state,omitempty"`
	MoodState           *MoodState           `protobuf:"bytes,6,opt,name=mood_state,json=moodState" json:"mood_state,omitempty"`
}

func (x *SelfPresenceNotification) Reset() {
	*x = SelfPresenceNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfPresenceNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfPresenceNotification) ProtoMessage() {}

func (x *SelfPresenceNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfPresenceNotification.ProtoReflect.Descriptor instead.
func (*SelfPresenceNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{78}
}

func (x *SelfPresenceNotification) GetClientPresenceState() *ClientPresenceState {
	if x != nil {
		return x.ClientPresenceState
	}
	return nil
}

func (x *SelfPresenceNotification) GetDoNotDisturbSetting() *DoNotDisturbSetting {
	if x != nil {
		return x.DoNotDisturbSetting
	}
	return nil
}

func (x *SelfPresenceNotification) GetDesktopOffSetting() *DesktopOffSetting {
	if x != nil {
		return x.DesktopOffSetting
	}
	return nil
}

func (x *SelfPresenceNotification) GetDesktopOffState() *DesktopOffState {
	if x != nil {
		return x.DesktopOffState
	}
	return nil
}

func (x *SelfPresenceNotification) GetMoodState() *MoodState {
	if x != nil {
		return x.MoodState
	}
	return nil
}

type DeleteActionNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId *ConversationId `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	DeleteAction   *DeleteAction   `protobuf:"bytes,2,opt,name=delete_action,json=deleteAction" json:"delete_action,omitempty"`
}

func (x *DeleteActionNotification) Reset() {
	*x = DeleteActionNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteActionNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteActionNotification) ProtoMessage() {}

func (x *DeleteActionNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteActionNotification.ProtoReflect.Descriptor instead.
func (*DeleteActionNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{79}
}

func (x *DeleteActionNotification) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *DeleteActionNotification) GetDeleteAction() *DeleteAction {
	if x != nil {
		return x.DeleteAction
	}
	return nil
}

type PresenceNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presence []*PresenceResult `protobuf:"bytes,1,rep,name=presence" json:"presence,omitempty"`
}

func (x *PresenceNotification) Reset() {
	*x = PresenceNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceNotification) ProtoMessage() {}

func (x *PresenceNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceNotification.ProtoReflect.Descriptor instead.
func (*PresenceNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{80}
}

func (x *PresenceNotification) GetPresence() []*PresenceResult {
	if x != nil {
		return x.Presence
	}
	return nil
}

type BlockNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockStateChange []*BlockStateChange `protobuf:"bytes,1,rep,name=block_state_change,json=blockStateChange" json:"block_state_change,omitempty"`
}

func (x *BlockNotification) Reset() {
	*x = BlockNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockNotification) ProtoMessage() {}

func (x *BlockNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockNotification.ProtoReflect.Descriptor instead.
func (*BlockNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{81}
}

func (x *BlockNotification) GetBlockStateChange() []*BlockStateChange {
	if x != nil {
		return x.BlockStateChange
	}
	return nil
}

type SetNotificationSettingNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigurationBit    []*ConfigurationBit  `protobuf:"bytes,1,rep,name=configuration_bit,json=configurationBit" json:"configuration_bit,omitempty"`
	DesktopSoundSetting *DesktopSoundSetting `protobuf:"bytes,2,opt,name=desktop_sound_setting,json=desktopSoundSetting" json:"desktop_sound_setting,omitempty"`
}

func (x *SetNotificationSettingNotification) Reset() {
	*x = SetNotificationSettingNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNotificationSettingNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNotificationSettingNotification) ProtoMessage() {}

func (x *SetNotificationSettingNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNotificationSettingNotification.ProtoReflect.Descriptor instead.
func (*SetNotificationSettingNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{82}
}

func (x *SetNotificationSettingNotification) GetConfigurationBit() []*ConfigurationBit {
	if x != nil {
		return x.ConfigurationBit
	}
	return nil
}

func (x *SetNotificationSettingNotification) GetDesktopSoundSetting() *DesktopSoundSetting {
	if x != nil {
		return x.DesktopSoundSetting
	}
	return nil
}

type RichPresenceEnabledStateNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichPresenceEnabledState []*RichPresenceEnabledState `protobuf:"bytes,1,rep,name=rich_presence_enabled_state,json=richPresenceEnabledState" json:"rich_presence_enabled_state,omitempty"`
}

func (x *RichPresenceEnabledStateNotification) Reset() {
	*x = RichPresenceEnabledStateNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichPresenceEnabledStateNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichPresenceEnabledStateNotification) ProtoMessage() {}

func (x *RichPresenceEnabledStateNotification) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichPresenceEnabledStateNotification.ProtoReflect.Descriptor instead.
func (*RichPresenceEnabledStateNotification) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{83}
}

func (x *RichPresenceEnabledStateNotification) GetRichPresenceEnabledState() []*RichPresenceEnabledState {
	if x != nil {
		return x.RichPresenceEnabledState
	}
	return nil
}

type ConversationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId *ConversationId `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
}

func (x *ConversationSpec) Reset() {
	*x = ConversationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationSpec) ProtoMessage() {}

func (x *ConversationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationSpec.ProtoReflect.Descriptor instead.
func (*ConversationSpec) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{84}
}

func (x *ConversationSpec) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

type OffnetworkAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *OffnetworkAddressType `protobuf:"varint,1,opt,name=type,enum=hangouts.OffnetworkAddressType" json:"type,omitempty"`
	Email *string                `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
}

func (x *OffnetworkAddress) Reset() {
	*x = OffnetworkAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffnetworkAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffnetworkAddress) ProtoMessage() {}

func (x *OffnetworkAddress) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffnetworkAddress.ProtoReflect.Descriptor instead.
func (*OffnetworkAddress) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{85}
}

func (x *OffnetworkAddress) GetType() OffnetworkAddressType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return OffnetworkAddressType_OFFNETWORK_ADDRESS_TYPE_UNKNOWN
}

func (x *OffnetworkAddress) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

type EntityResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LookupSpec *EntityLookupSpec `protobuf:"bytes,1,opt,name=lookup_spec,json=lookupSpec" json:"lookup_spec,omitempty"`
	Entity     []*Entity         `protobuf:"bytes,2,rep,name=entity" json:"entity,omitempty"`
}

func (x *EntityResult) Reset() {
	*x = EntityResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityResult) ProtoMessage() {}

func (x *EntityResult) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityResult.ProtoReflect.Descriptor instead.
func (*EntityResult) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{86}
}

func (x *EntityResult) GetLookupSpec() *EntityLookupSpec {
	if x != nil {
		return x.LookupSpec
	}
	return nil
}

func (x *EntityResult) GetEntity() []*Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

type AddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader      *RequestHeader      `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	InviteeId          []*InviteeID        `protobuf:"bytes,3,rep,name=invitee_id,json=inviteeId" json:"invitee_id,omitempty"`
	EventRequestHeader *EventRequestHeader `protobuf:"bytes,5,opt,name=event_request_header,json=eventRequestHeader" json:"event_request_header,omitempty"`
}

func (x *AddUserRequest) Reset() {
	*x = AddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserRequest) ProtoMessage() {}

func (x *AddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserRequest.ProtoReflect.Descriptor instead.
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{87}
}

func (x *AddUserRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *AddUserRequest) GetInviteeId() []*InviteeID {
	if x != nil {
		return x.InviteeId
	}
	return nil
}

func (x *AddUserRequest) GetEventRequestHeader() *EventRequestHeader {
	if x != nil {
		return x.EventRequestHeader
	}
	return nil
}

type AddUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	CreatedEvent   *Event          `protobuf:"bytes,5,opt,name=created_event,json=createdEvent" json:"created_event,omitempty"`
}

func (x *AddUserResponse) Reset() {
	*x = AddUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserResponse) ProtoMessage() {}

func (x *AddUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserResponse.ProtoReflect.Descriptor instead.
func (*AddUserResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{88}
}

func (x *AddUserResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *AddUserResponse) GetCreatedEvent() *Event {
	if x != nil {
		return x.CreatedEvent
	}
	return nil
}

type CreateConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader     *RequestHeader    `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	Type              *ConversationType `protobuf:"varint,2,opt,name=type,enum=hangouts.ConversationType" json:"type,omitempty"`
	ClientGeneratedId *uint64           `protobuf:"varint,3,opt,name=client_generated_id,json=clientGeneratedId" json:"client_generated_id,omitempty"`
	Name              *string           `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	InviteeId         []*InviteeID      `protobuf:"bytes,5,rep,name=invitee_id,json=inviteeId" json:"invitee_id,omitempty"`
}

func (x *CreateConversationRequest) Reset() {
	*x = CreateConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversationRequest) ProtoMessage() {}

func (x *CreateConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversationRequest.ProtoReflect.Descriptor instead.
func (*CreateConversationRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{89}
}

func (x *CreateConversationRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *CreateConversationRequest) GetType() ConversationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ConversationType_CONVERSATION_TYPE_UNKNOWN
}

func (x *CreateConversationRequest) GetClientGeneratedId() uint64 {
	if x != nil && x.ClientGeneratedId != nil {
		return *x.ClientGeneratedId
	}
	return 0
}

func (x *CreateConversationRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateConversationRequest) GetInviteeId() []*InviteeID {
	if x != nil {
		return x.InviteeId
	}
	return nil
}

type CreateConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader         *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	Conversation           *Conversation   `protobuf:"bytes,2,opt,name=conversation" json:"conversation,omitempty"`
	NewConversationCreated *bool           `protobuf:"varint,7,opt,name=new_conversation_created,json=newConversationCreated" json:"new_conversation_created,omitempty"`
}

func (x *CreateConversationResponse) Reset() {
	*x = CreateConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversationResponse) ProtoMessage() {}

func (x *CreateConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversationResponse.ProtoReflect.Descriptor instead.
func (*CreateConversationResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{90}
}

func (x *CreateConversationResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *CreateConversationResponse) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *CreateConversationResponse) GetNewConversationCreated() bool {
	if x != nil && x.NewConversationCreated != nil {
		return *x.NewConversationCreated
	}
	return false
}

type DeleteConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader             *RequestHeader  `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	ConversationId            *ConversationId `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	DeleteUpperBoundTimestamp *uint64         `protobuf:"varint,3,opt,name=delete_upper_bound_timestamp,json=deleteUpperBoundTimestamp" json:"delete_upper_bound_timestamp,omitempty"`
}

func (x *DeleteConversationRequest) Reset() {
	*x = DeleteConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConversationRequest) ProtoMessage() {}

func (x *DeleteConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConversationRequest.ProtoReflect.Descriptor instead.
func (*DeleteConversationRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{91}
}

func (x *DeleteConversationRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *DeleteConversationRequest) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *DeleteConversationRequest) GetDeleteUpperBoundTimestamp() uint64 {
	if x != nil && x.DeleteUpperBoundTimestamp != nil {
		return *x.DeleteUpperBoundTimestamp
	}
	return 0
}

type DeleteConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	DeleteAction   *DeleteAction   `protobuf:"bytes,2,opt,name=delete_action,json=deleteAction" json:"delete_action,omitempty"`
}

func (x *DeleteConversationResponse) Reset() {
	*x = DeleteConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConversationResponse) ProtoMessage() {}

func (x *DeleteConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConversationResponse.ProtoReflect.Descriptor instead.
func (*DeleteConversationResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{92}
}

func (x *DeleteConversationResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *DeleteConversationResponse) GetDeleteAction() *DeleteAction {
	if x != nil {
		return x.DeleteAction
	}
	return nil
}

type EasterEggRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader  *RequestHeader  `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	ConversationId *ConversationId `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	EasterEgg      *EasterEgg      `protobuf:"bytes,3,opt,name=easter_egg,json=easterEgg" json:"easter_egg,omitempty"`
}

func (x *EasterEggRequest) Reset() {
	*x = EasterEggRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasterEggRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasterEggRequest) ProtoMessage() {}

func (x *EasterEggRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasterEggRequest.ProtoReflect.Descriptor instead.
func (*EasterEggRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{93}
}

func (x *EasterEggRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *EasterEggRequest) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *EasterEggRequest) GetEasterEgg() *EasterEgg {
	if x != nil {
		return x.EasterEgg
	}
	return nil
}

type EasterEggResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	Timestamp      *uint64         `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *EasterEggResponse) Reset() {
	*x = EasterEggResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasterEggResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasterEggResponse) ProtoMessage() {}

func (x *EasterEggResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasterEggResponse.ProtoReflect.Descriptor instead.
func (*EasterEggResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{94}
}

func (x *EasterEggResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *EasterEggResponse) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type GetConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader    *RequestHeader    `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	ConversationSpec *ConversationSpec `protobuf:"bytes,2,opt,name=conversation_spec,json=conversationSpec" json:"conversation_spec,omitempty"`
	// Whether the ConversationState in the response should include metadata
	// other than the conversation ID (default true).
	IncludeConversationMetadata *bool `protobuf:"varint,3,opt,name=include_conversation_metadata,json=includeConversationMetadata" json:"include_conversation_metadata,omitempty"`
	// Whether to include list of events in the response (default true).
	IncludeEvent             *bool                   `protobuf:"varint,4,opt,name=include_event,json=includeEvent" json:"include_event,omitempty"`
	MaxEventsPerConversation *uint64                 `protobuf:"varint,6,opt,name=max_events_per_conversation,json=maxEventsPerConversation" json:"max_events_per_conversation,omitempty"`
	EventContinuationToken   *EventContinuationToken `protobuf:"bytes,7,opt,name=event_continuation_token,json=eventContinuationToken" json:"event_continuation_token,omitempty"`
}

func (x *GetConversationRequest) Reset() {
	*x = GetConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationRequest) ProtoMessage() {}

func (x *GetConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationRequest.ProtoReflect.Descriptor instead.
func (*GetConversationRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{95}
}

func (x *GetConversationRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *GetConversationRequest) GetConversationSpec() *ConversationSpec {
	if x != nil {
		return x.ConversationSpec
	}
	return nil
}

func (x *GetConversationRequest) GetIncludeConversationMetadata() bool {
	if x != nil && x.IncludeConversationMetadata != nil {
		return *x.IncludeConversationMetadata
	}
	return false
}

func (x *GetConversationRequest) GetIncludeEvent() bool {
	if x != nil && x.IncludeEvent != nil {
		return *x.IncludeEvent
	}
	return false
}

func (x *GetConversationRequest) GetMaxEventsPerConversation() uint64 {
	if x != nil && x.MaxEventsPerConversation != nil {
		return *x.MaxEventsPerConversation
	}
	return 0
}

func (x *GetConversationRequest) GetEventContinuationToken() *EventContinuationToken {
	if x != nil {
		return x.EventContinuationToken
	}
	return nil
}

type GetConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader    *ResponseHeader    `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	ConversationState *ConversationState `protobuf:"bytes,2,opt,name=conversation_state,json=conversationState" json:"conversation_state,omitempty"`
}

func (x *GetConversationResponse) Reset() {
	*x = GetConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationResponse) ProtoMessage() {}

func (x *GetConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationResponse.ProtoReflect.Descriptor instead.
func (*GetConversationResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{96}
}

func (x *GetConversationResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *GetConversationResponse) GetConversationState() *ConversationState {
	if x != nil {
		return x.ConversationState
	}
	return nil
}

type GetEntityByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader   *RequestHeader      `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	BatchLookupSpec []*EntityLookupSpec `protobuf:"bytes,3,rep,name=batch_lookup_spec,json=batchLookupSpec" json:"batch_lookup_spec,omitempty"`
}

func (x *GetEntityByIdRequest) Reset() {
	*x = GetEntityByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntityByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityByIdRequest) ProtoMessage() {}

func (x *GetEntityByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityByIdRequest.ProtoReflect.Descriptor instead.
func (*GetEntityByIdRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{97}
}

func (x *GetEntityByIdRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *GetEntityByIdRequest) GetBatchLookupSpec() []*EntityLookupSpec {
	if x != nil {
		return x.BatchLookupSpec
	}
	return nil
}

type GetEntityByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	// Resulting entities of PARTICIPANT_TYPE_GAIA only.
	Entity []*Entity `protobuf:"bytes,2,rep,name=entity" json:"entity,omitempty"`
	// All resulting entities.
	EntityResult []*EntityResult `protobuf:"bytes,3,rep,name=entity_result,json=entityResult" json:"entity_result,omitempty"`
}

func (x *GetEntityByIdResponse) Reset() {
	*x = GetEntityByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntityByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityByIdResponse) ProtoMessage() {}

func (x *GetEntityByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityByIdResponse.ProtoReflect.Descriptor instead.
func (*GetEntityByIdResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{98}
}

func (x *GetEntityByIdResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *GetEntityByIdResponse) GetEntity() []*Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *GetEntityByIdResponse) GetEntityResult() []*EntityResult {
	if x != nil {
		return x.EntityResult
	}
	return nil
}

type GetGroupConversationUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader *RequestHeader `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	// Conversation to retrieve URL for.
	ConversationId *ConversationId `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
}

func (x *GetGroupConversationUrlRequest) Reset() {
	*x = GetGroupConversationUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupConversationUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupConversationUrlRequest) ProtoMessage() {}

func (x *GetGroupConversationUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupConversationUrlRequest.ProtoReflect.Descriptor instead.
func (*GetGroupConversationUrlRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{99}
}

func (x *GetGroupConversationUrlRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *GetGroupConversationUrlRequest) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

type GetGroupConversationUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	// URL for others to join conversation.
	GroupConversationUrl *string `protobuf:"bytes,2,opt,name=group_conversation_url,json=groupConversationUrl" json:"group_conversation_url,omitempty"`
}

func (x *GetGroupConversationUrlResponse) Reset() {
	*x = GetGroupConversationUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupConversationUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupConversationUrlResponse) ProtoMessage() {}

func (x *GetGroupConversationUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupConversationUrlResponse.ProtoReflect.Descriptor instead.
func (*GetGroupConversationUrlResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{100}
}

func (x *GetGroupConversationUrlResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *GetGroupConversationUrlResponse) GetGroupConversationUrl() string {
	if x != nil && x.GroupConversationUrl != nil {
		return *x.GroupConversationUrl
	}
	return ""
}

type GetSuggestedEntitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader *RequestHeader `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	// Max number of non-grouped entities to return.
	MaxCount *uint64 `protobuf:"varint,4,opt,name=max_count,json=maxCount" json:"max_count,omitempty"`
	// Optional hash for "favorites" contact group.
	Favorites *SuggestedContactGroupHash `protobuf:"bytes,8,opt,name=favorites" json:"favorites,omitempty"`
	// Optional hash for "contacts you hangout with" contact group.
	ContactsYouHangoutWith *SuggestedContactGroupHash `protobuf:"bytes,9,opt,name=contacts_you_hangout_with,json=contactsYouHangoutWith" json:"contacts_you_hangout_with,omitempty"`
	// Optional hash for "other contacts on hangouts" contact group.
	OtherContactsOnHangouts *SuggestedContactGroupHash `protobuf:"bytes,10,opt,name=other_contacts_on_hangouts,json=otherContactsOnHangouts" json:"other_contacts_on_hangouts,omitempty"`
	// Optional hash for "other contacts" contact group.
	OtherContacts *SuggestedContactGroupHash `protobuf:"bytes,11,opt,name=other_contacts,json=otherContacts" json:"other_contacts,omitempty"`
	// Optional hash for "dismissed contacts" contact group.
	DismissedContacts *SuggestedContactGroupHash `protobuf:"bytes,12,opt,name=dismissed_contacts,json=dismissedContacts" json:"dismissed_contacts,omitempty"`
	// Optional hash for "pinned favorites" contact group.
	PinnedFavorites *SuggestedContactGroupHash `protobuf:"bytes,13,opt,name=pinned_favorites,json=pinnedFavorites" json:"pinned_favorites,omitempty"`
}

func (x *GetSuggestedEntitiesRequest) Reset() {
	*x = GetSuggestedEntitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSuggestedEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSuggestedEntitiesRequest) ProtoMessage() {}

func (x *GetSuggestedEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSuggestedEntitiesRequest.ProtoReflect.Descriptor instead.
func (*GetSuggestedEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{101}
}

func (x *GetSuggestedEntitiesRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *GetSuggestedEntitiesRequest) GetMaxCount() uint64 {
	if x != nil && x.MaxCount != nil {
		return *x.MaxCount
	}
	return 0
}

func (x *GetSuggestedEntitiesRequest) GetFavorites() *SuggestedContactGroupHash {
	if x != nil {
		return x.Favorites
	}
	return nil
}

func (x *GetSuggestedEntitiesRequest) GetContactsYouHangoutWith() *SuggestedContactGroupHash {
	if x != nil {
		return x.ContactsYouHangoutWith
	}
	return nil
}

func (x *GetSuggestedEntitiesRequest) GetOtherContactsOnHangouts() *SuggestedContactGroupHash {
	if x != nil {
		return x.OtherContactsOnHangouts
	}
	return nil
}

func (x *GetSuggestedEntitiesRequest) GetOtherContacts() *SuggestedContactGroupHash {
	if x != nil {
		return x.OtherContacts
	}
	return nil
}

func (x *GetSuggestedEntitiesRequest) GetDismissedContacts() *SuggestedContactGroupHash {
	if x != nil {
		return x.DismissedContacts
	}
	return nil
}

func (x *GetSuggestedEntitiesRequest) GetPinnedFavorites() *SuggestedContactGroupHash {
	if x != nil {
		return x.PinnedFavorites
	}
	return nil
}

type GetSuggestedEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader          *ResponseHeader        `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	Entity                  []*Entity              `protobuf:"bytes,2,rep,name=entity" json:"entity,omitempty"`
	Favorites               *SuggestedContactGroup `protobuf:"bytes,4,opt,name=favorites" json:"favorites,omitempty"`
	ContactsYouHangoutWith  *SuggestedContactGroup `protobuf:"bytes,5,opt,name=contacts_you_hangout_with,json=contactsYouHangoutWith" json:"contacts_you_hangout_with,omitempty"`
	OtherContactsOnHangouts *SuggestedContactGroup `protobuf:"bytes,6,opt,name=other_contacts_on_hangouts,json=otherContactsOnHangouts" json:"other_contacts_on_hangouts,omitempty"`
	OtherContacts           *SuggestedContactGroup `protobuf:"bytes,7,opt,name=other_contacts,json=otherContacts" json:"other_contacts,omitempty"`
	DismissedContacts       *SuggestedContactGroup `protobuf:"bytes,8,opt,name=dismissed_contacts,json=dismissedContacts" json:"dismissed_contacts,omitempty"`
	PinnedFavorites         *SuggestedContactGroup `protobuf:"bytes,9,opt,name=pinned_favorites,json=pinnedFavorites" json:"pinned_favorites,omitempty"`
}

func (x *GetSuggestedEntitiesResponse) Reset() {
	*x = GetSuggestedEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSuggestedEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSuggestedEntitiesResponse) ProtoMessage() {}

func (x *GetSuggestedEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSuggestedEntitiesResponse.ProtoReflect.Descriptor instead.
func (*GetSuggestedEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{102}
}

func (x *GetSuggestedEntitiesResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *GetSuggestedEntitiesResponse) GetEntity() []*Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *GetSuggestedEntitiesResponse) GetFavorites() *SuggestedContactGroup {
	if x != nil {
		return x.Favorites
	}
	return nil
}

func (x *GetSuggestedEntitiesResponse) GetContactsYouHangoutWith() *SuggestedContactGroup {
	if x != nil {
		return x.ContactsYouHangoutWith
	}
	return nil
}

func (x *GetSuggestedEntitiesResponse) GetOtherContactsOnHangouts() *SuggestedContactGroup {
	if x != nil {
		return x.OtherContactsOnHangouts
	}
	return nil
}

func (x *GetSuggestedEntitiesResponse) GetOtherContacts() *SuggestedContactGroup {
	if x != nil {
		return x.OtherContacts
	}
	return nil
}

func (x *GetSuggestedEntitiesResponse) GetDismissedContacts() *SuggestedContactGroup {
	if x != nil {
		return x.DismissedContacts
	}
	return nil
}

func (x *GetSuggestedEntitiesResponse) GetPinnedFavorites() *SuggestedContactGroup {
	if x != nil {
		return x.PinnedFavorites
	}
	return nil
}

type GetSelfInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader *RequestHeader `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
}

func (x *GetSelfInfoRequest) Reset() {
	*x = GetSelfInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelfInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfInfoRequest) ProtoMessage() {}

func (x *GetSelfInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSelfInfoRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{103}
}

func (x *GetSelfInfoRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

type GetSelfInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader      *ResponseHeader      `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	SelfEntity          *Entity              `protobuf:"bytes,2,opt,name=self_entity,json=selfEntity" json:"self_entity,omitempty"`
	IsKnownMinor        *bool                `protobuf:"varint,3,opt,name=is_known_minor,json=isKnownMinor" json:"is_known_minor,omitempty"`
	DndState            *DoNotDisturbSetting `protobuf:"bytes,5,opt,name=dnd_state,json=dndState" json:"dnd_state,omitempty"`
	DesktopOffSetting   *DesktopOffSetting   `protobuf:"bytes,6,opt,name=desktop_off_setting,json=desktopOffSetting" json:"desktop_off_setting,omitempty"`
	PhoneData           *PhoneData           `protobuf:"bytes,7,opt,name=phone_data,json=phoneData" json:"phone_data,omitempty"`
	ConfigurationBit    []*ConfigurationBit  `protobuf:"bytes,8,rep,name=configuration_bit,json=configurationBit" json:"configuration_bit,omitempty"`
	DesktopOffState     *DesktopOffState     `protobuf:"bytes,9,opt,name=desktop_off_state,json=desktopOffState" json:"desktop_off_state,omitempty"`
	GooglePlusUser      *bool                `protobuf:"varint,10,opt,name=google_plus_user,json=googlePlusUser" json:"google_plus_user,omitempty"`
	DesktopSoundSetting *DesktopSoundSetting `protobuf:"bytes,11,opt,name=desktop_sound_setting,json=desktopSoundSetting" json:"desktop_sound_setting,omitempty"`
	RichPresenceState   *RichPresenceState   `protobuf:"bytes,12,opt,name=rich_presence_state,json=richPresenceState" json:"rich_presence_state,omitempty"`
	DefaultCountry      *Country             `protobuf:"bytes,19,opt,name=default_country,json=defaultCountry" json:"default_country,omitempty"`
}

func (x *GetSelfInfoResponse) Reset() {
	*x = GetSelfInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelfInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfInfoResponse) ProtoMessage() {}

func (x *GetSelfInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSelfInfoResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{104}
}

func (x *GetSelfInfoResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *GetSelfInfoResponse) GetSelfEntity() *Entity {
	if x != nil {
		return x.SelfEntity
	}
	return nil
}

func (x *GetSelfInfoResponse) GetIsKnownMinor() bool {
	if x != nil && x.IsKnownMinor != nil {
		return *x.IsKnownMinor
	}
	return false
}

func (x *GetSelfInfoResponse) GetDndState() *DoNotDisturbSetting {
	if x != nil {
		return x.DndState
	}
	return nil
}

func (x *GetSelfInfoResponse) GetDesktopOffSetting() *DesktopOffSetting {
	if x != nil {
		return x.DesktopOffSetting
	}
	return nil
}

func (x *GetSelfInfoResponse) GetPhoneData() *PhoneData {
	if x != nil {
		return x.PhoneData
	}
	return nil
}

func (x *GetSelfInfoResponse) GetConfigurationBit() []*ConfigurationBit {
	if x != nil {
		return x.ConfigurationBit
	}
	return nil
}

func (x *GetSelfInfoResponse) GetDesktopOffState() *DesktopOffState {
	if x != nil {
		return x.DesktopOffState
	}
	return nil
}

func (x *GetSelfInfoResponse) GetGooglePlusUser() bool {
	if x != nil && x.GooglePlusUser != nil {
		return *x.GooglePlusUser
	}
	return false
}

func (x *GetSelfInfoResponse) GetDesktopSoundSetting() *DesktopSoundSetting {
	if x != nil {
		return x.DesktopSoundSetting
	}
	return nil
}

func (x *GetSelfInfoResponse) GetRichPresenceState() *RichPresenceState {
	if x != nil {
		return x.RichPresenceState
	}
	return nil
}

func (x *GetSelfInfoResponse) GetDefaultCountry() *Country {
	if x != nil {
		return x.DefaultCountry
	}
	return nil
}

type QueryPresenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader *RequestHeader   `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	ParticipantId []*ParticipantId `protobuf:"bytes,2,rep,name=participant_id,json=participantId" json:"participant_id,omitempty"`
	FieldMask     []FieldMask      `protobuf:"varint,3,rep,name=field_mask,json=fieldMask,enum=hangouts.FieldMask" json:"field_mask,omitempty"`
}

func (x *QueryPresenceRequest) Reset() {
	*x = QueryPresenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPresenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPresenceRequest) ProtoMessage() {}

func (x *QueryPresenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPresenceRequest.ProtoReflect.Descriptor instead.
func (*QueryPresenceRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{105}
}

func (x *QueryPresenceRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *QueryPresenceRequest) GetParticipantId() []*ParticipantId {
	if x != nil {
		return x.ParticipantId
	}
	return nil
}

func (x *QueryPresenceRequest) GetFieldMask() []FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type QueryPresenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader   `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	PresenceResult []*PresenceResult `protobuf:"bytes,2,rep,name=presence_result,json=presenceResult" json:"presence_result,omitempty"`
}

func (x *QueryPresenceResponse) Reset() {
	*x = QueryPresenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPresenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPresenceResponse) ProtoMessage() {}

func (x *QueryPresenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPresenceResponse.ProtoReflect.Descriptor instead.
func (*QueryPresenceResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{106}
}

func (x *QueryPresenceResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *QueryPresenceResponse) GetPresenceResult() []*PresenceResult {
	if x != nil {
		return x.PresenceResult
	}
	return nil
}

type RemoveUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader *RequestHeader `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	// Optional participant to remove from conversation, yourself if not given.
	ParticipantId      *ParticipantId      `protobuf:"bytes,3,opt,name=participant_id,json=participantId" json:"participant_id,omitempty"`
	EventRequestHeader *EventRequestHeader `protobuf:"bytes,5,opt,name=event_request_header,json=eventRequestHeader" json:"event_request_header,omitempty"`
}

func (x *RemoveUserRequest) Reset() {
	*x = RemoveUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserRequest) ProtoMessage() {}

func (x *RemoveUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{107}
}

func (x *RemoveUserRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *RemoveUserRequest) GetParticipantId() *ParticipantId {
	if x != nil {
		return x.ParticipantId
	}
	return nil
}

func (x *RemoveUserRequest) GetEventRequestHeader() *EventRequestHeader {
	if x != nil {
		return x.EventRequestHeader
	}
	return nil
}

type RemoveUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	CreatedEvent   *Event          `protobuf:"bytes,4,opt,name=created_event,json=createdEvent" json:"created_event,omitempty"`
}

func (x *RemoveUserResponse) Reset() {
	*x = RemoveUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserResponse) ProtoMessage() {}

func (x *RemoveUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{108}
}

func (x *RemoveUserResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *RemoveUserResponse) GetCreatedEvent() *Event {
	if x != nil {
		return x.CreatedEvent
	}
	return nil
}

type RenameConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader      *RequestHeader      `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	NewName            *string             `protobuf:"bytes,3,opt,name=new_name,json=newName" json:"new_name,omitempty"`
	EventRequestHeader *EventRequestHeader `protobuf:"bytes,5,opt,name=event_request_header,json=eventRequestHeader" json:"event_request_header,omitempty"`
}

func (x *RenameConversationRequest) Reset() {
	*x = RenameConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameConversationRequest) ProtoMessage() {}

func (x *RenameConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameConversationRequest.ProtoReflect.Descriptor instead.
func (*RenameConversationRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{109}
}

func (x *RenameConversationRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *RenameConversationRequest) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

func (x *RenameConversationRequest) GetEventRequestHeader() *EventRequestHeader {
	if x != nil {
		return x.EventRequestHeader
	}
	return nil
}

type RenameConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	CreatedEvent   *Event          `protobuf:"bytes,4,opt,name=created_event,json=createdEvent" json:"created_event,omitempty"`
}

func (x *RenameConversationResponse) Reset() {
	*x = RenameConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameConversationResponse) ProtoMessage() {}

func (x *RenameConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameConversationResponse.ProtoReflect.Descriptor instead.
func (*RenameConversationResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{110}
}

func (x *RenameConversationResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *RenameConversationResponse) GetCreatedEvent() *Event {
	if x != nil {
		return x.CreatedEvent
	}
	return nil
}

type SearchEntitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader *RequestHeader `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	Query         *string        `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	MaxCount      *uint64        `protobuf:"varint,4,opt,name=max_count,json=maxCount" json:"max_count,omitempty"`
}

func (x *SearchEntitiesRequest) Reset() {
	*x = SearchEntitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEntitiesRequest) ProtoMessage() {}

func (x *SearchEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEntitiesRequest.ProtoReflect.Descriptor instead.
func (*SearchEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{111}
}

func (x *SearchEntitiesRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *SearchEntitiesRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *SearchEntitiesRequest) GetMaxCount() uint64 {
	if x != nil && x.MaxCount != nil {
		return *x.MaxCount
	}
	return 0
}

type SearchEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	Entity         []*Entity       `protobuf:"bytes,2,rep,name=entity" json:"entity,omitempty"`
}

func (x *SearchEntitiesResponse) Reset() {
	*x = SearchEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEntitiesResponse) ProtoMessage() {}

func (x *SearchEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEntitiesResponse.ProtoReflect.Descriptor instead.
func (*SearchEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{112}
}

func (x *SearchEntitiesResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *SearchEntitiesResponse) GetEntity() []*Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Place *EMPlace `protobuf:"bytes,1,opt,name=place" json:"place,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{113}
}

func (x *Location) GetPlace() *EMPlace {
	if x != nil {
		return x.Place
	}
	return nil
}

type SendChatMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader      *RequestHeader      `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	Annotation         []*EventAnnotation  `protobuf:"bytes,5,rep,name=annotation" json:"annotation,omitempty"`
	MessageContent     *MessageContent     `protobuf:"bytes,6,opt,name=message_content,json=messageContent" json:"message_content,omitempty"`
	ExistingMedia      *ExistingMedia      `protobuf:"bytes,7,opt,name=existing_media,json=existingMedia" json:"existing_media,omitempty"`
	EventRequestHeader *EventRequestHeader `protobuf:"bytes,8,opt,name=event_request_header,json=eventRequestHeader" json:"event_request_header,omitempty"`
	UserId             *ParticipantId      `protobuf:"bytes,9,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Location           *Location           `protobuf:"bytes,10,opt,name=location" json:"location,omitempty"` // TODO: incomplete
}

func (x *SendChatMessageRequest) Reset() {
	*x = SendChatMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessageRequest) ProtoMessage() {}

func (x *SendChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessageRequest.ProtoReflect.Descriptor instead.
func (*SendChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{114}
}

func (x *SendChatMessageRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *SendChatMessageRequest) GetAnnotation() []*EventAnnotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *SendChatMessageRequest) GetMessageContent() *MessageContent {
	if x != nil {
		return x.MessageContent
	}
	return nil
}

func (x *SendChatMessageRequest) GetExistingMedia() *ExistingMedia {
	if x != nil {
		return x.ExistingMedia
	}
	return nil
}

func (x *SendChatMessageRequest) GetEventRequestHeader() *EventRequestHeader {
	if x != nil {
		return x.EventRequestHeader
	}
	return nil
}

func (x *SendChatMessageRequest) GetUserId() *ParticipantId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *SendChatMessageRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type SendChatMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	CreatedEvent   *Event          `protobuf:"bytes,6,opt,name=created_event,json=createdEvent" json:"created_event,omitempty"`
}

func (x *SendChatMessageResponse) Reset() {
	*x = SendChatMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChatMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessageResponse) ProtoMessage() {}

func (x *SendChatMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessageResponse.ProtoReflect.Descriptor instead.
func (*SendChatMessageResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{115}
}

func (x *SendChatMessageResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *SendChatMessageResponse) GetCreatedEvent() *Event {
	if x != nil {
		return x.CreatedEvent
	}
	return nil
}

type ModifyOTRStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader      *RequestHeader      `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	OtrStatus          *OffTheRecordStatus `protobuf:"varint,3,opt,name=otr_status,json=otrStatus,enum=hangouts.OffTheRecordStatus" json:"otr_status,omitempty"`
	EventRequestHeader *EventRequestHeader `protobuf:"bytes,5,opt,name=event_request_header,json=eventRequestHeader" json:"event_request_header,omitempty"`
}

func (x *ModifyOTRStatusRequest) Reset() {
	*x = ModifyOTRStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyOTRStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyOTRStatusRequest) ProtoMessage() {}

func (x *ModifyOTRStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyOTRStatusRequest.ProtoReflect.Descriptor instead.
func (*ModifyOTRStatusRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{116}
}

func (x *ModifyOTRStatusRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *ModifyOTRStatusRequest) GetOtrStatus() OffTheRecordStatus {
	if x != nil && x.OtrStatus != nil {
		return *x.OtrStatus
	}
	return OffTheRecordStatus_OFF_THE_RECORD_STATUS_UNKNOWN
}

func (x *ModifyOTRStatusRequest) GetEventRequestHeader() *EventRequestHeader {
	if x != nil {
		return x.EventRequestHeader
	}
	return nil
}

type ModifyOTRStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	CreatedEvent   *Event          `protobuf:"bytes,4,opt,name=created_event,json=createdEvent" json:"created_event,omitempty"`
}

func (x *ModifyOTRStatusResponse) Reset() {
	*x = ModifyOTRStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyOTRStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyOTRStatusResponse) ProtoMessage() {}

func (x *ModifyOTRStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyOTRStatusResponse.ProtoReflect.Descriptor instead.
func (*ModifyOTRStatusResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{117}
}

func (x *ModifyOTRStatusResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *ModifyOTRStatusResponse) GetCreatedEvent() *Event {
	if x != nil {
		return x.CreatedEvent
	}
	return nil
}

type SendOffnetworkInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader  *RequestHeader     `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	InviteeAddress *OffnetworkAddress `protobuf:"bytes,2,opt,name=invitee_address,json=inviteeAddress" json:"invitee_address,omitempty"`
}

func (x *SendOffnetworkInvitationRequest) Reset() {
	*x = SendOffnetworkInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOffnetworkInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOffnetworkInvitationRequest) ProtoMessage() {}

func (x *SendOffnetworkInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOffnetworkInvitationRequest.ProtoReflect.Descriptor instead.
func (*SendOffnetworkInvitationRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{118}
}

func (x *SendOffnetworkInvitationRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *SendOffnetworkInvitationRequest) GetInviteeAddress() *OffnetworkAddress {
	if x != nil {
		return x.InviteeAddress
	}
	return nil
}

type SendOffnetworkInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
}

func (x *SendOffnetworkInvitationResponse) Reset() {
	*x = SendOffnetworkInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOffnetworkInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOffnetworkInvitationResponse) ProtoMessage() {}

func (x *SendOffnetworkInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOffnetworkInvitationResponse.ProtoReflect.Descriptor instead.
func (*SendOffnetworkInvitationResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{119}
}

func (x *SendOffnetworkInvitationResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

type SetActiveClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader *RequestHeader `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	// Whether to set the client as active or inactive.
	IsActive *bool `protobuf:"varint,2,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	// 'email/resource'.
	FullJid *string `protobuf:"bytes,3,opt,name=full_jid,json=fullJid" json:"full_jid,omitempty"`
	// Timeout in seconds for client to remain active.
	TimeoutSecs *uint64 `protobuf:"varint,4,opt,name=timeout_secs,json=timeoutSecs" json:"timeout_secs,omitempty"`
}

func (x *SetActiveClientRequest) Reset() {
	*x = SetActiveClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActiveClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActiveClientRequest) ProtoMessage() {}

func (x *SetActiveClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActiveClientRequest.ProtoReflect.Descriptor instead.
func (*SetActiveClientRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{120}
}

func (x *SetActiveClientRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *SetActiveClientRequest) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *SetActiveClientRequest) GetFullJid() string {
	if x != nil && x.FullJid != nil {
		return *x.FullJid
	}
	return ""
}

func (x *SetActiveClientRequest) GetTimeoutSecs() uint64 {
	if x != nil && x.TimeoutSecs != nil {
		return *x.TimeoutSecs
	}
	return 0
}

type SetActiveClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
}

func (x *SetActiveClientResponse) Reset() {
	*x = SetActiveClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActiveClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActiveClientResponse) ProtoMessage() {}

func (x *SetActiveClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActiveClientResponse.ProtoReflect.Descriptor instead.
func (*SetActiveClientResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{121}
}

func (x *SetActiveClientResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

type SetConversationLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader *RequestHeader `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
}

func (x *SetConversationLevelRequest) Reset() {
	*x = SetConversationLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationLevelRequest) ProtoMessage() {}

func (x *SetConversationLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationLevelRequest.ProtoReflect.Descriptor instead.
func (*SetConversationLevelRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{122}
}

func (x *SetConversationLevelRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

type SetConversationLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
}

func (x *SetConversationLevelResponse) Reset() {
	*x = SetConversationLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationLevelResponse) ProtoMessage() {}

func (x *SetConversationLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationLevelResponse.ProtoReflect.Descriptor instead.
func (*SetConversationLevelResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{123}
}

func (x *SetConversationLevelResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

type SetConversationNotificationLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader  *RequestHeader     `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	ConversationId *ConversationId    `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Level          *NotificationLevel `protobuf:"varint,3,opt,name=level,enum=hangouts.NotificationLevel" json:"level,omitempty"`
}

func (x *SetConversationNotificationLevelRequest) Reset() {
	*x = SetConversationNotificationLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationNotificationLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationNotificationLevelRequest) ProtoMessage() {}

func (x *SetConversationNotificationLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationNotificationLevelRequest.ProtoReflect.Descriptor instead.
func (*SetConversationNotificationLevelRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{124}
}

func (x *SetConversationNotificationLevelRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *SetConversationNotificationLevelRequest) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *SetConversationNotificationLevelRequest) GetLevel() NotificationLevel {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return NotificationLevel_NOTIFICATION_LEVEL_UNKNOWN
}

type SetConversationNotificationLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	Timestamp      *uint64         `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *SetConversationNotificationLevelResponse) Reset() {
	*x = SetConversationNotificationLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationNotificationLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationNotificationLevelResponse) ProtoMessage() {}

func (x *SetConversationNotificationLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationNotificationLevelResponse.ProtoReflect.Descriptor instead.
func (*SetConversationNotificationLevelResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{125}
}

func (x *SetConversationNotificationLevelResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *SetConversationNotificationLevelResponse) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type SetFocusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader  *RequestHeader  `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	ConversationId *ConversationId `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Type           *FocusType      `protobuf:"varint,3,opt,name=type,enum=hangouts.FocusType" json:"type,omitempty"`
	TimeoutSecs    *uint32         `protobuf:"varint,4,opt,name=timeout_secs,json=timeoutSecs" json:"timeout_secs,omitempty"`
}

func (x *SetFocusRequest) Reset() {
	*x = SetFocusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFocusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFocusRequest) ProtoMessage() {}

func (x *SetFocusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFocusRequest.ProtoReflect.Descriptor instead.
func (*SetFocusRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{126}
}

func (x *SetFocusRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *SetFocusRequest) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *SetFocusRequest) GetType() FocusType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FocusType_FOCUS_TYPE_UNKNOWN
}

func (x *SetFocusRequest) GetTimeoutSecs() uint32 {
	if x != nil && x.TimeoutSecs != nil {
		return *x.TimeoutSecs
	}
	return 0
}

type SetFocusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	Timestamp      *uint64         `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *SetFocusResponse) Reset() {
	*x = SetFocusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFocusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFocusResponse) ProtoMessage() {}

func (x *SetFocusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFocusResponse.ProtoReflect.Descriptor instead.
func (*SetFocusResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{127}
}

func (x *SetFocusResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *SetFocusResponse) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type SetGroupLinkSharingEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader      *RequestHeader      `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	EventRequestHeader *EventRequestHeader `protobuf:"bytes,2,opt,name=event_request_header,json=eventRequestHeader" json:"event_request_header,omitempty"`
	// New group link sharing status.
	GroupLinkSharingStatus *GroupLinkSharingStatus `protobuf:"varint,4,opt,name=group_link_sharing_status,json=groupLinkSharingStatus,enum=hangouts.GroupLinkSharingStatus" json:"group_link_sharing_status,omitempty"`
}

func (x *SetGroupLinkSharingEnabledRequest) Reset() {
	*x = SetGroupLinkSharingEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupLinkSharingEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupLinkSharingEnabledRequest) ProtoMessage() {}

func (x *SetGroupLinkSharingEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupLinkSharingEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetGroupLinkSharingEnabledRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{128}
}

func (x *SetGroupLinkSharingEnabledRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *SetGroupLinkSharingEnabledRequest) GetEventRequestHeader() *EventRequestHeader {
	if x != nil {
		return x.EventRequestHeader
	}
	return nil
}

func (x *SetGroupLinkSharingEnabledRequest) GetGroupLinkSharingStatus() GroupLinkSharingStatus {
	if x != nil && x.GroupLinkSharingStatus != nil {
		return *x.GroupLinkSharingStatus
	}
	return GroupLinkSharingStatus_GROUP_LINK_SHARING_STATUS_UNKNOWN
}

type SetGroupLinkSharingEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	// Created event of type EVENT_TYPE_GROUP_LINK_SHARING_MODIFICATION.
	CreatedEvent *Event `protobuf:"bytes,2,opt,name=created_event,json=createdEvent" json:"created_event,omitempty"`
	// Updated conversation.
	UpdatedConversation *Conversation `protobuf:"bytes,3,opt,name=updated_conversation,json=updatedConversation" json:"updated_conversation,omitempty"`
}

func (x *SetGroupLinkSharingEnabledResponse) Reset() {
	*x = SetGroupLinkSharingEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupLinkSharingEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupLinkSharingEnabledResponse) ProtoMessage() {}

func (x *SetGroupLinkSharingEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupLinkSharingEnabledResponse.ProtoReflect.Descriptor instead.
func (*SetGroupLinkSharingEnabledResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{129}
}

func (x *SetGroupLinkSharingEnabledResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *SetGroupLinkSharingEnabledResponse) GetCreatedEvent() *Event {
	if x != nil {
		return x.CreatedEvent
	}
	return nil
}

func (x *SetGroupLinkSharingEnabledResponse) GetUpdatedConversation() *Conversation {
	if x != nil {
		return x.UpdatedConversation
	}
	return nil
}

// Allows setting one or more of the included presence-related settings.
type SetPresenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader        *RequestHeader        `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	PresenceStateSetting *PresenceStateSetting `protobuf:"bytes,2,opt,name=presence_state_setting,json=presenceStateSetting" json:"presence_state_setting,omitempty"`
	DndSetting           *DndSetting           `protobuf:"bytes,3,opt,name=dnd_setting,json=dndSetting" json:"dnd_setting,omitempty"`
	DesktopOffSetting    *DesktopOffSetting    `protobuf:"bytes,5,opt,name=desktop_off_setting,json=desktopOffSetting" json:"desktop_off_setting,omitempty"`
	MoodSetting          *MoodSetting          `protobuf:"bytes,8,opt,name=mood_setting,json=moodSetting" json:"mood_setting,omitempty"`
}

func (x *SetPresenceRequest) Reset() {
	*x = SetPresenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPresenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPresenceRequest) ProtoMessage() {}

func (x *SetPresenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPresenceRequest.ProtoReflect.Descriptor instead.
func (*SetPresenceRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{130}
}

func (x *SetPresenceRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *SetPresenceRequest) GetPresenceStateSetting() *PresenceStateSetting {
	if x != nil {
		return x.PresenceStateSetting
	}
	return nil
}

func (x *SetPresenceRequest) GetDndSetting() *DndSetting {
	if x != nil {
		return x.DndSetting
	}
	return nil
}

func (x *SetPresenceRequest) GetDesktopOffSetting() *DesktopOffSetting {
	if x != nil {
		return x.DesktopOffSetting
	}
	return nil
}

func (x *SetPresenceRequest) GetMoodSetting() *MoodSetting {
	if x != nil {
		return x.MoodSetting
	}
	return nil
}

type SetPresenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
}

func (x *SetPresenceResponse) Reset() {
	*x = SetPresenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPresenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPresenceResponse) ProtoMessage() {}

func (x *SetPresenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPresenceResponse.ProtoReflect.Descriptor instead.
func (*SetPresenceResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{131}
}

func (x *SetPresenceResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

type SetTypingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader  *RequestHeader  `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	ConversationId *ConversationId `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Type           *TypingType     `protobuf:"varint,3,opt,name=type,enum=hangouts.TypingType" json:"type,omitempty"`
}

func (x *SetTypingRequest) Reset() {
	*x = SetTypingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTypingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTypingRequest) ProtoMessage() {}

func (x *SetTypingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTypingRequest.ProtoReflect.Descriptor instead.
func (*SetTypingRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{132}
}

func (x *SetTypingRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *SetTypingRequest) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *SetTypingRequest) GetType() TypingType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TypingType_TYPING_TYPE_UNKNOWN
}

type SetTypingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	Timestamp      *uint64         `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *SetTypingResponse) Reset() {
	*x = SetTypingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTypingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTypingResponse) ProtoMessage() {}

func (x *SetTypingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTypingResponse.ProtoReflect.Descriptor instead.
func (*SetTypingResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{133}
}

func (x *SetTypingResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *SetTypingResponse) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type SyncAllNewEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader *RequestHeader `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	// Timestamp after which to return all new events.
	LastSyncTimestamp    *uint64 `protobuf:"varint,2,opt,name=last_sync_timestamp,json=lastSyncTimestamp" json:"last_sync_timestamp,omitempty"`
	MaxResponseSizeBytes *uint64 `protobuf:"varint,8,opt,name=max_response_size_bytes,json=maxResponseSizeBytes" json:"max_response_size_bytes,omitempty"`
}

func (x *SyncAllNewEventsRequest) Reset() {
	*x = SyncAllNewEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncAllNewEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAllNewEventsRequest) ProtoMessage() {}

func (x *SyncAllNewEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAllNewEventsRequest.ProtoReflect.Descriptor instead.
func (*SyncAllNewEventsRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{134}
}

func (x *SyncAllNewEventsRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *SyncAllNewEventsRequest) GetLastSyncTimestamp() uint64 {
	if x != nil && x.LastSyncTimestamp != nil {
		return *x.LastSyncTimestamp
	}
	return 0
}

func (x *SyncAllNewEventsRequest) GetMaxResponseSizeBytes() uint64 {
	if x != nil && x.MaxResponseSizeBytes != nil {
		return *x.MaxResponseSizeBytes
	}
	return 0
}

type SyncAllNewEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader    *ResponseHeader      `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	SyncTimestamp     *uint64              `protobuf:"varint,2,opt,name=sync_timestamp,json=syncTimestamp" json:"sync_timestamp,omitempty"`
	ConversationState []*ConversationState `protobuf:"bytes,3,rep,name=conversation_state,json=conversationState" json:"conversation_state,omitempty"`
}

func (x *SyncAllNewEventsResponse) Reset() {
	*x = SyncAllNewEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncAllNewEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAllNewEventsResponse) ProtoMessage() {}

func (x *SyncAllNewEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAllNewEventsResponse.ProtoReflect.Descriptor instead.
func (*SyncAllNewEventsResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{135}
}

func (x *SyncAllNewEventsResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *SyncAllNewEventsResponse) GetSyncTimestamp() uint64 {
	if x != nil && x.SyncTimestamp != nil {
		return *x.SyncTimestamp
	}
	return 0
}

func (x *SyncAllNewEventsResponse) GetConversationState() []*ConversationState {
	if x != nil {
		return x.ConversationState
	}
	return nil
}

type SyncRecentConversationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader *RequestHeader `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	// Timestamp used for pagination, returns most recent conversations if not
	// given.
	LastEventTimestamp       *uint64      `protobuf:"varint,2,opt,name=last_event_timestamp,json=lastEventTimestamp" json:"last_event_timestamp,omitempty"`
	MaxConversations         *uint64      `protobuf:"varint,3,opt,name=max_conversations,json=maxConversations" json:"max_conversations,omitempty"`
	MaxEventsPerConversation *uint64      `protobuf:"varint,4,opt,name=max_events_per_conversation,json=maxEventsPerConversation" json:"max_events_per_conversation,omitempty"`
	SyncFilter               []SyncFilter `protobuf:"varint,5,rep,name=sync_filter,json=syncFilter,enum=hangouts.SyncFilter" json:"sync_filter,omitempty"`
}

func (x *SyncRecentConversationsRequest) Reset() {
	*x = SyncRecentConversationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRecentConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRecentConversationsRequest) ProtoMessage() {}

func (x *SyncRecentConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRecentConversationsRequest.ProtoReflect.Descriptor instead.
func (*SyncRecentConversationsRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{136}
}

func (x *SyncRecentConversationsRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *SyncRecentConversationsRequest) GetLastEventTimestamp() uint64 {
	if x != nil && x.LastEventTimestamp != nil {
		return *x.LastEventTimestamp
	}
	return 0
}

func (x *SyncRecentConversationsRequest) GetMaxConversations() uint64 {
	if x != nil && x.MaxConversations != nil {
		return *x.MaxConversations
	}
	return 0
}

func (x *SyncRecentConversationsRequest) GetMaxEventsPerConversation() uint64 {
	if x != nil && x.MaxEventsPerConversation != nil {
		return *x.MaxEventsPerConversation
	}
	return 0
}

func (x *SyncRecentConversationsRequest) GetSyncFilter() []SyncFilter {
	if x != nil {
		return x.SyncFilter
	}
	return nil
}

type SyncRecentConversationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader           *ResponseHeader      `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
	SyncTimestamp            *uint64              `protobuf:"varint,2,opt,name=sync_timestamp,json=syncTimestamp" json:"sync_timestamp,omitempty"`
	ConversationState        []*ConversationState `protobuf:"bytes,3,rep,name=conversation_state,json=conversationState" json:"conversation_state,omitempty"`
	ContinuationEndTimestamp *uint64              `protobuf:"varint,4,opt,name=continuation_end_timestamp,json=continuationEndTimestamp" json:"continuation_end_timestamp,omitempty"`
}

func (x *SyncRecentConversationsResponse) Reset() {
	*x = SyncRecentConversationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRecentConversationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRecentConversationsResponse) ProtoMessage() {}

func (x *SyncRecentConversationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRecentConversationsResponse.ProtoReflect.Descriptor instead.
func (*SyncRecentConversationsResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{137}
}

func (x *SyncRecentConversationsResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

func (x *SyncRecentConversationsResponse) GetSyncTimestamp() uint64 {
	if x != nil && x.SyncTimestamp != nil {
		return *x.SyncTimestamp
	}
	return 0
}

func (x *SyncRecentConversationsResponse) GetConversationState() []*ConversationState {
	if x != nil {
		return x.ConversationState
	}
	return nil
}

func (x *SyncRecentConversationsResponse) GetContinuationEndTimestamp() uint64 {
	if x != nil && x.ContinuationEndTimestamp != nil {
		return *x.ContinuationEndTimestamp
	}
	return 0
}

type UpdateWatermarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeader     *RequestHeader  `protobuf:"bytes,1,opt,name=request_header,json=requestHeader" json:"request_header,omitempty"`
	ConversationId    *ConversationId `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	LastReadTimestamp *uint64         `protobuf:"varint,3,opt,name=last_read_timestamp,json=lastReadTimestamp" json:"last_read_timestamp,omitempty"`
}

func (x *UpdateWatermarkRequest) Reset() {
	*x = UpdateWatermarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWatermarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWatermarkRequest) ProtoMessage() {}

func (x *UpdateWatermarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWatermarkRequest.ProtoReflect.Descriptor instead.
func (*UpdateWatermarkRequest) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{138}
}

func (x *UpdateWatermarkRequest) GetRequestHeader() *RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *UpdateWatermarkRequest) GetConversationId() *ConversationId {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *UpdateWatermarkRequest) GetLastReadTimestamp() uint64 {
	if x != nil && x.LastReadTimestamp != nil {
		return *x.LastReadTimestamp
	}
	return 0
}

type UpdateWatermarkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader *ResponseHeader `protobuf:"bytes,1,opt,name=response_header,json=responseHeader" json:"response_header,omitempty"`
}

func (x *UpdateWatermarkResponse) Reset() {
	*x = UpdateWatermarkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hangouts_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWatermarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWatermarkResponse) ProtoMessage() {}

func (x *UpdateWatermarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hangouts_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWatermarkResponse.ProtoReflect.Descriptor instead.
func (*UpdateWatermarkResponse) Descriptor() ([]byte, []int) {
	return file_hangouts_proto_rawDescGZIP(), []int{139}
}

func (x *UpdateWatermarkResponse) GetResponseHeader() *ResponseHeader {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

var File_hangouts_proto protoreflect.FileDescriptor

var file_hangouts_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x1a, 0x0c, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x44, 0x6f, 0x4e,
	0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x75,
	0x72, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x44,
	0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x64,
	0x6e, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x44, 0x6f, 0x4e,
	0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x64, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x20, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x41, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x69, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x22, 0x58, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x22, 0x74, 0x0a, 0x08,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x75, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x73, 0x65,
	0x63, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x75, 0x73, 0x65, 0x63, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x6f, 0x6f, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6f, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x6f, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x7c, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x62, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0x2b, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xaf, 0x01,
	0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f,
	0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x48, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x4d, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x73, 0x0a, 0x0e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3b,
	0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0b,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x89, 0x01, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa1, 0x02, 0x0a,
	0x0f, 0x4f, 0x54, 0x52, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x74, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x54, 0x68, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x4f, 0x74, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x74, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x54, 0x68, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x4f,
	0x74, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f,
	0x6f, 0x74, 0x72, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x54,
	0x68, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x0c,
	0x6f, 0x6c, 0x64, 0x4f, 0x74, 0x72, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x74, 0x72, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x4f, 0x66, 0x66, 0x54, 0x68, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x4f, 0x74, 0x72, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x22, 0x62, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x44, 0x69, 0x66, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x09, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x66, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a,
	0x10, 0x6f, 0x74, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x4f, 0x54, 0x52, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x6f, 0x74, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x6f,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x6f,
	0x74, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x54, 0x68,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6f,
	0x74, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0d, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x1f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x6e, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x89, 0x01, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12,
	0x3d, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x8c, 0x05,
	0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x66, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a,
	0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x45, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x02, 0x0a,
	0x1b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x6e, 0x65, 0x77,
	0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8f, 0x07, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x57, 0x0a, 0x17, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x68, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x74, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x4f, 0x66, 0x66, 0x54, 0x68, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x6f, 0x74, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a,
	0x0a, 0x6f, 0x74, 0x72, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4f, 0x66, 0x66,
	0x54, 0x68, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52,
	0x09, 0x6f, 0x74, 0x72, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x1e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x48, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0c,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5b,
	0x0a, 0x19, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x25, 0x0a, 0x09, 0x45,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x67, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x6c, 0x65,
	0x73, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x36, 0x0a, 0x0d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x02, 0x0a, 0x12, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x54, 0x68, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4f, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x0d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x22,
	0xbd, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xe6, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x62, 0x75, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x06, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x16, 0x68, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x74,
	0x5f, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x68, 0x61, 0x64, 0x50, 0x61, 0x73, 0x74,
	0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x83, 0x01, 0x0a,
	0x10, 0x50, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x4f, 0x55,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x41, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x4f, 0x55,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x54,
	0x5f, 0x48, 0x41, 0x4e, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x41,
	0x53, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x41, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x4f, 0x55, 0x54,
	0x10, 0x02, 0x22, 0x87, 0x03, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x42, 0x0a, 0x10, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x95, 0x02, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x18, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x16, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x69, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x69, 0x61, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x67, 0x61, 0x69, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x61, 0x69,
	0x61, 0x22, 0x7e, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x7d, 0x0a, 0x11, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x69,
	0x63, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x1b, 0x67, 0x65, 0x74, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x64, 0x0a, 0x18, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x34, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x4f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x22, 0x4c, 0x0a, 0x0f,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x66, 0x66,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x0a, 0x44, 0x6e,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x73, 0x22, 0x70, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x0b, 0x4d, 0x6f, 0x6f, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x6d, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x0b,
	0x4d, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x0b, 0x4d, 0x6f, 0x6f, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x6f, 0x6f, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6f, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x6f, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x45, 0x0a, 0x09, 0x4d, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38,
	0x0a, 0x0c, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x4d, 0x6f, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x6f, 0x6f,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xbe, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x09, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x69, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x69, 0x61, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x13, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x4d, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x15, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x52, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x89, 0x01, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xd3, 0x02, 0x0a,
	0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x22, 0x93, 0x02, 0x0a, 0x08, 0x49, 0x31, 0x38, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x0a, 0x0f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x11, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x52, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x31, 0x36, 0x34, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x31, 0x36, 0x34, 0x12, 0x2f, 0x0a, 0x09, 0x69,
	0x31, 0x38, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x69, 0x31, 0x38, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x19,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x85,
	0x01, 0x0a, 0x10, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a,
	0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x5f, 0x0a,
	0x1c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xda,
	0x0c, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4b,
	0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x18, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x12, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x12, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x13, 0x74, 0x79, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x74, 0x79, 0x70, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01,
	0x0a, 0x1f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x66, 0x0a, 0x1c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x16, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x11, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x17, 0x65, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x65, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x67, 0x67, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x65,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x67, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x1a, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18,
	0x73, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x21, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x88, 0x01, 0x0a, 0x28, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52,
	0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x24, 0x72, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x47, 0x0a,
	0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a,
	0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x14, 0x53,
	0x65, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x54, 0x79, 0x70,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x01,
	0x0a, 0x2c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xcf, 0x01, 0x0a, 0x1c,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x07, 0x6f,
	0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x35, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x22, 0xc4, 0x01,
	0x0a, 0x15, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x67, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x0a, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x67, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x67, 0x67, 0x52, 0x09, 0x65, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x67, 0x67, 0x22, 0x89, 0x03, 0x0a, 0x18, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x13, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72,
	0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x11, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0a,
	0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x9a, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a,
	0x14, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x11, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x22, 0x53,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x12, 0x51, 0x0a, 0x15, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x89, 0x01,
	0x0a, 0x24, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x1b, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x18, 0x72, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x55, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x41, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x5e, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4f,
	0x66, 0x66, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x75, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x65, 0x49, 0x44, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x64, 0x12, 0x4e,
	0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x8a,
	0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49,
	0x64, 0x22, 0xd5, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9c, 0x01, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x01, 0x0a, 0x10, 0x45,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x67, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x67, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x67, 0x67, 0x52, 0x09, 0x65, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x67, 0x67, 0x22, 0x74, 0x0a, 0x11, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x67, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa5, 0x03, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x42, 0x0a, 0x1d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x78,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x6d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x18, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x16, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x9e, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63,
	0x22, 0xc1, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0xef, 0x04, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x59, 0x6f, 0x75, 0x48, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x12, 0x60, 0x0a, 0x1a, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x17, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x4f,
	0x6e, 0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x61, 0x73, 0x68, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x70, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0xe8, 0x04, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x59, 0x6f, 0x75, 0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x12, 0x5c, 0x0a, 0x1a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x17, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x4f, 0x6e, 0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x12, 0x46, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x84, 0x06, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x66, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x3a,
	0x0a, 0x09, 0x64, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x44, 0x6f, 0x4e,
	0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x64, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x66, 0x66,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x69, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f,
	0x6f, 0x66, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x75,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x13, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x13, 0x72, 0x69, 0x63, 0x68,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x11, 0x72, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x9d,
	0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe3,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x95, 0x01,
	0x0a, 0x1a, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x33, 0x0a, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x45, 0x4d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22,
	0xc8, 0x03, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0d, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x4e, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0xe5, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x54, 0x52, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x74,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x54, 0x68, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6f, 0x74,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x4f, 0x54, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xa7, 0x01, 0x0a,
	0x1f, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x65, 0x0a, 0x20, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x66,
	0x66, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xb3, 0x01,
	0x0a, 0x16, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6a, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x6c, 0x6c, 0x4a, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x73, 0x22, 0x5c, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x5d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0x61, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0xdf, 0x01, 0x0a, 0x27, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x8b, 0x01, 0x0a, 0x28, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x22, 0x73, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x90, 0x02, 0x0a, 0x21,
	0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x4e, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x12, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x5b, 0x0a, 0x19, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe8,
	0x01, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x49,
	0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x02, 0x0a, 0x12, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f,
	0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x54, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x6e, 0x64, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x44, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x64, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a,
	0x13, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x66, 0x66,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x4f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x6f,
	0x6f, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6f, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x6f, 0x6f, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0x58, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xbf,
	0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x74, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x6c, 0x6c, 0x4e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e,
	0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x53, 0x79,
	0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x4e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb5, 0x02, 0x0a,
	0x1e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d,
	0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x95, 0x02, 0x0a, 0x1f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xcb, 0x01, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5c, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2a, 0x7f, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x1d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x55, 0x0a, 0x09, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x43,
	0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0x5f, 0x0a, 0x0b, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x53, 0x4b, 0x54, 0x4f, 0x50, 0x10, 0x14, 0x12, 0x18, 0x0a, 0x13, 0x46, 0x4f, 0x43, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0xac,
	0x02, 0x2a, 0x6f, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0xae, 0x01, 0x0a, 0x17, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x4b, 0x54,
	0x4f, 0x50, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x1e, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x28, 0x2a, 0x6e, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x51,
	0x55, 0x49, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x1e, 0x2a, 0x58, 0x0a, 0x0b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x42,
	0x52, 0x45, 0x41, 0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x2a, 0x69, 0x0a,
	0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x53,
	0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0xf9, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0xcf, 0x02, 0x12,
	0x17, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x5f, 0x56, 0x32, 0x10, 0xd4, 0x02, 0x2a, 0x59, 0x0a, 0x14, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x56,
	0x45, 0x10, 0x02, 0x2a, 0xeb, 0x01, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x41, 0x4e, 0x47,
	0x4f, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x41, 0x4e, 0x47,
	0x4f, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x41, 0x4e, 0x47, 0x4f, 0x55,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x41, 0x4e, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x48, 0x41, 0x4e, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x04, 0x12, 0x22, 0x0a,
	0x1e, 0x48, 0x41, 0x4e, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4f, 0x4f, 0x4e, 0x10,
	0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x41, 0x4e, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10,
	0x06, 0x2a, 0x7e, 0x0a, 0x12, 0x4f, 0x66, 0x66, 0x54, 0x68, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x46, 0x46, 0x5f, 0x54,
	0x48, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x46,
	0x46, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x4f, 0x47,
	0x47, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x4f, 0x46, 0x46, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x2a, 0x8a, 0x01, 0x0a, 0x12, 0x4f, 0x66, 0x66, 0x54, 0x68, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x46, 0x46, 0x5f,
	0x54, 0x48, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4f,
	0x46, 0x46, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x46, 0x46, 0x5f, 0x54, 0x48, 0x45,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x2a, 0x25,
	0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x2a, 0xc2, 0x03, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41,
	0x52, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x4d, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x07, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x52, 0x5f, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d,
	0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4d, 0x53, 0x10, 0x0b, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x31, 0x32, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x0d, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x2a, 0x70, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x2a, 0x94, 0x01, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x45, 0x46,
	0x54, 0x10, 0x03, 0x2a, 0x6e, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x56, 0x45,
	0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52,
	0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x49, 0x4e, 0x42, 0x4f,
	0x58, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45,
	0x44, 0x10, 0x02, 0x2a, 0x8d, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x42, 0x41, 0x42, 0x45, 0x4c,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x4d,
	0x53, 0x10, 0x03, 0x2a, 0x64, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x5f, 0x41, 0x46, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x2a, 0x6d, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x41, 0x49, 0x41, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49,
	0x50, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x03, 0x2a, 0x70, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x49,
	0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x0c, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4f,
	0x52, 0x43, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x10, 0x01, 0x2a, 0x5e, 0x0a, 0x0b, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4f,
	0x47, 0x4c, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x02, 0x2a, 0x55, 0x0a, 0x0a, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x02, 0x2a, 0x78, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0xca, 0x01, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4e,
	0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x45,
	0x42, 0x5f, 0x47, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x47, 0x4d, 0x41, 0x49, 0x4c,
	0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4c, 0x54, 0x52, 0x41, 0x56, 0x49, 0x4f, 0x4c, 0x45, 0x54, 0x10, 0x0d, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x48,
	0x41, 0x4e, 0x47, 0x4f, 0x55, 0x54, 0x53, 0x10, 0x2c, 0x2a, 0x67, 0x0a, 0x0f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x45,
	0x42, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50,
	0x10, 0x03, 0x2a, 0x90, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03,
	0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x04, 0x2a, 0x71, 0x0a, 0x0e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x48, 0x4f, 0x54, 0x4f,
	0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x5f, 0x55,
	0x52, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48,
	0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x48, 0x4f, 0x54, 0x4f,
	0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x3e, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x81, 0x0c, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x32, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x34, 0x10, 0x04, 0x12,
	0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x37, 0x10,
	0x07, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x38, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x39, 0x10, 0x09, 0x12, 0x25, 0x0a,
	0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x31, 0x30, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x31, 0x31, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x31, 0x32,
	0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x31, 0x33, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x31, 0x34, 0x10, 0x0e,
	0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x31, 0x35, 0x10, 0x0f, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x31, 0x36, 0x10, 0x10, 0x12, 0x25,
	0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x31, 0x37, 0x10, 0x11, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x31, 0x38, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x31,
	0x39, 0x10, 0x13, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x32, 0x30, 0x10, 0x14, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x32, 0x31, 0x10,
	0x15, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x32, 0x32, 0x10, 0x16, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x32, 0x33, 0x10, 0x17, 0x12,
	0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x32, 0x34, 0x10, 0x18, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x32, 0x35, 0x10, 0x19, 0x12, 0x25, 0x0a,
	0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x32, 0x36, 0x10, 0x1a, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x32, 0x37, 0x10, 0x1b, 0x12, 0x25, 0x0a, 0x21, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x32, 0x38,
	0x10, 0x1c, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x32, 0x39, 0x10, 0x1d, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x33, 0x30, 0x10, 0x1e,
	0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x33, 0x31, 0x10, 0x1f, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x33, 0x32, 0x10, 0x20, 0x12, 0x25,
	0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x33, 0x33, 0x10, 0x21, 0x12, 0x40, 0x0a, 0x3c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x4d, 0x4f,
	0x4a, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x22, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x33, 0x35, 0x10, 0x23, 0x12, 0x25,
	0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x33, 0x36, 0x10, 0x24, 0x12, 0x37, 0x0a, 0x33, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x26, 0x2a, 0xff,
	0x01, 0x0a, 0x10, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x49, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x49, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x49, 0x43,
	0x48, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x52,
	0x49, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x49, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x35, 0x10, 0x05, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x49, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x52, 0x49, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x45, 0x4e, 0x10, 0x06,
	0x2a, 0x9d, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x41, 0x53, 0x4b,
	0x5f, 0x4d, 0x4f, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x06, 0x12,
	0x15, 0x0a, 0x11, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x45, 0x4e, 0x10, 0x0a,
	0x2a, 0x42, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x58,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x0a,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x2a, 0x61, 0x0a, 0x14,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x41, 0x4c,
	0x4c, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x44, 0x10, 0x01, 0x2a,
	0x68, 0x0a, 0x17, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x86, 0x01, 0x0a, 0x1a, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x48, 0x4f, 0x4e,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x3e, 0x0a, 0x3a, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x55, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x2a, 0x40, 0x0a, 0x15, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x23, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x53, 0x49, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x2a, 0x5f, 0x0a, 0x15, 0x4f, 0x66, 0x66, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x4f, 0x46, 0x46, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x46, 0x46, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x10, 0x01, 0x2a, 0x84, 0x01, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x6e, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x21, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02,
}

var (
	file_hangouts_proto_rawDescOnce sync.Once
	file_hangouts_proto_rawDescData = file_hangouts_proto_rawDesc
)

func file_hangouts_proto_rawDescGZIP() []byte {
	file_hangouts_proto_rawDescOnce.Do(func() {
		file_hangouts_proto_rawDescData = protoimpl.X.CompressGZIP(file_hangouts_proto_rawDescData)
	})
	return file_hangouts_proto_rawDescData
}

var file_hangouts_proto_enumTypes = make([]protoimpl.EnumInfo, 44)
var file_hangouts_proto_msgTypes = make([]protoimpl.MessageInfo, 140)
var file_hangouts_proto_goTypes = []interface{}{
	(ActiveClientState)(0),                               // 0: hangouts.ActiveClientState
	(FocusType)(0),                                       // 1: hangouts.FocusType
	(FocusDevice)(0),                                     // 2: hangouts.FocusDevice
	(TypingType)(0),                                      // 3: hangouts.TypingType
	(ClientPresenceStateType)(0),                         // 4: hangouts.ClientPresenceStateType
	(NotificationLevel)(0),                               // 5: hangouts.NotificationLevel
	(SegmentType)(0),                                     // 6: hangouts.SegmentType
	(ItemType)(0),                                        // 7: hangouts.ItemType
	(MembershipChangeType)(0),                            // 8: hangouts.MembershipChangeType
	(HangoutEventType)(0),                                // 9: hangouts.HangoutEventType
	(OffTheRecordToggle)(0),                              // 10: hangouts.OffTheRecordToggle
	(OffTheRecordStatus)(0),                              // 11: hangouts.OffTheRecordStatus
	(SourceType)(0),                                      // 12: hangouts.SourceType
	(EventType)(0),                                       // 13: hangouts.EventType
	(ConversationType)(0),                                // 14: hangouts.ConversationType
	(ConversationStatus)(0),                              // 15: hangouts.ConversationStatus
	(ConversationView)(0),                                // 16: hangouts.ConversationView
	(DeliveryMediumType)(0),                              // 17: hangouts.DeliveryMediumType
	(InvitationAffinity)(0),                              // 18: hangouts.InvitationAffinity
	(ParticipantType)(0),                                 // 19: hangouts.ParticipantType
	(InvitationStatus)(0),                                // 20: hangouts.InvitationStatus
	(ForceHistory)(0),                                    // 21: hangouts.ForceHistory
	(NetworkType)(0),                                     // 22: hangouts.NetworkType
	(BlockState)(0),                                      // 23: hangouts.BlockState
	(ReplyToInviteType)(0),                               // 24: hangouts.ReplyToInviteType
	(ClientId)(0),                                        // 25: hangouts.ClientId
	(ClientBuildType)(0),                                 // 26: hangouts.ClientBuildType
	(ResponseStatus)(0),                                  // 27: hangouts.ResponseStatus
	(PhotoUrlStatus)(0),                                  // 28: hangouts.PhotoUrlStatus
	(Gender)(0),                                          // 29: hangouts.Gender
	(ProfileType)(0),                                     // 30: hangouts.ProfileType
	(ConfigurationBitType)(0),                            // 31: hangouts.ConfigurationBitType
	(RichPresenceType)(0),                                // 32: hangouts.RichPresenceType
	(FieldMask)(0),                                       // 33: hangouts.FieldMask
	(DeleteType)(0),                                      // 34: hangouts.DeleteType
	(SyncFilter)(0),                                      // 35: hangouts.SyncFilter
	(SoundState)(0),                                      // 36: hangouts.SoundState
	(CallerIdSettingsMask)(0),                            // 37: hangouts.CallerIdSettingsMask
	(PhoneVerificationStatus)(0),                         // 38: hangouts.PhoneVerificationStatus
	(PhoneDiscoverabilityStatus)(0),                      // 39: hangouts.PhoneDiscoverabilityStatus
	(PhoneValidationResult)(0),                           // 40: hangouts.PhoneValidationResult
	(OffnetworkAddressType)(0),                           // 41: hangouts.OffnetworkAddressType
	(GroupLinkSharingStatus)(0),                          // 42: hangouts.GroupLinkSharingStatus
	(Entity_PastHangoutState)(0),                         // 43: hangouts.Entity.PastHangoutState
	(*DoNotDisturbSetting)(nil),                          // 44: hangouts.DoNotDisturbSetting
	(*NotificationSettings)(nil),                         // 45: hangouts.NotificationSettings
	(*ConversationId)(nil),                               // 46: hangouts.ConversationId
	(*ParticipantId)(nil),                                // 47: hangouts.ParticipantId
	(*DeviceStatus)(nil),                                 // 48: hangouts.DeviceStatus
	(*LastSeen)(nil),                                     // 49: hangouts.LastSeen
	(*Presence)(nil),                                     // 50: hangouts.Presence
	(*PresenceResult)(nil),                               // 51: hangouts.PresenceResult
	(*ClientIdentifier)(nil),                             // 52: hangouts.ClientIdentifier
	(*ClientPresenceState)(nil),                          // 53: hangouts.ClientPresenceState
	(*UserEventState)(nil),                               // 54: hangouts.UserEventState
	(*Formatting)(nil),                                   // 55: hangouts.Formatting
	(*LinkData)(nil),                                     // 56: hangouts.LinkData
	(*Segment)(nil),                                      // 57: hangouts.Segment
	(*Attachment)(nil),                                   // 58: hangouts.Attachment
	(*MessageContent)(nil),                               // 59: hangouts.MessageContent
	(*EventAnnotation)(nil),                              // 60: hangouts.EventAnnotation
	(*ChatMessage)(nil),                                  // 61: hangouts.ChatMessage
	(*MembershipChange)(nil),                             // 62: hangouts.MembershipChange
	(*ConversationRename)(nil),                           // 63: hangouts.ConversationRename
	(*HangoutEvent)(nil),                                 // 64: hangouts.HangoutEvent
	(*OTRModification)(nil),                              // 65: hangouts.OTRModification
	(*HashModifier)(nil),                                 // 66: hangouts.HashModifier
	(*Event)(nil),                                        // 67: hangouts.Event
	(*UserReadState)(nil),                                // 68: hangouts.UserReadState
	(*DeliveryMedium)(nil),                               // 69: hangouts.DeliveryMedium
	(*DeliveryMediumOption)(nil),                         // 70: hangouts.DeliveryMediumOption
	(*UserConversationState)(nil),                        // 71: hangouts.UserConversationState
	(*ConversationParticipantData)(nil),                  // 72: hangouts.ConversationParticipantData
	(*Conversation)(nil),                                 // 73: hangouts.Conversation
	(*EasterEgg)(nil),                                    // 74: hangouts.EasterEgg
	(*BlockStateChange)(nil),                             // 75: hangouts.BlockStateChange
	(*Photo)(nil),                                        // 76: hangouts.Photo
	(*ExistingMedia)(nil),                                // 77: hangouts.ExistingMedia
	(*EventRequestHeader)(nil),                           // 78: hangouts.EventRequestHeader
	(*ClientVersion)(nil),                                // 79: hangouts.ClientVersion
	(*RequestHeader)(nil),                                // 80: hangouts.RequestHeader
	(*ResponseHeader)(nil),                               // 81: hangouts.ResponseHeader
	(*Entity)(nil),                                       // 82: hangouts.Entity
	(*EntityProperties)(nil),                             // 83: hangouts.EntityProperties
	(*ConversationState)(nil),                            // 84: hangouts.ConversationState
	(*EventContinuationToken)(nil),                       // 85: hangouts.EventContinuationToken
	(*EntityLookupSpec)(nil),                             // 86: hangouts.EntityLookupSpec
	(*ConfigurationBit)(nil),                             // 87: hangouts.ConfigurationBit
	(*RichPresenceState)(nil),                            // 88: hangouts.RichPresenceState
	(*RichPresenceEnabledState)(nil),                     // 89: hangouts.RichPresenceEnabledState
	(*DesktopOffSetting)(nil),                            // 90: hangouts.DesktopOffSetting
	(*DesktopOffState)(nil),                              // 91: hangouts.DesktopOffState
	(*DndSetting)(nil),                                   // 92: hangouts.DndSetting
	(*PresenceStateSetting)(nil),                         // 93: hangouts.PresenceStateSetting
	(*MoodMessage)(nil),                                  // 94: hangouts.MoodMessage
	(*MoodContent)(nil),                                  // 95: hangouts.MoodContent
	(*MoodSetting)(nil),                                  // 96: hangouts.MoodSetting
	(*MoodState)(nil),                                    // 97: hangouts.MoodState
	(*DeleteAction)(nil),                                 // 98: hangouts.DeleteAction
	(*InviteeID)(nil),                                    // 99: hangouts.InviteeID
	(*Country)(nil),                                      // 100: hangouts.Country
	(*DesktopSoundSetting)(nil),                          // 101: hangouts.DesktopSoundSetting
	(*PhoneData)(nil),                                    // 102: hangouts.PhoneData
	(*Phone)(nil),                                        // 103: hangouts.Phone
	(*I18NData)(nil),                                     // 104: hangouts.I18nData
	(*PhoneNumber)(nil),                                  // 105: hangouts.PhoneNumber
	(*SuggestedContactGroupHash)(nil),                    // 106: hangouts.SuggestedContactGroupHash
	(*SuggestedContact)(nil),                             // 107: hangouts.SuggestedContact
	(*SuggestedContactGroup)(nil),                        // 108: hangouts.SuggestedContactGroup
	(*GroupLinkSharingModification)(nil),                 // 109: hangouts.GroupLinkSharingModification
	(*StateUpdate)(nil),                                  // 110: hangouts.StateUpdate
	(*StateUpdateHeader)(nil),                            // 111: hangouts.StateUpdateHeader
	(*BatchUpdate)(nil),                                  // 112: hangouts.BatchUpdate
	(*ConversationNotification)(nil),                     // 113: hangouts.ConversationNotification
	(*EventNotification)(nil),                            // 114: hangouts.EventNotification
	(*SetFocusNotification)(nil),                         // 115: hangouts.SetFocusNotification
	(*SetTypingNotification)(nil),                        // 116: hangouts.SetTypingNotification
	(*SetConversationNotificationLevelNotification)(nil), // 117: hangouts.SetConversationNotificationLevelNotification
	(*ReplyToInviteNotification)(nil),                    // 118: hangouts.ReplyToInviteNotification
	(*WatermarkNotification)(nil),                        // 119: hangouts.WatermarkNotification
	(*ConversationViewModification)(nil),                 // 120: hangouts.ConversationViewModification
	(*EasterEggNotification)(nil),                        // 121: hangouts.EasterEggNotification
	(*SelfPresenceNotification)(nil),                     // 122: hangouts.SelfPresenceNotification
	(*DeleteActionNotification)(nil),                     // 123: hangouts.DeleteActionNotification
	(*PresenceNotification)(nil),                         // 124: hangouts.PresenceNotification
	(*BlockNotification)(nil),                            // 125: hangouts.BlockNotification
	(*SetNotificationSettingNotification)(nil),           // 126: hangouts.SetNotificationSettingNotification
	(*RichPresenceEnabledStateNotification)(nil),         // 127: hangouts.RichPresenceEnabledStateNotification
	(*ConversationSpec)(nil),                             // 128: hangouts.ConversationSpec
	(*OffnetworkAddress)(nil),                            // 129: hangouts.OffnetworkAddress
	(*EntityResult)(nil),                                 // 130: hangouts.EntityResult
	(*AddUserRequest)(nil),                               // 131: hangouts.AddUserRequest
	(*AddUserResponse)(nil),                              // 132: hangouts.AddUserResponse
	(*CreateConversationRequest)(nil),                    // 133: hangouts.CreateConversationRequest
	(*CreateConversationResponse)(nil),                   // 134: hangouts.CreateConversationResponse
	(*DeleteConversationRequest)(nil),                    // 135: hangouts.DeleteConversationRequest
	(*DeleteConversationResponse)(nil),                   // 136: hangouts.DeleteConversationResponse
	(*EasterEggRequest)(nil),                             // 137: hangouts.EasterEggRequest
	(*EasterEggResponse)(nil),                            // 138: hangouts.EasterEggResponse
	(*GetConversationRequest)(nil),                       // 139: hangouts.GetConversationRequest
	(*GetConversationResponse)(nil),                      // 140: hangouts.GetConversationResponse
	(*GetEntityByIdRequest)(nil),                         // 141: hangouts.GetEntityByIdRequest
	(*GetEntityByIdResponse)(nil),                        // 142: hangouts.GetEntityByIdResponse
	(*GetGroupConversationUrlRequest)(nil),               // 143: hangouts.GetGroupConversationUrlRequest
	(*GetGroupConversationUrlResponse)(nil),              // 144: hangouts.GetGroupConversationUrlResponse
	(*GetSuggestedEntitiesRequest)(nil),                  // 145: hangouts.GetSuggestedEntitiesRequest
	(*GetSuggestedEntitiesResponse)(nil),                 // 146: hangouts.GetSuggestedEntitiesResponse
	(*GetSelfInfoRequest)(nil),                           // 147: hangouts.GetSelfInfoRequest
	(*GetSelfInfoResponse)(nil),                          // 148: hangouts.GetSelfInfoResponse
	(*QueryPresenceRequest)(nil),                         // 149: hangouts.QueryPresenceRequest
	(*QueryPresenceResponse)(nil),                        // 150: hangouts.QueryPresenceResponse
	(*RemoveUserRequest)(nil),                            // 151: hangouts.RemoveUserRequest
	(*RemoveUserResponse)(nil),                           // 152: hangouts.RemoveUserResponse
	(*RenameConversationRequest)(nil),                    // 153: hangouts.RenameConversationRequest
	(*RenameConversationResponse)(nil),                   // 154: hangouts.RenameConversationResponse
	(*SearchEntitiesRequest)(nil),                        // 155: hangouts.SearchEntitiesRequest
	(*SearchEntitiesResponse)(nil),                       // 156: hangouts.SearchEntitiesResponse
	(*Location)(nil),                                     // 157: hangouts.Location
	(*SendChatMessageRequest)(nil),                       // 158: hangouts.SendChatMessageRequest
	(*SendChatMessageResponse)(nil),                      // 159: hangouts.SendChatMessageResponse
	(*ModifyOTRStatusRequest)(nil),                       // 160: hangouts.ModifyOTRStatusRequest
	(*ModifyOTRStatusResponse)(nil),                      // 161: hangouts.ModifyOTRStatusResponse
	(*SendOffnetworkInvitationRequest)(nil),              // 162: hangouts.SendOffnetworkInvitationRequest
	(*SendOffnetworkInvitationResponse)(nil),             // 163: hangouts.SendOffnetworkInvitationResponse
	(*SetActiveClientRequest)(nil),                       // 164: hangouts.SetActiveClientRequest
	(*SetActiveClientResponse)(nil),                      // 165: hangouts.SetActiveClientResponse
	(*SetConversationLevelRequest)(nil),                  // 166: hangouts.SetConversationLevelRequest
	(*SetConversationLevelResponse)(nil),                 // 167: hangouts.SetConversationLevelResponse
	(*SetConversationNotificationLevelRequest)(nil),      // 168: hangouts.SetConversationNotificationLevelRequest
	(*SetConversationNotificationLevelResponse)(nil),     // 169: hangouts.SetConversationNotificationLevelResponse
	(*SetFocusRequest)(nil),                              // 170: hangouts.SetFocusRequest
	(*SetFocusResponse)(nil),                             // 171: hangouts.SetFocusResponse
	(*SetGroupLinkSharingEnabledRequest)(nil),            // 172: hangouts.SetGroupLinkSharingEnabledRequest
	(*SetGroupLinkSharingEnabledResponse)(nil),           // 173: hangouts.SetGroupLinkSharingEnabledResponse
	(*SetPresenceRequest)(nil),                           // 174: hangouts.SetPresenceRequest
	(*SetPresenceResponse)(nil),                          // 175: hangouts.SetPresenceResponse
	(*SetTypingRequest)(nil),                             // 176: hangouts.SetTypingRequest
	(*SetTypingResponse)(nil),                            // 177: hangouts.SetTypingResponse
	(*SyncAllNewEventsRequest)(nil),                      // 178: hangouts.SyncAllNewEventsRequest
	(*SyncAllNewEventsResponse)(nil),                     // 179: hangouts.SyncAllNewEventsResponse
	(*SyncRecentConversationsRequest)(nil),               // 180: hangouts.SyncRecentConversationsRequest
	(*SyncRecentConversationsResponse)(nil),              // 181: hangouts.SyncRecentConversationsResponse
	(*UpdateWatermarkRequest)(nil),                       // 182: hangouts.UpdateWatermarkRequest
	(*UpdateWatermarkResponse)(nil),                      // 183: hangouts.UpdateWatermarkResponse
	(*EMEmbedClientItem)(nil),                            // 184: hangouts.EMEmbedClientItem
	(*EMPlace)(nil),                                      // 185: hangouts.EMPlace
}
var file_hangouts_proto_depIdxs = []int32{
	44,  // 0: hangouts.NotificationSettings.dnd_settings:type_name -> hangouts.DoNotDisturbSetting
	48,  // 1: hangouts.Presence.device_status:type_name -> hangouts.DeviceStatus
	94,  // 2: hangouts.Presence.mood_message:type_name -> hangouts.MoodMessage
	49,  // 3: hangouts.Presence.last_seen:type_name -> hangouts.LastSeen
	47,  // 4: hangouts.PresenceResult.user_id:type_name -> hangouts.ParticipantId
	50,  // 5: hangouts.PresenceResult.presence:type_name -> hangouts.Presence
	52,  // 6: hangouts.ClientPresenceState.identifier:type_name -> hangouts.ClientIdentifier
	4,   // 7: hangouts.ClientPresenceState.state:type_name -> hangouts.ClientPresenceStateType
	47,  // 8: hangouts.UserEventState.user_id:type_name -> hangouts.ParticipantId
	5,   // 9: hangouts.UserEventState.notification_level:type_name -> hangouts.NotificationLevel
	6,   // 10: hangouts.Segment.type:type_name -> hangouts.SegmentType
	55,  // 11: hangouts.Segment.formatting:type_name -> hangouts.Formatting
	56,  // 12: hangouts.Segment.link_data:type_name -> hangouts.LinkData
	184, // 13: hangouts.Attachment.embed_item:type_name -> hangouts.EMEmbedClientItem
	57,  // 14: hangouts.MessageContent.segment:type_name -> hangouts.Segment
	58,  // 15: hangouts.MessageContent.attachment:type_name -> hangouts.Attachment
	60,  // 16: hangouts.ChatMessage.annotation:type_name -> hangouts.EventAnnotation
	59,  // 17: hangouts.ChatMessage.message_content:type_name -> hangouts.MessageContent
	8,   // 18: hangouts.MembershipChange.type:type_name -> hangouts.MembershipChangeType
	47,  // 19: hangouts.MembershipChange.participant_ids:type_name -> hangouts.ParticipantId
	9,   // 20: hangouts.HangoutEvent.event_type:type_name -> hangouts.HangoutEventType
	47,  // 21: hangouts.HangoutEvent.participant_id:type_name -> hangouts.ParticipantId
	11,  // 22: hangouts.OTRModification.old_otr_status:type_name -> hangouts.OffTheRecordStatus
	11,  // 23: hangouts.OTRModification.new_otr_status:type_name -> hangouts.OffTheRecordStatus
	10,  // 24: hangouts.OTRModification.old_otr_toggle:type_name -> hangouts.OffTheRecordToggle
	10,  // 25: hangouts.OTRModification.new_otr_toggle:type_name -> hangouts.OffTheRecordToggle
	46,  // 26: hangouts.Event.conversation_id:type_name -> hangouts.ConversationId
	47,  // 27: hangouts.Event.sender_id:type_name -> hangouts.ParticipantId
	54,  // 28: hangouts.Event.self_event_state:type_name -> hangouts.UserEventState
	12,  // 29: hangouts.Event.source_type:type_name -> hangouts.SourceType
	61,  // 30: hangouts.Event.chat_message:type_name -> hangouts.ChatMessage
	62,  // 31: hangouts.Event.membership_change:type_name -> hangouts.MembershipChange
	63,  // 32: hangouts.Event.conversation_rename:type_name -> hangouts.ConversationRename
	64,  // 33: hangouts.Event.hangout_event:type_name -> hangouts.HangoutEvent
	65,  // 34: hangouts.Event.otr_modification:type_name -> hangouts.OTRModification
	11,  // 35: hangouts.Event.otr_status:type_name -> hangouts.OffTheRecordStatus
	69,  // 36: hangouts.Event.medium_type:type_name -> hangouts.DeliveryMedium
	13,  // 37: hangouts.Event.event_type:type_name -> hangouts.EventType
	66,  // 38: hangouts.Event.hash_modifier:type_name -> hangouts.HashModifier
	109, // 39: hangouts.Event.group_link_sharing_modification:type_name -> hangouts.GroupLinkSharingModification
	47,  // 40: hangouts.UserReadState.participant_id:type_name -> hangouts.ParticipantId
	17,  // 41: hangouts.DeliveryMedium.medium_type:type_name -> hangouts.DeliveryMediumType
	105, // 42: hangouts.DeliveryMedium.phone_number:type_name -> hangouts.PhoneNumber
	69,  // 43: hangouts.DeliveryMediumOption.delivery_medium:type_name -> hangouts.DeliveryMedium
	68,  // 44: hangouts.UserConversationState.self_read_state:type_name -> hangouts.UserReadState
	15,  // 45: hangouts.UserConversationState.status:type_name -> hangouts.ConversationStatus
	5,   // 46: hangouts.UserConversationState.notification_level:type_name -> hangouts.NotificationLevel
	16,  // 47: hangouts.UserConversationState.view:type_name -> hangouts.ConversationView
	47,  // 48: hangouts.UserConversationState.inviter_id:type_name -> hangouts.ParticipantId
	18,  // 49: hangouts.UserConversationState.invite_affinity:type_name -> hangouts.InvitationAffinity
	70,  // 50: hangouts.UserConversationState.delivery_medium_option:type_name -> hangouts.DeliveryMediumOption
	47,  // 51: hangouts.ConversationParticipantData.id:type_name -> hangouts.ParticipantId
	20,  // 52: hangouts.ConversationParticipantData.invitation_status:type_name -> hangouts.InvitationStatus
	19,  // 53: hangouts.ConversationParticipantData.participant_type:type_name -> hangouts.ParticipantType
	20,  // 54: hangouts.ConversationParticipantData.new_invitation_status:type_name -> hangouts.InvitationStatus
	46,  // 55: hangouts.Conversation.conversation_id:type_name -> hangouts.ConversationId
	14,  // 56: hangouts.Conversation.type:type_name -> hangouts.ConversationType
	71,  // 57: hangouts.Conversation.self_conversation_state:type_name -> hangouts.UserConversationState
	68,  // 58: hangouts.Conversation.read_state:type_name -> hangouts.UserReadState
	11,  // 59: hangouts.Conversation.otr_status:type_name -> hangouts.OffTheRecordStatus
	10,  // 60: hangouts.Conversation.otr_toggle:type_name -> hangouts.OffTheRecordToggle
	47,  // 61: hangouts.Conversation.current_participant:type_name -> hangouts.ParticipantId
	72,  // 62: hangouts.Conversation.participant_data:type_name -> hangouts.ConversationParticipantData
	22,  // 63: hangouts.Conversation.network_type:type_name -> hangouts.NetworkType
	21,  // 64: hangouts.Conversation.force_history_state:type_name -> hangouts.ForceHistory
	42,  // 65: hangouts.Conversation.group_link_sharing_status:type_name -> hangouts.GroupLinkSharingStatus
	47,  // 66: hangouts.BlockStateChange.participant_id:type_name -> hangouts.ParticipantId
	23,  // 67: hangouts.BlockStateChange.new_block_state:type_name -> hangouts.BlockState
	76,  // 68: hangouts.ExistingMedia.photo:type_name -> hangouts.Photo
	46,  // 69: hangouts.EventRequestHeader.conversation_id:type_name -> hangouts.ConversationId
	11,  // 70: hangouts.EventRequestHeader.expected_otr:type_name -> hangouts.OffTheRecordStatus
	69,  // 71: hangouts.EventRequestHeader.delivery_medium:type_name -> hangouts.DeliveryMedium
	13,  // 72: hangouts.EventRequestHeader.event_type:type_name -> hangouts.EventType
	25,  // 73: hangouts.ClientVersion.client_id:type_name -> hangouts.ClientId
	26,  // 74: hangouts.ClientVersion.build_type:type_name -> hangouts.ClientBuildType
	79,  // 75: hangouts.RequestHeader.client_version:type_name -> hangouts.ClientVersion
	52,  // 76: hangouts.RequestHeader.client_identifier:type_name -> hangouts.ClientIdentifier
	27,  // 77: hangouts.ResponseHeader.status:type_name -> hangouts.ResponseStatus
	47,  // 78: hangouts.Entity.id:type_name -> hangouts.ParticipantId
	50,  // 79: hangouts.Entity.presence:type_name -> hangouts.Presence
	83,  // 80: hangouts.Entity.properties:type_name -> hangouts.EntityProperties
	19,  // 81: hangouts.Entity.entity_type:type_name -> hangouts.ParticipantType
	43,  // 82: hangouts.Entity.had_past_hangout_state:type_name -> hangouts.Entity.PastHangoutState
	30,  // 83: hangouts.EntityProperties.type:type_name -> hangouts.ProfileType
	29,  // 84: hangouts.EntityProperties.gender:type_name -> hangouts.Gender
	28,  // 85: hangouts.EntityProperties.photo_url_status:type_name -> hangouts.PhotoUrlStatus
	46,  // 86: hangouts.ConversationState.conversation_id:type_name -> hangouts.ConversationId
	73,  // 87: hangouts.ConversationState.conversation:type_name -> hangouts.Conversation
	67,  // 88: hangouts.ConversationState.event:type_name -> hangouts.Event
	85,  // 89: hangouts.ConversationState.event_continuation_token:type_name -> hangouts.EventContinuationToken
	31,  // 90: hangouts.ConfigurationBit.configuration_bit_type:type_name -> hangouts.ConfigurationBitType
	89,  // 91: hangouts.RichPresenceState.get_rich_presence_enabled_state:type_name -> hangouts.RichPresenceEnabledState
	32,  // 92: hangouts.RichPresenceEnabledState.type:type_name -> hangouts.RichPresenceType
	4,   // 93: hangouts.PresenceStateSetting.type:type_name -> hangouts.ClientPresenceStateType
	95,  // 94: hangouts.MoodMessage.mood_content:type_name -> hangouts.MoodContent
	57,  // 95: hangouts.MoodContent.segment:type_name -> hangouts.Segment
	94,  // 96: hangouts.MoodSetting.mood_message:type_name -> hangouts.MoodMessage
	96,  // 97: hangouts.MoodState.mood_setting:type_name -> hangouts.MoodSetting
	34,  // 98: hangouts.DeleteAction.delete_type:type_name -> hangouts.DeleteType
	36,  // 99: hangouts.DesktopSoundSetting.desktop_sound_state:type_name -> hangouts.SoundState
	36,  // 100: hangouts.DesktopSoundSetting.desktop_ring_sound_state:type_name -> hangouts.SoundState
	103, // 101: hangouts.PhoneData.phone:type_name -> hangouts.Phone
	37,  // 102: hangouts.PhoneData.caller_id_settings_mask:type_name -> hangouts.CallerIdSettingsMask
	105, // 103: hangouts.Phone.phone_number:type_name -> hangouts.PhoneNumber
	38,  // 104: hangouts.Phone.verification_status:type_name -> hangouts.PhoneVerificationStatus
	39,  // 105: hangouts.Phone.discoverability_status:type_name -> hangouts.PhoneDiscoverabilityStatus
	40,  // 106: hangouts.I18nData.validation_result:type_name -> hangouts.PhoneValidationResult
	104, // 107: hangouts.PhoneNumber.i18n_data:type_name -> hangouts.I18nData
	82,  // 108: hangouts.SuggestedContact.entity:type_name -> hangouts.Entity
	20,  // 109: hangouts.SuggestedContact.invitation_status:type_name -> hangouts.InvitationStatus
	107, // 110: hangouts.SuggestedContactGroup.contact:type_name -> hangouts.SuggestedContact
	42,  // 111: hangouts.GroupLinkSharingModification.new_status:type_name -> hangouts.GroupLinkSharingStatus
	111, // 112: hangouts.StateUpdate.state_update_header:type_name -> hangouts.StateUpdateHeader
	73,  // 113: hangouts.StateUpdate.conversation:type_name -> hangouts.Conversation
	113, // 114: hangouts.StateUpdate.conversation_notification:type_name -> hangouts.ConversationNotification
	114, // 115: hangouts.StateUpdate.event_notification:type_name -> hangouts.EventNotification
	115, // 116: hangouts.StateUpdate.focus_notification:type_name -> hangouts.SetFocusNotification
	116, // 117: hangouts.StateUpdate.typing_notification:type_name -> hangouts.SetTypingNotification
	117, // 118: hangouts.StateUpdate.notification_level_notification:type_name -> hangouts.SetConversationNotificationLevelNotification
	118, // 119: hangouts.StateUpdate.reply_to_invite_notification:type_name -> hangouts.ReplyToInviteNotification
	119, // 120: hangouts.StateUpdate.watermark_notification:type_name -> hangouts.WatermarkNotification
	120, // 121: hangouts.StateUpdate.view_modification:type_name -> hangouts.ConversationViewModification
	121, // 122: hangouts.StateUpdate.easter_egg_notification:type_name -> hangouts.EasterEggNotification
	122, // 123: hangouts.StateUpdate.self_presence_notification:type_name -> hangouts.SelfPresenceNotification
	123, // 124: hangouts.StateUpdate.delete_notification:type_name -> hangouts.DeleteActionNotification
	124, // 125: hangouts.StateUpdate.presence_notification:type_name -> hangouts.PresenceNotification
	125, // 126: hangouts.StateUpdate.block_notification:type_name -> hangouts.BlockNotification
	126, // 127: hangouts.StateUpdate.notification_setting_notification:type_name -> hangouts.SetNotificationSettingNotification
	127, // 128: hangouts.StateUpdate.rich_presence_enabled_state_notification:type_name -> hangouts.RichPresenceEnabledStateNotification
	0,   // 129: hangouts.StateUpdateHeader.active_client_state:type_name -> hangouts.ActiveClientState
	45,  // 130: hangouts.StateUpdateHeader.notification_settings:type_name -> hangouts.NotificationSettings
	110, // 131: hangouts.BatchUpdate.state_update:type_name -> hangouts.StateUpdate
	73,  // 132: hangouts.ConversationNotification.conversation:type_name -> hangouts.Conversation
	67,  // 133: hangouts.EventNotification.event:type_name -> hangouts.Event
	46,  // 134: hangouts.SetFocusNotification.conversation_id:type_name -> hangouts.ConversationId
	47,  // 135: hangouts.SetFocusNotification.sender_id:type_name -> hangouts.ParticipantId
	1,   // 136: hangouts.SetFocusNotification.type:type_name -> hangouts.FocusType
	2,   // 137: hangouts.SetFocusNotification.device:type_name -> hangouts.FocusDevice
	46,  // 138: hangouts.SetTypingNotification.conversation_id:type_name -> hangouts.ConversationId
	47,  // 139: hangouts.SetTypingNotification.sender_id:type_name -> hangouts.ParticipantId
	3,   // 140: hangouts.SetTypingNotification.type:type_name -> hangouts.TypingType
	46,  // 141: hangouts.SetConversationNotificationLevelNotification.conversation_id:type_name -> hangouts.ConversationId
	5,   // 142: hangouts.SetConversationNotificationLevelNotification.level:type_name -> hangouts.NotificationLevel
	46,  // 143: hangouts.ReplyToInviteNotification.conversation_id:type_name -> hangouts.ConversationId
	24,  // 144: hangouts.ReplyToInviteNotification.type:type_name -> hangouts.ReplyToInviteType
	47,  // 145: hangouts.WatermarkNotification.sender_id:type_name -> hangouts.ParticipantId
	46,  // 146: hangouts.WatermarkNotification.conversation_id:type_name -> hangouts.ConversationId
	46,  // 147: hangouts.ConversationViewModification.conversation_id:type_name -> hangouts.ConversationId
	16,  // 148: hangouts.ConversationViewModification.old_view:type_name -> hangouts.ConversationView
	16,  // 149: hangouts.ConversationViewModification.new_view:type_name -> hangouts.ConversationView
	47,  // 150: hangouts.EasterEggNotification.sender_id:type_name -> hangouts.ParticipantId
	46,  // 151: hangouts.EasterEggNotification.conversation_id:type_name -> hangouts.ConversationId
	74,  // 152: hangouts.EasterEggNotification.easter_egg:type_name -> hangouts.EasterEgg
	53,  // 153: hangouts.SelfPresenceNotification.client_presence_state:type_name -> hangouts.ClientPresenceState
	44,  // 154: hangouts.SelfPresenceNotification.do_not_disturb_setting:type_name -> hangouts.DoNotDisturbSetting
	90,  // 155: hangouts.SelfPresenceNotification.desktop_off_setting:type_name -> hangouts.DesktopOffSetting
	91,  // 156: hangouts.SelfPresenceNotification.desktop_off_state:type_name -> hangouts.DesktopOffState
	97,  // 157: hangouts.SelfPresenceNotification.mood_state:type_name -> hangouts.MoodState
	46,  // 158: hangouts.DeleteActionNotification.conversation_id:type_name -> hangouts.ConversationId
	98,  // 159: hangouts.DeleteActionNotification.delete_action:type_name -> hangouts.DeleteAction
	51,  // 160: hangouts.PresenceNotification.presence:type_name -> hangouts.PresenceResult
	75,  // 161: hangouts.BlockNotification.block_state_change:type_name -> hangouts.BlockStateChange
	87,  // 162: hangouts.SetNotificationSettingNotification.configuration_bit:type_name -> hangouts.ConfigurationBit
	101, // 163: hangouts.SetNotificationSettingNotification.desktop_sound_setting:type_name -> hangouts.DesktopSoundSetting
	89,  // 164: hangouts.RichPresenceEnabledStateNotification.rich_presence_enabled_state:type_name -> hangouts.RichPresenceEnabledState
	46,  // 165: hangouts.ConversationSpec.conversation_id:type_name -> hangouts.ConversationId
	41,  // 166: hangouts.OffnetworkAddress.type:type_name -> hangouts.OffnetworkAddressType
	86,  // 167: hangouts.EntityResult.lookup_spec:type_name -> hangouts.EntityLookupSpec
	82,  // 168: hangouts.EntityResult.entity:type_name -> hangouts.Entity
	80,  // 169: hangouts.AddUserRequest.request_header:type_name -> hangouts.RequestHeader
	99,  // 170: hangouts.AddUserRequest.invitee_id:type_name -> hangouts.InviteeID
	78,  // 171: hangouts.AddUserRequest.event_request_header:type_name -> hangouts.EventRequestHeader
	81,  // 172: hangouts.AddUserResponse.response_header:type_name -> hangouts.ResponseHeader
	67,  // 173: hangouts.AddUserResponse.created_event:type_name -> hangouts.Event
	80,  // 174: hangouts.CreateConversationRequest.request_header:type_name -> hangouts.RequestHeader
	14,  // 175: hangouts.CreateConversationRequest.type:type_name -> hangouts.ConversationType
	99,  // 176: hangouts.CreateConversationRequest.invitee_id:type_name -> hangouts.InviteeID
	81,  // 177: hangouts.CreateConversationResponse.response_header:type_name -> hangouts.ResponseHeader
	73,  // 178: hangouts.CreateConversationResponse.conversation:type_name -> hangouts.Conversation
	80,  // 179: hangouts.DeleteConversationRequest.request_header:type_name -> hangouts.RequestHeader
	46,  // 180: hangouts.DeleteConversationRequest.conversation_id:type_name -> hangouts.ConversationId
	81,  // 181: hangouts.DeleteConversationResponse.response_header:type_name -> hangouts.ResponseHeader
	98,  // 182: hangouts.DeleteConversationResponse.delete_action:type_name -> hangouts.DeleteAction
	80,  // 183: hangouts.EasterEggRequest.request_header:type_name -> hangouts.RequestHeader
	46,  // 184: hangouts.EasterEggRequest.conversation_id:type_name -> hangouts.ConversationId
	74,  // 185: hangouts.EasterEggRequest.easter_egg:type_name -> hangouts.EasterEgg
	81,  // 186: hangouts.EasterEggResponse.response_header:type_name -> hangouts.ResponseHeader
	80,  // 187: hangouts.GetConversationRequest.request_header:type_name -> hangouts.RequestHeader
	128, // 188: hangouts.GetConversationRequest.conversation_spec:type_name -> hangouts.ConversationSpec
	85,  // 189: hangouts.GetConversationRequest.event_continuation_token:type_name -> hangouts.EventContinuationToken
	81,  // 190: hangouts.GetConversationResponse.response_header:type_name -> hangouts.ResponseHeader
	84,  // 191: hangouts.GetConversationResponse.conversation_state:type_name -> hangouts.ConversationState
	80,  // 192: hangouts.GetEntityByIdRequest.request_header:type_name -> hangouts.RequestHeader
	86,  // 193: hangouts.GetEntityByIdRequest.batch_lookup_spec:type_name -> hangouts.EntityLookupSpec
	81,  // 194: hangouts.GetEntityByIdResponse.response_header:type_name -> hangouts.ResponseHeader
	82,  // 195: hangouts.GetEntityByIdResponse.entity:type_name -> hangouts.Entity
	130, // 196: hangouts.GetEntityByIdResponse.entity_result:type_name -> hangouts.EntityResult
	80,  // 197: hangouts.GetGroupConversationUrlRequest.request_header:type_name -> hangouts.RequestHeader
	46,  // 198: hangouts.GetGroupConversationUrlRequest.conversation_id:type_name -> hangouts.ConversationId
	81,  // 199: hangouts.GetGroupConversationUrlResponse.response_header:type_name -> hangouts.ResponseHeader
	80,  // 200: hangouts.GetSuggestedEntitiesRequest.request_header:type_name -> hangouts.RequestHeader
	106, // 201: hangouts.GetSuggestedEntitiesRequest.favorites:type_name -> hangouts.SuggestedContactGroupHash
	106, // 202: hangouts.GetSuggestedEntitiesRequest.contacts_you_hangout_with:type_name -> hangouts.SuggestedContactGroupHash
	106, // 203: hangouts.GetSuggestedEntitiesRequest.other_contacts_on_hangouts:type_name -> hangouts.SuggestedContactGroupHash
	106, // 204: hangouts.GetSuggestedEntitiesRequest.other_contacts:type_name -> hangouts.SuggestedContactGroupHash
	106, // 205: hangouts.GetSuggestedEntitiesRequest.dismissed_contacts:type_name -> hangouts.SuggestedContactGroupHash
	106, // 206: hangouts.GetSuggestedEntitiesRequest.pinned_favorites:type_name -> hangouts.SuggestedContactGroupHash
	81,  // 207: hangouts.GetSuggestedEntitiesResponse.response_header:type_name -> hangouts.ResponseHeader
	82,  // 208: hangouts.GetSuggestedEntitiesResponse.entity:type_name -> hangouts.Entity
	108, // 209: hangouts.GetSuggestedEntitiesResponse.favorites:type_name -> hangouts.SuggestedContactGroup
	108, // 210: hangouts.GetSuggestedEntitiesResponse.contacts_you_hangout_with:type_name -> hangouts.SuggestedContactGroup
	108, // 211: hangouts.GetSuggestedEntitiesResponse.other_contacts_on_hangouts:type_name -> hangouts.SuggestedContactGroup
	108, // 212: hangouts.GetSuggestedEntitiesResponse.other_contacts:type_name -> hangouts.SuggestedContactGroup
	108, // 213: hangouts.GetSuggestedEntitiesResponse.dismissed_contacts:type_name -> hangouts.SuggestedContactGroup
	108, // 214: hangouts.GetSuggestedEntitiesResponse.pinned_favorites:type_name -> hangouts.SuggestedContactGroup
	80,  // 215: hangouts.GetSelfInfoRequest.request_header:type_name -> hangouts.RequestHeader
	81,  // 216: hangouts.GetSelfInfoResponse.response_header:type_name -> hangouts.ResponseHeader
	82,  // 217: hangouts.GetSelfInfoResponse.self_entity:type_name -> hangouts.Entity
	44,  // 218: hangouts.GetSelfInfoResponse.dnd_state:type_name -> hangouts.DoNotDisturbSetting
	90,  // 219: hangouts.GetSelfInfoResponse.desktop_off_setting:type_name -> hangouts.DesktopOffSetting
	102, // 220: hangouts.GetSelfInfoResponse.phone_data:type_name -> hangouts.PhoneData
	87,  // 221: hangouts.GetSelfInfoResponse.configuration_bit:type_name -> hangouts.ConfigurationBit
	91,  // 222: hangouts.GetSelfInfoResponse.desktop_off_state:type_name -> hangouts.DesktopOffState
	101, // 223: hangouts.GetSelfInfoResponse.desktop_sound_setting:type_name -> hangouts.DesktopSoundSetting
	88,  // 224: hangouts.GetSelfInfoResponse.rich_presence_state:type_name -> hangouts.RichPresenceState
	100, // 225: hangouts.GetSelfInfoResponse.default_country:type_name -> hangouts.Country
	80,  // 226: hangouts.QueryPresenceRequest.request_header:type_name -> hangouts.RequestHeader
	47,  // 227: hangouts.QueryPresenceRequest.participant_id:type_name -> hangouts.ParticipantId
	33,  // 228: hangouts.QueryPresenceRequest.field_mask:type_name -> hangouts.FieldMask
	81,  // 229: hangouts.QueryPresenceResponse.response_header:type_name -> hangouts.ResponseHeader
	51,  // 230: hangouts.QueryPresenceResponse.presence_result:type_name -> hangouts.PresenceResult
	80,  // 231: hangouts.RemoveUserRequest.request_header:type_name -> hangouts.RequestHeader
	47,  // 232: hangouts.RemoveUserRequest.participant_id:type_name -> hangouts.ParticipantId
	78,  // 233: hangouts.RemoveUserRequest.event_request_header:type_name -> hangouts.EventRequestHeader
	81,  // 234: hangouts.RemoveUserResponse.response_header:type_name -> hangouts.ResponseHeader
	67,  // 235: hangouts.RemoveUserResponse.created_event:type_name -> hangouts.Event
	80,  // 236: hangouts.RenameConversationRequest.request_header:type_name -> hangouts.RequestHeader
	78,  // 237: hangouts.RenameConversationRequest.event_request_header:type_name -> hangouts.EventRequestHeader
	81,  // 238: hangouts.RenameConversationResponse.response_header:type_name -> hangouts.ResponseHeader
	67,  // 239: hangouts.RenameConversationResponse.created_event:type_name -> hangouts.Event
	80,  // 240: hangouts.SearchEntitiesRequest.request_header:type_name -> hangouts.RequestHeader
	81,  // 241: hangouts.SearchEntitiesResponse.response_header:type_name -> hangouts.ResponseHeader
	82,  // 242: hangouts.SearchEntitiesResponse.entity:type_name -> hangouts.Entity
	185, // 243: hangouts.Location.place:type_name -> hangouts.EMPlace
	80,  // 244: hangouts.SendChatMessageRequest.request_header:type_name -> hangouts.RequestHeader
	60,  // 245: hangouts.SendChatMessageRequest.annotation:type_name -> hangouts.EventAnnotation
	59,  // 246: hangouts.SendChatMessageRequest.message_content:type_name -> hangouts.MessageContent
	77,  // 247: hangouts.SendChatMessageRequest.existing_media:type_name -> hangouts.ExistingMedia
	78,  // 248: hangouts.SendChatMessageRequest.event_request_header:type_name -> hangouts.EventRequestHeader
	47,  // 249: hangouts.SendChatMessageRequest.user_id:type_name -> hangouts.ParticipantId
	157, // 250: hangouts.SendChatMessageRequest.location:type_name -> hangouts.Location
	81,  // 251: hangouts.SendChatMessageResponse.response_header:type_name -> hangouts.ResponseHeader
	67,  // 252: hangouts.SendChatMessageResponse.created_event:type_name -> hangouts.Event
	80,  // 253: hangouts.ModifyOTRStatusRequest.request_header:type_name -> hangouts.RequestHeader
	11,  // 254: hangouts.ModifyOTRStatusRequest.otr_status:type_name -> hangouts.OffTheRecordStatus
	78,  // 255: hangouts.ModifyOTRStatusRequest.event_request_header:type_name -> hangouts.EventRequestHeader
	81,  // 256: hangouts.ModifyOTRStatusResponse.response_header:type_name -> hangouts.ResponseHeader
	67,  // 257: hangouts.ModifyOTRStatusResponse.created_event:type_name -> hangouts.Event
	80,  // 258: hangouts.SendOffnetworkInvitationRequest.request_header:type_name -> hangouts.RequestHeader
	129, // 259: hangouts.SendOffnetworkInvitationRequest.invitee_address:type_name -> hangouts.OffnetworkAddress
	81,  // 260: hangouts.SendOffnetworkInvitationResponse.response_header:type_name -> hangouts.ResponseHeader
	80,  // 261: hangouts.SetActiveClientRequest.request_header:type_name -> hangouts.RequestHeader
	81,  // 262: hangouts.SetActiveClientResponse.response_header:type_name -> hangouts.ResponseHeader
	80,  // 263: hangouts.SetConversationLevelRequest.request_header:type_name -> hangouts.RequestHeader
	81,  // 264: hangouts.SetConversationLevelResponse.response_header:type_name -> hangouts.ResponseHeader
	80,  // 265: hangouts.SetConversationNotificationLevelRequest.request_header:type_name -> hangouts.RequestHeader
	46,  // 266: hangouts.SetConversationNotificationLevelRequest.conversation_id:type_name -> hangouts.ConversationId
	5,   // 267: hangouts.SetConversationNotificationLevelRequest.level:type_name -> hangouts.NotificationLevel
	81,  // 268: hangouts.SetConversationNotificationLevelResponse.response_header:type_name -> hangouts.ResponseHeader
	80,  // 269: hangouts.SetFocusRequest.request_header:type_name -> hangouts.RequestHeader
	46,  // 270: hangouts.SetFocusRequest.conversation_id:type_name -> hangouts.ConversationId
	1,   // 271: hangouts.SetFocusRequest.type:type_name -> hangouts.FocusType
	81,  // 272: hangouts.SetFocusResponse.response_header:type_name -> hangouts.ResponseHeader
	80,  // 273: hangouts.SetGroupLinkSharingEnabledRequest.request_header:type_name -> hangouts.RequestHeader
	78,  // 274: hangouts.SetGroupLinkSharingEnabledRequest.event_request_header:type_name -> hangouts.EventRequestHeader
	42,  // 275: hangouts.SetGroupLinkSharingEnabledRequest.group_link_sharing_status:type_name -> hangouts.GroupLinkSharingStatus
	81,  // 276: hangouts.SetGroupLinkSharingEnabledResponse.response_header:type_name -> hangouts.ResponseHeader
	67,  // 277: hangouts.SetGroupLinkSharingEnabledResponse.created_event:type_name -> hangouts.Event
	73,  // 278: hangouts.SetGroupLinkSharingEnabledResponse.updated_conversation:type_name -> hangouts.Conversation
	80,  // 279: hangouts.SetPresenceRequest.request_header:type_name -> hangouts.RequestHeader
	93,  // 280: hangouts.SetPresenceRequest.presence_state_setting:type_name -> hangouts.PresenceStateSetting
	92,  // 281: hangouts.SetPresenceRequest.dnd_setting:type_name -> hangouts.DndSetting
	90,  // 282: hangouts.SetPresenceRequest.desktop_off_setting:type_name -> hangouts.DesktopOffSetting
	96,  // 283: hangouts.SetPresenceRequest.mood_setting:type_name -> hangouts.MoodSetting
	81,  // 284: hangouts.SetPresenceResponse.response_header:type_name -> hangouts.ResponseHeader
	80,  // 285: hangouts.SetTypingRequest.request_header:type_name -> hangouts.RequestHeader
	46,  // 286: hangouts.SetTypingRequest.conversation_id:type_name -> hangouts.ConversationId
	3,   // 287: hangouts.SetTypingRequest.type:type_name -> hangouts.TypingType
	81,  // 288: hangouts.SetTypingResponse.response_header:type_name -> hangouts.ResponseHeader
	80,  // 289: hangouts.SyncAllNewEventsRequest.request_header:type_name -> hangouts.RequestHeader
	81,  // 290: hangouts.SyncAllNewEventsResponse.response_header:type_name -> hangouts.ResponseHeader
	84,  // 291: hangouts.SyncAllNewEventsResponse.conversation_state:type_name -> hangouts.ConversationState
	80,  // 292: hangouts.SyncRecentConversationsRequest.request_header:type_name -> hangouts.RequestHeader
	35,  // 293: hangouts.SyncRecentConversationsRequest.sync_filter:type_name -> hangouts.SyncFilter
	81,  // 294: hangouts.SyncRecentConversationsResponse.response_header:type_name -> hangouts.ResponseHeader
	84,  // 295: hangouts.SyncRecentConversationsResponse.conversation_state:type_name -> hangouts.ConversationState
	80,  // 296: hangouts.UpdateWatermarkRequest.request_header:type_name -> hangouts.RequestHeader
	46,  // 297: hangouts.UpdateWatermarkRequest.conversation_id:type_name -> hangouts.ConversationId
	81,  // 298: hangouts.UpdateWatermarkResponse.response_header:type_name -> hangouts.ResponseHeader
	299, // [299:299] is the sub-list for method output_type
	299, // [299:299] is the sub-list for method input_type
	299, // [299:299] is the sub-list for extension type_name
	299, // [299:299] is the sub-list for extension extendee
	0,   // [0:299] is the sub-list for field type_name
}

func init() { file_hangouts_proto_init() }
func file_hangouts_proto_init() {
	if File_hangouts_proto != nil {
		return
	}
	file_embeds_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_hangouts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoNotDisturbSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastSeen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientPresenceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Formatting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MembershipChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationRename); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HangoutEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTRModification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReadState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryMedium); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryMediumOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConversationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationParticipantData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasterEgg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Photo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistingMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventContinuationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityLookupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationBit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichPresenceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichPresenceEnabledState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesktopOffSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesktopOffState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DndSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceStateSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoodMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoodContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoodSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoodState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteeID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesktopSoundSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Phone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*I18NData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestedContactGroupHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestedContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestedContactGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLinkSharingModification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateUpdateHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFocusNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTypingNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationNotificationLevelNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyToInviteNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatermarkNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationViewModification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasterEggNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfPresenceNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteActionNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNotificationSettingNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichPresenceEnabledStateNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffnetworkAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasterEggRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasterEggResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntityByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntityByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupConversationUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupConversationUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSuggestedEntitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSuggestedEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelfInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelfInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPresenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPresenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEntitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChatMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChatMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyOTRStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyOTRStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOffnetworkInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOffnetworkInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActiveClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActiveClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationNotificationLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationNotificationLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFocusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFocusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupLinkSharingEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupLinkSharingEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPresenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPresenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTypingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTypingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncAllNewEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncAllNewEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRecentConversationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRecentConversationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWatermarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hangouts_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWatermarkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hangouts_proto_msgTypes[66].OneofWrappers = []interface{}{
		(*StateUpdate_ConversationNotification)(nil),
		(*StateUpdate_EventNotification)(nil),
		(*StateUpdate_FocusNotification)(nil),
		(*StateUpdate_TypingNotification)(nil),
		(*StateUpdate_NotificationLevelNotification)(nil),
		(*StateUpdate_ReplyToInviteNotification)(nil),
		(*StateUpdate_WatermarkNotification)(nil),
		(*StateUpdate_ViewModification)(nil),
		(*StateUpdate_EasterEggNotification)(nil),
		(*StateUpdate_SelfPresenceNotification)(nil),
		(*StateUpdate_DeleteNotification)(nil),
		(*StateUpdate_PresenceNotification)(nil),
		(*StateUpdate_BlockNotification)(nil),
		(*StateUpdate_NotificationSettingNotification)(nil),
		(*StateUpdate_RichPresenceEnabledStateNotification)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hangouts_proto_rawDesc,
			NumEnums:      44,
			NumMessages:   140,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hangouts_proto_goTypes,
		DependencyIndexes: file_hangouts_proto_depIdxs,
		EnumInfos:         file_hangouts_proto_enumTypes,
		MessageInfos:      file_hangouts_proto_msgTypes,
	}.Build()
	File_hangouts_proto = out.File
	file_hangouts_proto_rawDesc = nil
	file_hangouts_proto_goTypes = nil
	file_hangouts_proto_depIdxs = nil
}
